USE [DIVA_MASTER_SCRIPT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--ALTER PROCEDURE [dbo].[A_005G_CREATE_EXCHANGE_RATES]
CREATE   PROCEDURE [dbo].[A_005G_UPDATE_EXCHANGE_RATES]
WITH EXEC AS CALLER
AS
-- BEGIN


/* Initiate the log */  
--Create database log table if it does not exist
IF OBJECT_ID('LOG_SP_EXECUTION', 'U') IS NULL BEGIN CREATE TABLE [DBO].[LOG_SP_EXECUTION] ([DATABASE] NVARCHAR(MAX) NULL,[OBJECT] NVARCHAR(MAX) NULL,[OBJECT_TYPE] NVARCHAR(MAX) NULL,[USER] NVARCHAR(MAX) NULL,[DATE] DATE NULL,[TIME] TIME NULL,[DESCRIPTION] NVARCHAR(MAX) NULL,[TABLE] NVARCHAR(MAX),[ROWS] INT) END

--Log start of procedure
INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Procedure started',NULL,NULL

/* Initialize parameters from globals table */

     DECLARE 	 
			 @CURRENCY NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'currency')
			,@DATE1 NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'date1')
			,@DATE2 NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'date2')
			,@DOWNLOADDATE NVARCHAR(MAX)		= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'downloaddate')
			,@DATEFORMAT VARCHAR(3)             = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'dateformat')
			,@EXCHANGERATETYPE NVARCHAR(MAX)	= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'exchangeratetype')
			,@LANGUAGE1 NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'language1')
			,@LANGUAGE2 NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'language2')
			,@YEAR NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'year')
			,@ID NVARCHAR(MAX)					= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'id')
			,@LIMIT_RECORDS INT		            = CAST((SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'LIMIT_RECORDS') AS INT)


/*Test mode*/

SET ROWCOUNT @LIMIT_RECORDS
	SET NOCOUNT ON;

	/*
		Step 1: Create the AM_EXCHNG table if the AM_EXCHNG table do not exist.
	*/
	PRINT 'Creating AM_EXCHNG table.'
	IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME LIKE 'AM_EXCHNG')
		BEGIN
			CREATE TABLE [dbo].[AM_EXCHNG](
				[EXCHNG_FROM] VARCHAR(3) NOT NULL,
				[EXCHNG_TO] NVARCHAR(3) NOT NULL,
				[EXCHNG_RATIO] FLOAT NULL,
				[EXCHNG_SOURCE] NVARCHAR(MAX) NULL
				CONSTRAINT PK_AM_EXCHANGE PRIMARY KEY ([EXCHNG_FROM], [EXCHNG_TO])
			)
		END

		/*
			Step 2: List all currency units have been use in transaction table like BKPF/BSEG, VBAK/VBAP and EKKO/EKPO and have not been AM_EXCHNG table yet to a temparary table before we import them to AM_EXCHNG.
		*/
		EXEC SP_REMOVE_TABLES 'B00_01_TT_ALL_CURRENCY_UNITS'
		SELECT BKPF_WAERS AS CURRENCY_UNIT
		INTO B00_01_TT_ALL_CURRENCY_UNITS
		FROM A_BKPF
		WHERE NOT EXISTS (SELECT TOP 1 1 FROM AM_EXCHNG WHERE BKPF_WAERS = EXCHNG_FROM)
		UNION
		SELECT EKKO_WAERS
		FROM A_EKKO
		WHERE NOT EXISTS (SELECT TOP 1 1 FROM AM_EXCHNG WHERE EKKO_WAERS = EXCHNG_FROM)
		UNION
		SELECT VBAK_WAERK
		FROM A_VBAK
		WHERE NOT EXISTS (SELECT TOP 1 1 FROM AM_EXCHNG WHERE VBAK_WAERK = EXCHNG_FROM)



		/*
			Step 3: Insert new currency unit to AM_EXCHNG tables
		*/
		INSERT INTO AM_EXCHNG(EXCHNG_FROM, EXCHNG_TO, EXCHNG_RATIO)
		SELECT DISTINCT CURRENCY_UNIT, 'USD', NULL
		FROM B00_01_TT_ALL_CURRENCY_UNITS
		WHERE CURRENCY_UNIT <> ''


/* log cube creation*/

INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Cube completed','AM_EXCHNG',(SELECT COUNT(*) FROM AM_EXCHNG) 


/* log end of procedure*/


INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(date,GETDATE()),CONVERT(time,GETDATE()),'Procedure finished',NULL,NULL



-- END





GO
