USE [DIVA_MASTER_SCRIPT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--ALTER PROCEDURE [dbo].[B10_PTP_PO_HISTORY] 
CREATE     PROC [dbo].[script_B10_PTP_PO_HISTORY]
WITH EXECUTE AS CALLER
AS
--DYNAMIC_SCRIPT_START


/* Initiate the log */  
--Create database log table if it does not exist
IF OBJECT_ID('LOG_SP_EXECUTION', 'U') IS NULL BEGIN CREATE TABLE [DBO].[LOG_SP_EXECUTION] ([DATABASE] NVARCHAR(MAX) NULL,[OBJECT] NVARCHAR(MAX) NULL,[OBJECT_TYPE] NVARCHAR(MAX) NULL,[USER] NVARCHAR(MAX) NULL,[DATE] DATE NULL,[TIME] TIME NULL,[DESCRIPTION] NVARCHAR(MAX) NULL,[TABLE] NVARCHAR(MAX),[ROWS] INT) END

--Log start of procedure
INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Procedure started',NULL,NULL

/* Initialize parameters from globals table */

     DECLARE 	 
			 @CURRENCY NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'currency')
			,@DATE1 NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'date1')
			,@DATE2 NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'date2')
			,@DOWNLOADDATE NVARCHAR(MAX)		= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'downloaddate')
			,@DATEFORMAT VARCHAR(3)             = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'dateformat')
			,@EXCHANGERATETYPE NVARCHAR(MAX)	= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'exchangeratetype')
			,@LANGUAGE1 NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'language1')
			,@LANGUAGE2 NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'language2')
			,@YEAR NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'year')
			,@ID NVARCHAR(MAX)					= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'id')
			,@LIMIT_RECORDS INT		            = CAST((SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'LIMIT_RECORDS') AS INT)


/*Test mode*/

SET ROWCOUNT @LIMIT_RECORDS

/*Change history comments*/

  /*
    
    Title:  B10_02_IT_PTP_ORD_PO_HISTORY 
    Description: Creates a cube with all the GRs and invoices related to a PO
    
	--------------------------------------------------------------
    Update history
    --------------------------------------------------------------
    Date		| 	Who |	Description
    19-04-2016		FT		First version for Sony
	21-04-2016		MW		Review, field re-order, changed GR/IR to Posting type, added join with AUT-01-USR cube, added posted in period, 
							added Company code, added Business Unit, removed dashboard filters and added corresponding fields from ORD to then move to load script for Qlik,
							added conversion factors for DOC and CC values, added multiplier by -1 depending on credit/debit
    09-02-2017		JSM		Added database log.								
    19-03-2017		CW      Update and standardisation for SID
    28-07-2017		NP      Naming convention
	22-03-2022	   Thuan	Remove MANDT field in join
	
*/

/*Step 1/
--PO history table:
--  -- Enrich PO history table with some information from the list of POs
-- The following records are being excluded:
    -- only keep lines for which EKBE_VGABE = 1 (goods receipts) or EKBE_VGABE = 2,3,4 (invoices)
	-- only keep lines for which 
	    --- the purchase order is created in the period
		--- the purchase order is not deleted and is a purchase order (and not a contract, purchase request etc.)
		--- the purchase orders that return an item
		--- the purchase orders that have item category 7
--Fields are being added from other SAP tables as mentioned in JOIN clauses below
--Fields are being calculated as mentioned in SELECT clause below*/


	EXEC sp_droptable 'B10_01_IT_PTP_PO_HISTORY'
	EXEC sp_droptable 'B10_02_IT_PTP_PO_HISTORY'

	EXEC SP_DROPTABLE 'B10_01_TT_PTP_PO_HISTORY'
	SELECT 
		 B09_13_IT_PTP_POS.B09_EKKO_MANDT AS EKKO_MANDT		
		,B09_13_IT_PTP_POS.B09_SCOPE_BUSINESS_DMN_L1 AS SCOPE_BUSINESS_DMN_L1
		,B09_13_IT_PTP_POS.B09_SCOPE_BUSINESS_DMN_L2 AS SCOPE_BUSINESS_DMN_L2	
		,B09_13_IT_PTP_POS.B09_EKPO_BUKRS AS EKPO_BUKRS
		,B09_13_IT_PTP_POS.B09_T001_BUTXT AS T001_BUTXT
		,B09_13_IT_PTP_POS.B09_ZF_EKKN_PRCTR_1ST_PROF_CENT AS ZF_EKKN_PRCTR_1ST_PROF_CENT 
		,B09_13_IT_PTP_POS.B09_ZF_CEPCT_MCTXT_1ST_PROF_CENTER_DESC AS ZF_CEPCT_MCTXT_1ST_PROF_CENTER_DESC		
		--,B09_13_IT_PTP_POS.B09_FSMC_NAME AS FSMC_NAME
		--,B09_13_IT_PTP_POS.B09_FSMC_CNTRY_CODE AS FSMC_CNTRY_CODE
		--,B09_13_IT_PTP_POS.B09_FSMC_REGION AS FSMC_REGION
		--,B09_13_IT_PTP_POS.B09_FSMC_CONTROLLING_AREA AS FSMC_CONTROLLING_AREA
		--,B09_13_IT_PTP_POS.B09_FSMC_COMPANY_CODE AS FSMC_COMPANY_CODE
		,B09_13_IT_PTP_POS.B09_EKKO_EBELN AS EKKO_EBELN			
		,B09_13_IT_PTP_POS.B09_EKPO_EBELP AS EKPO_EBELP
		-- Logic for the following case updated by CW, as previous logic contained redundant conditions
		,CASE 
			WHEN ISNULL(A_EKBE.EKBE_VGABE,'') IN ('1','2','3','4') THEN A_EKBE.EKBE_BELNR
			ELSE 'No GR or IR associated'
		END							AS ZF_EKBE_BELNR_GR_IR_FOUND
		,A_EKBE.EKBE_ZEKKN
		,A_EKBE.EKBE_BELNR
		,A_EKBE.EKBE_BUZEI			
		,B09_13_IT_PTP_POS.B09_EKKO_AEDAT AS EKKO_AEDAT
		,A_EKBE.EKBE_GJAHR			
		,A_EKBE.EKBE_CPUDT
		,A_EKBE.EKBE_BUDAT
		,A_EKBE.EKBE_BLDAT
		,A_EKBE.EKBE_ERNAM
        ,A_EKBE.EKBE_BEWTP
        ,A_T163C.T163C_BEWTL
        ,A_T163C.T163C_BEWTK
		,B09_13_IT_PTP_POS.B09_ZF_V_USERNAME_NAME_TEXT AS ZF_V_USERNAME_NAME_TEXT
		,B09_13_IT_PTP_POS.B09_USR02_USTYP AS USR02_USTYP
		,B09_13_IT_PTP_POS.B09_ZF_USR02_USTYP_DESC AS ZF_USR02_USTYP_DESC
		,A_EKBE.EKBE_MENGE			
		,CASE 
			WHEN A_EKBE.EKBE_SHKZG='S' THEN 'Debit'
			WHEN A_EKBE.EKBE_SHKZG='H' THEN 'Credit' 
		END							AS 	ZF_EKBE_SHKZG_DESC
		,B09_13_IT_PTP_POS.B09_EKKO_WAERS AS EKKO_WAERS
		,A_EKBE.EKBE_WAERS			
		,CONVERT(money,A_EKBE.EKBE_WRBTR * (CASE WHEN (A_EKBE.EKBE_SHKZG = 'S') THEN 1 ELSE -1 END) * COALESCE(TCURX_DOC.TCURX_Factor,1)) AS ZF_EKBE_WRBTR_S
		,A_T001.T001_WAERS
		,CONVERT(money,A_EKBE.EKBE_DMBTR * (CASE WHEN (A_EKBE.EKBE_SHKZG = 'S') THEN 1 ELSE -1 END) * COALESCE(TCURX_CC.TCURX_Factor,1)) AS ZF_EKBE_DMBTR_S
        ,CONVERT(money,A_EKBE.EKBE_AREWR * (CASE WHEN (A_EKBE.EKBE_SHKZG = 'S') THEN 1 ELSE -1 END) * COALESCE(TCURX_CC.TCURX_Factor,1)) AS ZF_EKBE_AREWR_S
		,@currency					AS AM_GLOBALS_CURRENCY
       ,CONVERT(money,A_EKBE.EKBE_DMBTR * (CASE WHEN (A_EKBE.EKBE_SHKZG = 'S') THEN 1 ELSE -1 END) * COALESCE(TCURX_CC.TCURX_Factor,1) * COALESCE(CAST(TCURR_CUC.TCURR_UKURS AS FLOAT),1) * COALESCE(TCURF_CUC.TCURF_TFACT,1) / COALESCE(TCURF_CUC.TCURF_FFACT,1)) AS ZF_EKBE_DMBTR_S_CUC
        ,CONVERT(money,A_EKBE.EKBE_AREWR * (CASE WHEN (A_EKBE.EKBE_SHKZG = 'S') THEN 1 ELSE -1 END) * COALESCE(TCURX_CC.TCURX_Factor,1) * COALESCE(CAST(TCURR_CUC.TCURR_UKURS AS FLOAT),1) * COALESCE(TCURF_CUC.TCURF_TFACT,1) / COALESCE(TCURF_CUC.TCURF_FFACT,1)) AS ZF_EKBE_AREWR_S_CUC
		,CONVERT(money,A_EKBE.EKBE_DMBTR * (CASE WHEN (A_EKBE.EKBE_SHKZG = 'S') THEN 1 ELSE -1 END) * COALESCE(TCURX_CC.TCURX_Factor,1) * COALESCE(CAST(TCURR_CUC.TCURR_UKURS AS FLOAT),1) * COALESCE(TCURF_CUC.TCURF_TFACT,1) / COALESCE(TCURF_CUC.TCURF_FFACT,1)) AS ZF_EKBE_WBRTR_S_CUC
        
		
		,B09_13_IT_PTP_POS.B09_EKPO_PSTYP AS EKPO_PSTYP
		,B09_13_IT_PTP_POS.B09_T163Y_PTEXT AS T163Y_PTEXT
		,B09_13_IT_PTP_POS.B09_EKPO_RETPO AS EKPO_RETPO	
		,B09_13_IT_PTP_POS.B09_ZF_EKKO_AEDAT_CREATED_IN_PER AS ZF_EKKO_AEDAT_CREATED_IN_PER
		,B09_13_IT_PTP_POS.B09_ZF_EKKO_BSTYP_LOEKZ_DESC AS ZF_EKKO_BSTYP_LOEKZ_DESC				
		,A_EKBE.EKBE_VGABE
		,CASE 
			WHEN A_EKBE.EKBE_VGABE='1' THEN 'Goods receipt' 
			WHEN A_EKBE.EKBE_VGABE IN ('2','3','4') THEN 'Invoice' 
		END							AS ZF_EKBE_VGABE_DESC
		,CASE 
			WHEN A_EKBE.EKBE_BUDAT >= @date1 AND  A_EKBE.EKBE_BUDAT <= @date2 THEN 'X'
			ELSE '' 
		END							AS ZF_EKBE_BUDAT_POSTED_IN_PER
		,DATEDIFF(D,B09_13_IT_PTP_POS.B09_EKKO_AEDAT,A_EKBE.EKBE_CPUDT) AS ZF_EKKO_AEDAT_CPUDT_DIFF
		,B09_13_IT_PTP_POS.B09_ZF_EKKO_AEDAT_PRIOR_1ST_GR_DATE AS ZF_EKKO_AEDAT_PRIOR_1ST_GR_DATE
		,B09_13_IT_PTP_POS.B09_ZF_EKKO_AEDAT_PRIOR_1ST_INV_DATE AS ZF_EKKO_AEDAT_PRIOR_1ST_INV_DATE
	   
		INTO B10_01_TT_PTP_PO_HISTORY
		FROM B09_13_IT_PTP_POS
			
		-- Add PO history information to POs
		LEFT JOIN A_EKBE  
		ON B09_13_IT_PTP_POS.B09_EKKO_EBELN = A_EKBE.EKBE_EBELN AND
		   B09_13_IT_PTP_POS.B09_EKPO_EBELP= A_EKBE.EKBE_EBELP
			
		-- Add company code currency
		LEFT JOIN A_T001
		ON  B09_13_IT_PTP_POS.B09_EKPO_BUKRS = A_T001.T001_BUKRS
			
	
			-- Add currency factor for house currency
		LEFT JOIN B00_TCURX TCURX_CC 
		ON 
	       A_T001.T001_WAERS = TCURX_CC.TCURX_CURRKEY 

				-- Add currency factor for document currency
		LEFT JOIN B00_TCURX TCURX_DOC
		ON 
		   A_EKBE.EKBE_WAERS = TCURX_DOC.TCURX_CURRKEY
		   -- Add currency factor from company currency to USD

		LEFT JOIN B00_IT_TCURF TCURF_CUC
		ON A_T001.T001_WAERS = TCURF_CUC.TCURF_FCURR
		AND TCURF_CUC.TCURF_TCURR  = @currency  
		AND TCURF_CUC.TCURF_GDATU = (
			SELECT TOP 1 B00_IT_TCURF.TCURF_GDATU
			FROM B00_IT_TCURF
			WHERE A_T001.T001_WAERS = B00_IT_TCURF.TCURF_FCURR AND 
					B00_IT_TCURF.TCURF_TCURR  = @currency  AND
					B00_IT_TCURF.TCURF_GDATU <= EKBE_BUDAT
			ORDER BY B00_IT_TCURF.TCURF_GDATU DESC
			)
		-- Add exchange rate from company currency to USD
		LEFT JOIN B00_IT_TCURR TCURR_CUC
			ON A_T001.T001_WAERS = TCURR_CUC.TCURR_FCURR
			AND TCURR_CUC.TCURR_TCURR  = @currency  
			AND TCURR_CUC.TCURR_GDATU = (
				SELECT TOP 1 B00_IT_TCURR.TCURR_GDATU
				FROM B00_IT_TCURR
				WHERE A_T001.T001_WAERS = B00_IT_TCURR.TCURR_FCURR AND 
						B00_IT_TCURR.TCURR_TCURR  = @currency  AND
						B00_IT_TCURR.TCURR_GDATU <= EKBE_BUDAT
				ORDER BY B00_IT_TCURR.TCURR_GDATU DESC
				) 


        -- Add PO history category desc
        LEFT JOIN A_T163C
        ON A_EKBE.EKBE_BEWTP = A_T163C.T163C_BEWTP

        --- Obtain lines from PO history table that are for goods receipts or invoices
		--- Filter on lines that are created in the period
		--- Filter on flag for the purchase order returns an item
		--- Filter on flag for item category is 7
		SELECT * 		
		INTO B10_02_IT_PTP_PO_HISTORY	
		FROM B10_01_TT_PTP_PO_HISTORY
		WHERE   EKBE_VGABE IN ('1','2','3','4') 
		AND 	ZF_EKKO_AEDAT_CREATED_IN_PER	= 'x'
		AND		ZF_EKKO_BSTYP_LOEKZ_DESC	= 'Regular'
		AND		EKPO_RETPO					<> 'X'
		AND		EKPO_PSTYP					<> '7'



/*Rename fields for Qlik*/

EXEC sp_RENAME_FIELD 'B10_', 'B10_02_IT_PTP_PO_HISTORY'
EXEC SP_REMOVE_TABLES '%_TT_%'

/* log cube creation*/

INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Cube completed','B10_02_IT_PTP_PO_HISTORY',(SELECT COUNT(*) FROM B10_02_IT_PTP_PO_HISTORY) 


/* log end of procedure*/


INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(date,GETDATE()),CONVERT(time,GETDATE()),'Procedure finished',NULL,NULL
GO
