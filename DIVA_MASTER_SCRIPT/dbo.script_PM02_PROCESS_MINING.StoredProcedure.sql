USE [DIVA_MASTER_SCRIPT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Khoi
-- Create date: <Create Date,,>
-- Description:	Process mining test
--Crete PM cube from Global cube which was create for Process mining
-- =============================================
CREATE   PROCEDURE [dbo].[script_PM02_PROCESS_MINING]


AS
--DYNAMIC_SCRIPT_START
/* Initiate the log */  
--Create database log table if it does not exist
IF OBJECT_ID('_DatabaseLogTable', 'U') IS NULL BEGIN CREATE TABLE [dbo].[_DatabaseLogTable] ([Database] nvarchar(max) NULL,[Object] nvarchar(max) NULL,[Object Type] nvarchar(max) NULL,[User] nvarchar(max) NULL,[Date] date NULL,[Time] time NULL,[Description] nvarchar(max) NULL,[Table] nvarchar(max),[Rows] int) END

--Log start of procedure
INSERT INTO [dbo].[_DatabaseLogTable] ([Database],[Object],[Object Type],[User],[Date],[Time],[Description],[Table],[Rows])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(date,GETDATE()),CONVERT(time,GETDATE()),'Procedure started',NULL,NULL

/* Initialize parameters from globals table */

     DECLARE 	 
			 @currency nvarchar(max)			= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'currency')
			,@date1 nvarchar(max)				= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'date1')
			,@date2 nvarchar(max)				= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'date2')
			,@downloaddate nvarchar(max)		= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'downloaddate')
			,@exchangeratetype nvarchar(max)	= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'exchangeratetype')
			,@language1 nvarchar(max)			= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'language1')
			,@language2 nvarchar(max)			= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'language2')
			,@year nvarchar(max)				= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'year')
			,@id nvarchar(max)					= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'id')
			,@ZV_LIMIT nvarchar(max)		    = (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'ZV_LIMIT')
			,@errormsg NVARCHAR(MAX)
			
DECLARE @dateformat varchar(3)
SET @dateformat   = (SELECT dbo.get_param('dateformat'))
SET DATEFORMAT @dateformat;

BEGIN

--Step 1 Convert the horizontal table to vertical table , Remove the null values (Because some paths don't have all the nodes)
EXEC SP_REMOVE_TABLES PM_02_TT_GLOBAL_VERTICAL

SELECT  PM_01_ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		PM_01_ZF_EBAN_BANFN_BNFPO AS ZF_DOCUMENT_NUMBER,
		PM_01_EBAN_BADAT AS  'ZF_DATE_USED_IN_MODEL',
		'1_PURCHASE_REQUEST' AS ZF_CONCECPT_NAME,
		1 AS ZF_STAGE,
		PM_01_ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG  ,
		PM_01_ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		PM_01_ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		PM_01_ZF_PO_HAS_PRICE_CHANGE AS ZF_PO_HAS_PRICE_CHANGE,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_COC,
		PM_01_EBAN_ERNAM AS ZF_USER,
		PM_01_V_USERNAME_NAME_TEXT_EBAN AS ZF_NAME_OF_USER,
		PM_01_EBAN_EKPO_BUKRS AS ZF_COMPANY_CODE,
		PM_01_EBAN_T161T_BATXT AS ZF_DOCUMENT_TYPE
INTO PM_02_TT_GLOBAL_VERTICAL
FROM PM_01_IT_GLOBAL_TABLE 
WHERE PM_01_EBAN_BADAT IS NOT NULL 
UNION 
SELECT  PM_01_ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		PM_01_ZF_EKPO_EBELN_EBELP AS ZF_DOCUMENT_NUMBER,
		PM_01_EKKO_AEDAT AS  'ZF_DATE_USED_IN_MODEL',
		'2_PURCHASE_ORDER' AS ZF_CONCECPT_NAME,
		2 AS ZF_STAGE,
		PM_01_ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		PM_01_ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		PM_01_ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		PM_01_ZF_PO_HAS_PRICE_CHANGE AS ZF_PO_HAS_PRICE_CHANGE,
		PM_01_ZF_EKPO_NETWR_CUC AS ZF_AMOUNT_CUC,
		PM_01_ZF_EKPO_NETWR_COC AS ZF_AMOUNT_COC,
		PM_01_EKKO_ERNAM AS ZF_USER,
		PM_01_ZF_V_USERNAME_NAME_TEXT_EKKO AS ZF_NAME_OF_USER,
		PM_01_EKPO_BUKRS AS ZF_COMPANY_CODE,
		PM_01_ZF_PO_CATEGORY AS ZF_DOCUMENT_TYPE
FROM PM_01_IT_GLOBAL_TABLE
WHERE PM_01_EKKO_AEDAT IS NOT NULL
UNION
SELECT  PM_01_ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		PM_01_ZF_MSEG_EBELN_EBELP_BUKRS AS ZF_DOCUMENT_NUMBER,
		PM_01_MKPF_BLDAT AS  'ZF_DATE_USED_IN_MODEL',
		'7_GOOD_RECEIPT' AS ZF_CONCECPT_NAME,
		7 AS ZF_STAGE,
		PM_01_ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		PM_01_ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		PM_01_ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		PM_01_ZF_PO_HAS_PRICE_CHANGE AS ZF_PO_HAS_PRICE_CHANGE	,
		PM_01_ZF_MSEG_DMBTR_SIGNED_CUC AS ZF_AMOUNT_CUC,	
		PM_01_ZF_MSEG_DMBTR_SIGNED AS ZF_AMOUNT_COC,
		PM_01_MKPF_USNAM AS ZF_USER,
		PM_01_V_USERNAME_NAME_TEXT_MSEG AS ZF_NAME_OF_USER,
		PM_01_MSEG_BUKRS AS ZF_COMPANY_CODE,
		PM_01_MKPF_T003T_LTEXT AS ZF_DOCUMENT_TYPE			
FROM PM_01_IT_GLOBAL_TABLE
WHERE PM_01_MKPF_BLDAT IS NOT NULL
UNION 
SELECT  PM_01_ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		PM_01_ZF_BSAIK_BUKRS_GJAHR_BELNR_BUZEI AS ZF_DOCUMENT_NUMBER,
		PM_01_BSAIK_BLDAT_INV AS  'ZF_DATE_USED_IN_MODEL',
		'8_INVOICE_RECEIPT' AS ZF_CONCECPT_NAME,
		8 AS ZF_STAGE,
		PM_01_ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		PM_01_ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		PM_01_ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		PM_01_ZF_PO_HAS_PRICE_CHANGE AS ZF_PO_HAS_PRICE_CHANGE,
		PM_01_ZF_BSAIK_DMBTR_S_CUC_INV AS ZF_AMOUNT_CUC,
		PM_01_ZF_BSAIK_DMBTR_S_INV AS ZF_AMOUNT_COC,
		PM_01_BKPF_USNAM_INV AS ZF_USER,
		PM_01_V_USERNAME_NAME_TEXT_INV AS ZF_NAME_OF_USER,
		PM_01_BSAIK_BUKRS_INV AS ZF_COMPANY_CODE,
		PM_01_B11B_SS02_T003T_LTEXT_INV AS ZF_DOCUMENT_TYPE		
FROM PM_01_IT_GLOBAL_TABLE
WHERE PM_01_BSAIK_BLDAT_INV IS NOT NULL
UNION 
SELECT  PM_01_ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		PM_01_ZF_BSAIK_BUKRS_GJAHR_BELNR_BUZEI_PAY AS ZF_DOCUMENT_NUMBER,
		PM_01_BSAIK_BLDAT_PAY AS  'ZF_DATE_USED_IN_MODEL',
		'17_PAYMENT' AS ZF_CONCECPT_NAME,
		17 AS ZF_STAGE,
		PM_01_ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		PM_01_ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		PM_01_ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		PM_01_ZF_PO_HAS_PRICE_CHANGE AS ZF_PO_HAS_PRICE_CHANGE,
		PM_01_ZF_BSAIK_DMBTR_S_CUC_PAY AS ZF_AMOUNT_CUC,
		PM_01_ZF_BSAIK_DMBTR_S_PAY AS ZF_AMOUNT_COC,
		PM_01_BKPF_USNAM_PAY AS ZF_USER,
		PM_01_V_USERNAME_NAME_TEXT_PAY AS ZF_NAME_OF_USER,
		PM_01_BSAIK_BUKRS_PAY AS ZF_COMPANY_CODE,
		PM_01_B11B_SS02_T003T_LTEXT_PAY AS ZF_DOCUMENT_TYPE		
FROM PM_01_IT_GLOBAL_TABLE
WHERE PM_01_BSAIK_BLDAT_PAY IS NOT NULL
UNION 
SELECT  PM_01_ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		PM_01_ZF_PO_APPR_KEY AS ZF_DOCUMENT_NUMBER,
		PM_01_ZF_PO_APPR_DATE AS  'ZF_DATE_USED_IN_MODEL',
		'4_PO_APPROVALS' AS ZF_CONCECPT_NAME,
		4 AS ZF_STAGE,
		PM_01_ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		PM_01_ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		PM_01_ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		PM_01_ZF_PO_HAS_PRICE_CHANGE AS ZF_PO_HAS_PRICE_CHANGE,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_COC,
		PM_01_ZF_PO_APPR_USER AS ZF_USER,
		PM_01_ZF_PO_APPR_USERNAME AS ZF_NAME_OF_USER,
		PM_01_ZF_PO_APPR_COMPANY_CODE AS ZF_COMPANY_CODE,
		''
FROM PM_01_IT_GLOBAL_TABLE
WHERE PM_01_ZF_PO_APPR_DATE IS NOT NULL
UNION 
SELECT  PM_01_ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		PM_01_ZF_PO_PRICE_KEY AS ZF_DOCUMENT_NUMBER,
		PM_01_ZF_PO_PRICE_DATE AS  'ZF_DATE_USED_IN_MODEL',
		'6_PO_PRICE_CHANGE' AS ZF_CONCECPT_NAME,
		6 AS ZF_STAGE,
		PM_01_ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		PM_01_ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		PM_01_ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		PM_01_ZF_PO_HAS_PRICE_CHANGE AS ZF_PO_HAS_PRICE_CHANGE,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_COC,
		PM_01_ZF_PO_PRICE_USER AS ZF_USER,
		PM_01_ZF_PO_PRICE_USERNAME AS ZF_NAME_OF_USER,
		PM_01_ZF_PO_PRICE_COMPANY_CODE AS ZF_COMPANY_CODE,
		''
FROM PM_01_IT_GLOBAL_TABLE
WHERE PM_01_ZF_PO_PRICE_DATE IS NOT NULL
UNION 
SELECT  PM_01_ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		PM_01_ZF_PO_AMOUNT_KEY AS ZF_DOCUMENT_NUMBER,
		PM_01_ZF_PO_AMOUNT_DATE AS  'ZF_DATE_USED_IN_MODEL',
		'5_CHANGE_TO_PO_AMOUNT' AS ZF_CONCECPT_NAME,
		5 AS ZF_STAGE,
		PM_01_ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		PM_01_ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		PM_01_ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		PM_01_ZF_PO_HAS_PRICE_CHANGE AS ZF_PO_HAS_PRICE_CHANGE,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_COC,
		PM_01_ZF_PO_AMOUNT_USER AS ZF_USER,
		PM_01_ZF_PO_AMOUNT_USERNAME AS ZF_NAME_OF_USER,
		PM_01_ZF_PO_AMOUNT_COMPANY_CODE AS ZF_COMPANY_CODE,
		''
FROM PM_01_IT_GLOBAL_TABLE
WHERE  PM_01_ZF_PO_AMOUNT_DATE IS NOT NULL
UNION 
SELECT  PM_01_ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		PM_01_ZF_INV_VALUE_KEY AS ZF_DOCUMENT_NUMBER,
		PM_01_ZF_INV_VALUE_DATE AS  'ZF_DATE_USED_IN_MODEL',
		'9_CHANGE_TO_INVOICE_VALUE' AS ZF_CONCECPT_NAME,
		9 AS ZF_STAGE,
		PM_01_ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		PM_01_ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		PM_01_ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		PM_01_ZF_PO_HAS_PRICE_CHANGE AS ZF_PO_HAS_PRICE_CHANGE,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_COC,
		PM_01_ZF_INV_VALUE_USER AS ZF_USER,
		PM_01_ZF_INV_VALUE_USERNAME AS ZF_NAME_OF_USER,
		PM_01_ZF_INV_VALUE_COMPANY_CODE AS ZF_COMPANY_CODE,
		''
FROM PM_01_IT_GLOBAL_TABLE
WHERE PM_01_ZF_INV_VALUE_DATE IS NOT NULL
UNION 
SELECT  PM_01_ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		PM_01_ZF_RELEASE_INV_KEY AS ZF_DOCUMENT_NUMBER,
		PM_01_ZF_RELEASE_INV_DATE AS  'ZF_DATE_USED_IN_MODEL',
		'10_RELEASE_OF_INVOICE_REQUIRED' AS ZF_CONCECPT_NAME,
		10 AS ZF_STAGE,
		PM_01_ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		PM_01_ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		PM_01_ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		PM_01_ZF_PO_HAS_PRICE_CHANGE AS ZF_PO_HAS_PRICE_CHANGE,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_COC,
		PM_01_ZF_RELEASE_INV_USER AS ZF_USER,
		PM_01_ZF_RELEASE_INV_USERNAME AS ZF_NAME_OF_USER,
		PM_01_ZF_RELEASE_INV_COMPANY_CODE AS ZF_COMPANY_CODE,
		''
FROM PM_01_IT_GLOBAL_TABLE
WHERE PM_01_ZF_RELEASE_INV_DATE IS NOT NULL
UNION 
SELECT  PM_01_ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		PM_01_ZF_SUPP_BLOCK_KEY AS ZF_DOCUMENT_NUMBER,
		PM_01_ZF_SUPP_BLOCK_DATE AS  'ZF_DATE_USED_IN_MODEL',
		'11_SUPPLIER_IS_BLOCKED' AS ZF_CONCECPT_NAME,
		11 AS ZF_STAGE,
		PM_01_ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		PM_01_ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		PM_01_ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		PM_01_ZF_PO_HAS_PRICE_CHANGE AS ZF_PO_HAS_PRICE_CHANGE,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_COC,
		PM_01_ZF_SUPP_BLOCK_USER AS ZF_USER,
		PM_01_ZF_SUPP_BLOCK_USERNAME AS ZF_NAME_OF_USER,
		PM_01_ZF_SUPP_BLOCK_COMPANY_CODE AS ZF_COMPANY_CODE,
		''
FROM PM_01_IT_GLOBAL_TABLE
WHERE PM_01_ZF_SUPP_BLOCK_DATE IS NOT NULL
UNION 
SELECT  PM_01_ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		PM_01_ZF_SUPP_PAY_TERMS_KEY AS ZF_DOCUMENT_NUMBER,
		PM_01_ZF_SUPP_PAY_TERMS_DATE AS  'ZF_DATE_USED_IN_MODEL',
		'12_SUPPLIER_PAYMENT_TERMS' AS ZF_CONCECPT_NAME,
		12 AS ZF_STAGE,
		PM_01_ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		PM_01_ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		PM_01_ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		PM_01_ZF_PO_HAS_PRICE_CHANGE AS ZF_PO_HAS_PRICE_CHANGE,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_COC,
		PM_01_ZF_SUPP_PAY_TERMS_USER AS ZF_USER,
		PM_01_ZF_SUPP_PAY_TERMS_USERNAME AS ZF_NAME_OF_USER,
		PM_01_ZF_SUPP_PAY_TERMS_COMPANY_CODE AS ZF_COMPANY_CODE,
		''
FROM PM_01_IT_GLOBAL_TABLE
WHERE PM_01_ZF_SUPP_PAY_TERMS_DATE IS NOT NULL
UNION 
SELECT  PM_01_ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		PM_01_ZF_PAY_METHOD_KEY AS ZF_DOCUMENT_NUMBER,
		PM_01_ZF_PAY_METHOD_DATE AS  'ZF_DATE_USED_IN_MODEL',
		'13_CHANGE_TO_PAYMENT_METHOD' AS ZF_CONCECPT_NAME,
		13 AS ZF_STAGE,
		PM_01_ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		PM_01_ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		PM_01_ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		PM_01_ZF_PO_HAS_PRICE_CHANGE AS ZF_PO_HAS_PRICE_CHANGE,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_COC,
		PM_01_ZF_PAY_METHOD_USER AS ZF_USER,
		PM_01_ZF_PAY_METHOD_USERNAME AS ZF_NAME_OF_USER,
		PM_01_ZF_PAY_METHOD_COMPANY_CODE AS ZF_COMPANY_CODE,
		''
FROM PM_01_IT_GLOBAL_TABLE
WHERE PM_01_ZF_PAY_METHOD_DATE IS NOT NULL
UNION 
SELECT  PM_01_ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		PM_01_ZF_PAY_BLOCK_KEY AS ZF_DOCUMENT_NUMBER,
		PM_01_ZF_PAY_BLOCK_DATE AS  'ZF_DATE_USED_IN_MODEL',
		'14_CHANGE_TO_PAYMENT_BLOCK' AS ZF_CONCECPT_NAME,
		14 AS ZF_STAGE,
		PM_01_ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		PM_01_ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		PM_01_ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		PM_01_ZF_PO_HAS_PRICE_CHANGE AS ZF_PO_HAS_PRICE_CHANGE,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_COC,
		PM_01_ZF_PAY_BLOCK_USER AS ZF_USER,
		PM_01_ZF_PAY_BLOCK_USERNAME AS ZF_NAME_OF_USER,
		PM_01_ZF_PAY_BLOCK_COMPANY_CODE AS ZF_COMPANY_CODE,
		''
FROM PM_01_IT_GLOBAL_TABLE
WHERE PM_01_ZF_PAY_BLOCK_DATE IS NOT NULL
UNION 
SELECT  PM_01_ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		PM_01_ZF_RELEASE_GROUP_KEY AS ZF_DOCUMENT_NUMBER,
		PM_01_ZF_RELEASE_GROUP_DATE AS  'ZF_DATE_USED_IN_MODEL',
		'15_CHANGE_TO_RELEASE_GROUP' AS ZF_CONCECPT_NAME,
		15 AS ZF_STAGE,
		PM_01_ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		PM_01_ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		PM_01_ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		PM_01_ZF_PO_HAS_PRICE_CHANGE AS ZF_PO_HAS_PRICE_CHANGE,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_COC,
		PM_01_ZF_RELEASE_GROUP_USER AS ZF_USER,
		PM_01_ZF_RELEASE_GROUP_USERNAME AS ZF_NAME_OF_USER,
		PM_01_ZF_RELEASE_GROUP_COMPANY_CODE AS ZF_COMPANY_CODE,
		''
FROM PM_01_IT_GLOBAL_TABLE
WHERE PM_01_ZF_RELEASE_GROUP_DATE IS NOT NULL
UNION 
SELECT  PM_01_ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		PM_01_ZF_RELEASE_STRATEGY_KEY AS ZF_DOCUMENT_NUMBER,
		PM_01_ZF_RELEASE_STRATEGY_DATE AS  'ZF_DATE_USED_IN_MODEL',
		'16_CHANGE_TO_RELEASE_STRATEGY' AS ZF_CONCECPT_NAME,
		16 AS ZF_STAGE,
		PM_01_ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		PM_01_ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		PM_01_ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		PM_01_ZF_PO_HAS_PRICE_CHANGE AS ZF_PO_HAS_PRICE_CHANGE,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_COC,
		PM_01_ZF_RELEASE_STRATEGY_USER AS ZF_USER,
		PM_01_ZF_RELEASE_STRATEGY_USERNAME AS ZF_NAME_OF_USER,
		PM_01_ZF_RELEASE_STRATEGY_COMPANY_CODE AS ZF_COMPANY_CODE,
		''
FROM PM_01_IT_GLOBAL_TABLE
WHERE PM_01_ZF_RELEASE_STRATEGY_DATE IS NOT NULL
UNION
SELECT  PM_01_ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		PM_01_ZF_IBAN_CHANGE_KEY AS ZF_DOCUMENT_NUMBER,
		PM_01_ZF_IBAN_CHANGE_DATE AS  'ZF_DATE_USED_IN_MODEL',
		'3_CHANGE_TO_IBAN' AS ZF_CONCECPT_NAME,
		3 AS ZF_STAGE,
		PM_01_ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		PM_01_ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		PM_01_ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		PM_01_ZF_PO_HAS_PRICE_CHANGE AS ZF_PO_HAS_PRICE_CHANGE,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_COC,
		PM_01_ZF_IBAN_CHANGE_USER AS ZF_USER,
		PM_01_ZF_IBAN_CHANGE_USERNAME AS ZF_NAME_OF_USER,
		PM_01_ZF_IBAN_CHANGE_COMPANY_CODE AS ZF_COMPANY_CODE,
		''
FROM PM_01_IT_GLOBAL_TABLE
WHERE PM_01_ZF_IBAN_CHANGE_DATE IS NOT NULL
UNION
SELECT  PM_01_ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		PM_01_ZF_FI_INVOICE_VALUE_KEY AS ZF_DOCUMENT_NUMBER,
		PM_01_ZF_FI_INVOICE_VALUE_DATE AS  'ZF_DATE_USED_IN_MODEL',
		'9_CHANGE_TO_FI_INVOICE_VALUE' AS ZF_CONCECPT_NAME,
		3 AS ZF_STAGE,
		PM_01_ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		PM_01_ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		PM_01_ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		PM_01_ZF_PO_HAS_PRICE_CHANGE AS ZF_PO_HAS_PRICE_CHANGE,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_COC,
		PM_01_ZF_FI_INVOICE_VALUE_USER AS ZF_USER,
		PM_01_ZF_FI_INVOICE_VALUE_USERNAME AS ZF_NAME_OF_USER,
		PM_01_ZF_FI_INVOICE_VALUE_COMPANY_CODE AS ZF_COMPANY_CODE,
		''
FROM PM_01_IT_GLOBAL_TABLE
WHERE PM_01_ZF_FI_INVOICE_VALUE_DATE IS NOT NULL

--Step 2 Sorting the the table base on the document_flow_key, dates, and stage

	EXEC SP_DROPTABLE PM_03_TT_GLOBAL_VERTICAL_SORT
	SELECT  ROW_NUMBER() OVER (ORDER BY ZF_DOCUMENT_FLOW_KEY, ZF_DATE_USED_IN_MODEL, ZF_STAGE) AS ZF_ROW_ID,
	* INTO PM_03_TT_GLOBAL_VERTICAL_SORT FROM PM_02_TT_GLOBAL_VERTICAL
	ORDER BY ZF_DOCUMENT_FLOW_KEY, ZF_DATE_USED_IN_MODEL, ZF_STAGE

	CREATE CLUSTERED INDEX PM_03_TT_GLOBAL_VERTICAL_INDEX 
	ON PM_03_TT_GLOBAL_VERTICAL_SORT(ZF_DOCUMENT_FLOW_KEY, ZF_DATE_USED_IN_MODEL, ZF_STAGE)


--Step 3 Create the data model table, base on the script from Hung
--Get the document_flow_key, Node_from, Node_to, path description, product_flag, po_flag
--The path description is created base on the DOCUMENT_FLOW_KEY
--Join PM_02_TT_GLOBAL_VERTICAL to itself, base on the DOCUMENT_FLOW_KEY, then create a string by using XML

--To get the NODE_TO, Join PM_02_TT_GLOBAL_VERTICAL to itself,base on the DOCUMENT_FLOW_KEY
--Then Get the first line, where A.ROW_ID < C.ROW_ID and A.CONCECPT_NAME <> C.CONCECPT_NAME


EXEC SP_DROPTABLE PM_04_TT_NODE_FROM_TO

SELECT  A.ZF_DOCUMENT_FLOW_KEY,
		A.ZF_DATE_USED_IN_MODEL,
		B.ZF_DATE_USED_IN_MODEL AS ZF_DATE_USED_IN_MODEL_TO,
		A.ZF_DOCUMENT_NUMBER, 
		A.ZF_CONCECPT_NAME as ZF_NODE_FROM,
		B.ZF_CONCECPT_NAME AS ZF_NODE_TO,
		STUFF((SELECT '->' + E.ZF_CONCECPT_NAME 
							 FROM PM_03_TT_GLOBAL_VERTICAL_SORT AS E
							 WHERE E.ZF_DOCUMENT_FLOW_KEY = A.ZF_DOCUMENT_FLOW_KEY 
							 FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')
							 ,1,2,'') AS ZF_PATH_DESC,
		A.ZF_PRODUCT_FLAG,
		A.ZF_PAYMENT_HAS_PO_FLAG,
		A.ZF_INVOICE_HAS_PO_FLAG,
		A.ZF_PO_HAS_PRICE_CHANGE,
		A.ZF_USER AS ZF_INTEGER_FOR_USER ,
		A.ZF_NAME_OF_USER,
		A.ZF_AMOUNT_COC,
		A.ZF_AMOUNT_CUC,
		A.ZF_COMPANY_CODE,
		A.ZF_DOCUMENT_TYPE,
		ROW_NUMBER() OVER (PARTITION BY A.ZF_DOCUMENT_FLOW_KEY ORDER BY A.ZF_DOCUMENT_FLOW_KEY) AS ZF_STAGE
INTO PM_04_TT_NODE_FROM_TO 
FROM PM_03_TT_GLOBAL_VERTICAL_SORT AS A 
OUTER APPLY (
		SELECT TOP 1 * 
		FROM PM_03_TT_GLOBAL_VERTICAL_SORT AS C 
		WHERE A.ZF_DOCUMENT_FLOW_KEY = C.ZF_DOCUMENT_FLOW_KEY AND
			  A.ZF_ROW_ID < C.ZF_ROW_ID AND 
			  A.ZF_CONCECPT_NAME <> C.ZF_CONCECPT_NAME) AS B

--Step 33.3 Replace the NULL value in NODE_TO with 'END'

UPDATE PM_04_TT_NODE_FROM_TO
SET ZF_NODE_TO='18_END'
WHERE ZF_NODE_TO IS NULL

UPDATE PM_04_TT_NODE_FROM_TO
SET ZF_DATE_USED_IN_MODEL_TO=ZF_DATE_USED_IN_MODEL
WHERE ZF_DATE_USED_IN_MODEL_TO IS NULL

--Step 3.4 Create the Start Node, by getting the first date of each flow, then add them back to the data model

--Sorting the table base on document flow key, and date
--CREATE CLUSTERED INDEX PM_02_TT_PROCESS_MINING ON PM_03_TT_NODE_FROM_TO(ZF_DOCUMENT_FLOW_KEY, ZF_DATE_USED_IN_MODEL,ZF_STAGE)

EXEC SP_DROPTABLE PM_05_TT_NODE_FROM_TO_SORT
SELECT * INTO PM_05_TT_NODE_FROM_TO_SORT FROM PM_04_TT_NODE_FROM_TO
ORDER BY ZF_DOCUMENT_FLOW_KEY, ZF_DATE_USED_IN_MODEL,ZF_STAGE

CREATE CLUSTERED INDEX PM_05_TT_PROCESS_MINING ON PM_05_TT_NODE_FROM_TO_SORT(ZF_DOCUMENT_FLOW_KEY, ZF_DATE_USED_IN_MODEL,ZF_STAGE)

--Create Start node

EXEC SP_DROPTABLE PM_06_TT_ADD_START_NODE

SELECT * 
INTO PM_06_TT_ADD_START_NODE
FROM PM_05_TT_NODE_FROM_TO_SORT
UNION ALL 
SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,
				C.ZF_DATE_USED_IN_MODEL,
				C.ZF_DATE_USED_IN_MODEL AS ZF_DATE_USED_IN_MODEL_TO,
				C.ZF_DOCUMENT_NUMBER,
				'0_START' AS 'ZF_NODE_FROM' ,
				C.ZF_NODE_FROM AS 'ZF_NODE_TO',
				C.ZF_PATH_DESC,
				C.ZF_PRODUCT_FLAG,
				C.ZF_PAYMENT_HAS_PO_FLAG,
				C.ZF_INVOICE_HAS_PO_FLAG,
				C.ZF_PO_HAS_PRICE_CHANGE,
				'START' AS 'ZF_INTEGER_FOR_USER',
				'0_START' AS ZF_NAME_OF_USER,
				C.ZF_AMOUNT_COC,
				C.ZF_AMOUNT_CUC,
				C.ZF_COMPANY_CODE,
				C.ZF_DOCUMENT_TYPE,
				C.ZF_STAGE
FROM PM_05_TT_NODE_FROM_TO_SORT AS A
OUTER APPLY(
			SELECT TOP 1 * FROM PM_05_TT_NODE_FROM_TO_SORT AS B 
			WHERE A.ZF_DOCUMENT_FLOW_KEY= B.ZF_DOCUMENT_FLOW_KEY  ) AS C

			
-- Step 4. Add list of node into QLIK, This list will be used for the Node filter.


EXEC SP_DROPTABLE 'PM_07_RT_NODE_LIST'
SELECT *  
INTO PM_07_RT_NODE_LIST FROM
(
SELECT DISTINCT ZF_PATH_DESC, ZF_NODE_FROM as 'ZF_NODE' FROM PM_06_TT_ADD_START_NODE
UNION 
SELECT DISTINCT ZF_PATH_DESC, ZF_NODE_TO as 'ZF_NODE' FROM PM_06_TT_ADD_START_NODE 
) AS A
WHERE A.ZF_NODE <> '0_START' AND A.ZF_NODE <> '18_END'


-- Step 5. Create a flag for paths which only have 1 Node.(Example: 0_START --> 2_PURCHASE_ORDER --> 18_END)
--Step 5.a
--Create a temporary table to get list of paths and number of rows for each path. For each Path_Description, if it has only 2 rows, it means the path only has 1 nodes
-- Example
--		PATH_DESC				NODE_FROM				NODE_TO
--		2_PURCHASE_ORDER		0_START					2_PURCHASE_ORDER
--		2_PURCHASE_ORDER		2_PURCHASE_ORDER		18_END
EXEC SP_DROPTABLE 'TEMP1'
SELECT ZF_PATH_DESC ,
IIF(COUNT(DISTINCT CONCAT(ZF_NODE_FROM, ZF_NODE_TO)) = 2 ,'X', '') AS ZF_ONE_NODE_FLAG
INTO TEMP1
FROM PM_06_TT_ADD_START_NODE
GROUP BY ZF_PATH_DESC
--Step 5.b Create a list of contains the start node each ath
EXEC SP_DROPTABLE 'TEMP2'
SELECT DISTINCT ZF_PATH_DESC,ZF_NODE_TO AS ZF_START_NODE INTO TEMP2
FROM PM_06_TT_ADD_START_NODE
WHERE ZF_NODE_FROM='0_START'
--Step 5.c Create the list of path description
--Add the id for it, sort by number of flow per path desc
EXEC SP_DROPTABLE TEMP3

SELECT
IDENTITY(INT,1,1) AS ZF_PATH_NUMBER ,
ZF_PATH_DESC INTO TEMP3
FROM PM_06_TT_ADD_START_NODE
GROUP BY ZF_PATH_DESC
ORDER BY COUNT(DISTINCT ZF_DOCUMENT_FLOW_KEY) DESC


--Step 5.d Add the path id number, start node, flag for path that has only one node
EXEC SP_DROPTABLE PM_08_TT_PROCESS_MINING
SELECT DISTINCT A.*,ZF_ONE_NODE_FLAG,ZF_START_NODE,
CONCAT('#',ZF_PATH_NUMBER) AS ZF_PATH_NUMBER
INTO PM_08_TT_PROCESS_MINING FROM PM_06_TT_ADD_START_NODE AS A
LEFT JOIN TEMP1 ON A.ZF_PATH_DESC=TEMP1.ZF_PATH_DESC
LEFT JOIN TEMP2 ON A.ZF_PATH_DESC=TEMP2.ZF_PATH_DESC
LEFT JOIN TEMP3 ON A.ZF_PATH_DESC=TEMP3.ZF_PATH_DESC

--Step 5.e Add the time range, caculation base on date from and date to
EXEC SP_DROPTABLE PM_09_RT_PROCESS_MINING
SELECT A.*,
CASE 
	WHEN DATEDIFF(DAY,ZF_DATE_USED_IN_MODEL,ZF_DATE_USED_IN_MODEL_TO)=0 THEN '<=0 days'
	WHEN DATEDIFF(DAY,ZF_DATE_USED_IN_MODEL,ZF_DATE_USED_IN_MODEL_TO) BETWEEN 1 AND 30 THEN '0-30 days'
	WHEN DATEDIFF(DAY,ZF_DATE_USED_IN_MODEL,ZF_DATE_USED_IN_MODEL_TO) BETWEEN 31 AND 90 THEN '31-90 days'
	WHEN DATEDIFF(DAY,ZF_DATE_USED_IN_MODEL,ZF_DATE_USED_IN_MODEL_TO) BETWEEN 91 AND 180 THEN '91-180 days'
	WHEN DATEDIFF(DAY,ZF_DATE_USED_IN_MODEL,ZF_DATE_USED_IN_MODEL_TO) BETWEEN 181 AND 270 THEN '181-270 days'
	WHEN DATEDIFF(DAY,ZF_DATE_USED_IN_MODEL,ZF_DATE_USED_IN_MODEL_TO) BETWEEN 270 AND 365 THEN '271-365 days'
	ELSE '>365 days' END AS 'ZF_LEAD_TIME_DESC',
	ZF_LEAD_FLOW_DAY,
	ZF_LEAD_FLOW_WEEK,
	ZF_LEAD_FLOW_MONTH
INTO PM_09_RT_PROCESS_MINING
FROM PM_08_TT_PROCESS_MINING AS A
LEFT JOIN
(
SELECT ZF_DOCUMENT_FLOW_KEY,
DATEDIFF(DAY,MIN(ZF_DATE_USED_IN_MODEL),MAX(ZF_DATE_USED_IN_MODEL)) AS ZF_LEAD_FLOW_DAY,
DATEDIFF(WEEK,MIN(ZF_DATE_USED_IN_MODEL),MAX(ZF_DATE_USED_IN_MODEL)) AS ZF_LEAD_FLOW_WEEK,
DATEDIFF(MONTH,MIN(ZF_DATE_USED_IN_MODEL),MAX(ZF_DATE_USED_IN_MODEL)) AS ZF_LEAD_FLOW_MONTH
FROM PM_08_TT_PROCESS_MINING
GROUP BY ZF_DOCUMENT_FLOW_KEY
) AS B
ON A.ZF_DOCUMENT_FLOW_KEY=B.ZF_DOCUMENT_FLOW_KEY

--Step5.f Remove temporary table
EXEC SP_DROPTABLE 'TEMP1'
EXEC SP_DROPTABLE 'TEMP2'
EXEC SP_DROPTABLE 'TEMP3'

--Step 6 Create the list of document type description for Invoice and payment
--DOcument type table
EXEC SP_DROPTABLE PM_10_RT_INV_DOCUMENT_TYPE
SELECT DISTINCT PM_01_ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY ,
PM_01_B11B_SS02_T003T_LTEXT_INV AS ZF_DOCUMENT_TYPE
INTO PM_10_RT_INV_DOCUMENT_TYPE
FROM PM_01_IT_GLOBAL_TABLE
 WHERE PM_01_BSAIK_BLDAT_INV IS NOT NULL

 EXEC SP_DROPTABLE PM_11_RT_PAY_DOCUMENT_TYPE
SELECT DISTINCT PM_01_ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY ,
PM_01_B11B_SS02_T003T_LTEXT_PAY AS ZF_DOCUMENT_TYPE
INTO PM_11_RT_PAY_DOCUMENT_TYPE
FROM PM_01_IT_GLOBAL_TABLE
 WHERE PM_01_BSAIK_BLDAT_PAY IS NOT NULL

 --Step 7 Number of Step table
 --Create a list of step for each path desc, which will be use for filter
 EXEC SP_REMOVE_TABLES PM_12_RT_NUMBER_OF_STEP
SELECT DISTINCT ZF_STEP_NUMBER,ZF_PATH_DESC
INTO PM_12_RT_NUMBER_OF_STEP
FROM
(
SELECT COUNT(ZF_DOCUMENT_FLOW_KEY)-1 AS ZF_STEP_NUMBER,ZF_PATH_DESC,ZF_DOCUMENT_FLOW_KEY
FROM PM_09_RT_PROCESS_MINING
GROUP BY ZF_PATH_DESC,ZF_DOCUMENT_FLOW_KEY
) AS A

--Step 8 SOD
--Step 8.1 Remove case has "delete" and "Block" 
--PMSOD_01_TT_REM_BLOCK_DEL
EXEC SP_REMOVE_TABLES PM_13_TT_REM_BLOCK_DEL

SELECT DISTINCT * 
INTO PM_13_TT_REM_BLOCK_DEL
FROM PM_09_RT_PROCESS_MINING
WHERE ZF_DOCUMENT_FLOW_KEY NOT IN
(
SELECT DISTINCT ZF_DOCUMENT_FLOW_KEY FROM PM_09_RT_PROCESS_MINING
WHERE (ZF_PATH_DESC LIKE '%DELETE%' OR ZF_PATH_DESC LIKE '%BLOCK%' )
)
--Step 8.2 Get the case that has been "Approval", and the number of user per flow
--Remove the flow that has more than 2 user doing approval
EXEC SP_REMOVE_TABLES PM_14_TT_REMOVE_MULTI_USER

SELECT *
INTO PM_14_TT_REMOVE_MULTI_USER
FROM PM_09_RT_PROCESS_MINING
WHERE NOT EXISTS
(
	SELECT ZF_DOCUMENT_FLOW_KEY, COUNT(DISTINCT ZF_INTEGER_FOR_USER) AS ZF_NUMBER_OF_USER
	FROM PM_09_RT_PROCESS_MINING
	WHERE ZF_PATH_DESC LIKE '%APPROVAL%'
	GROUP BY ZF_DOCUMENT_FLOW_KEY
	HAVING COUNT(DISTINCT ZF_INTEGER_FOR_USER)>=2
)
-- Step 8.3 Create the SOD table which has the flow ID, user, and SOD description
--Step 8.3.1Get the list of Flow which has more than 1 activithy
EXEC SP_DROPTABLE TEMP1
SELECT ZF_DOCUMENT_FLOW_KEY,ZF_INTEGER_FOR_USER
INTO TEMP1
FROM PM_09_RT_PROCESS_MINING
WHERE ZF_NODE_FROM <>'0_START'
GROUP BY ZF_DOCUMENT_FLOW_KEY,ZF_INTEGER_FOR_USER
HAVING COUNT(DISTINCT ZF_NODE_FROM)>1

--Step 8.3.2 Add the SOD decs scription
EXEC SP_REMOVE_TABLES 'PM_15_RT_SOD_TABLE'
SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY, A.ZF_INTEGER_FOR_USER,'User who enter '+SUBSTRING(
        (
            SELECT ' and ' + 
			CASE WHEN B.ZF_NODE_FROM='1_PURCHASE_REQUEST' THEN 'Purchase request'
			WHEN B.ZF_NODE_FROM='2_PURCHASE_ORDER' then 'Purchase order'
			WHEN B.ZF_NODE_FROM='7_GOOD_RECEIPT' then 'Good receipt'
			WHEN B.ZF_NODE_FROM='8_INVOICE_RECEIPT' then 'Invoice receipt'
			WHEN B.ZF_NODE_FROM='17_PAYMENT' then 'Payment' 
			WHEN B.ZF_NODE_FROM= '4_PO_APPROVALS' then 'PO approval'
			WHEN B.ZF_NODE_FROM= '6_PO_PRICE_CHANGE' then 'PO price change'
			WHEN B.ZF_NODE_FROM= '5_CHANGE_TO_PO_AMOUNT' then 'PO amount change'
			WHEN B.ZF_NODE_FROM= '9_CHANGE_TO_INVOICE_VALUE' then 'invoice value change'
			WHEN B.ZF_NODE_FROM= '9_CHANGE_TO_FI_INVOICE_VALUE' then 'FI invoice value change'
			WHEN B.ZF_NODE_FROM= '10_RELEASE_OF_INVOICE_REQUIRED' then 'relase of invoice required'
			WHEN B.ZF_NODE_FROM= '11_SUPPLIER_IS_BLOCKED' then 'supplier is block'
			WHEN B.ZF_NODE_FROM= '12_SUPPLIER_PAYMENT_TERMS' then 'supplier payment term'
			WHEN B.ZF_NODE_FROM= '13_CHANGE_TO_PAYMENT_METHOD'then 'supplier payment method'
			WHEN B.ZF_NODE_FROM= '14_CHANGE_TO_PAYMENT_BLOCK' then 'supplier payment block change'
			WHEN B.ZF_NODE_FROM= '15_CHANGE_TO_RELEASE_GROUP' then 'supplier release group change'
			WHEN B.ZF_NODE_FROM= '16_CHANGE_TO_RELEASE_STRATEGY' then 'supplier release strategy change'
			WHEN B.ZF_NODE_FROM= '3_CHANGE_TO_IBAN' then 'IBAN change'
			END 
			AS [text()]
            FROM PM_09_RT_PROCESS_MINING AS B
            WHERE A.ZF_DOCUMENT_FLOW_KEY = B.ZF_DOCUMENT_FLOW_KEY AND A.ZF_INTEGER_FOR_USER=B.ZF_INTEGER_FOR_USER
			AND B.ZF_NODE_FROM <>'0_START'
			ORDER BY B.ZF_DOCUMENT_FLOW_KEY,B.ZF_NODE_FROM
            FOR XML PATH ('')
        ),6,1000) ZF_SOD_DESC
		INTO PM_15_RT_SOD_TABLE
FROM TEMP1 AS A

--Remove all temporary table 
EXEC SP_REMOVE_TABLES 'TEMP%'
EXEC SP_REMOVE_TABLES '%_TT_%'
END



GO
