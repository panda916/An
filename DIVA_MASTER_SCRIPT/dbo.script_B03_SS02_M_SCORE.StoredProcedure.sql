USE [DIVA_MASTER_SCRIPT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[script_B03_SS02_M_SCORE]
WITH EXECUTE AS CALLER
AS
--DYNAMIC_SCRIPT_START  

/*Purpose of the query: Calculate M-score
*/
/* Initiate the log */  
IF OBJECT_ID('_DatabaseLogTable', 'U') IS NULL BEGIN CREATE TABLE [dbo].[_DatabaseLogTable] ([Database] nvarchar(max) NULL,[Object] nvarchar(max) NULL,[Object Type] nvarchar(max) NULL,[User] nvarchar(max) NULL,[Date] date NULL,[Time] time NULL,[Description] nvarchar(max) NULL,[Table] nvarchar(max),[Rows] int) END

--Log start of procedure
INSERT INTO [dbo].[_DatabaseLogTable] ([Database],[Object],[Object Type],[User],[Date],[Time],[Description],[Table],[Rows])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(date,GETDATE()),CONVERT(time,GETDATE()),'Procedure started',NULL,NULL

	/* Initialize parameters from globals table */
    DECLARE  
				@CURRENCY NVARCHAR(3)                 = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'currency')
				,@DATE1 NVARCHAR(MAX)                           = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'date1')
				,@DATE2 NVARCHAR(MAX)                           = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'date2')
				,@DOWNLOADDATE NVARCHAR(MAX)             = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'downloaddate')
				,@DATEFORMAT VARCHAR(3)             = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'dateformat')
				,@EXCHANGERATETYPE NVARCHAR(MAX)  = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'exchangeratetype')
				,@LANGUAGE1 NVARCHAR(3)                = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'language1')
				,@LANGUAGE2 NVARCHAR(3)                = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'language2')
				,@LIMIT_RECORDS INT                    = CAST((SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'LIMIT_RECORDS') AS INT)
				,@FISCAL_YEAR_FROM NVARCHAR(MAX)					= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'FISCAL_YEAR_FROM')
				,@FISCAL_YEAR_TO NVARCHAR(MAX)					= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'FISCAL_YEAR_TO')
                 SET DATEFORMAT @DATEFORMAT;

/*Change history comments*/
 
/*
       Title                : [script_B03_SS02_FIN_M_SCORE]
       Description   : 
		
       --------------------------------------------------------------
       Update history
       --------------------------------------------------------------
       Date                     |      Who                  |      Description
       DD-MM-YYYY                    Initials                      Initial version
       19-02-2024                      Thuan				   Thuan created Stored Procedure to calculate values (variables) in the M-score formula
  
*/
-- Important notes
-- AM_GL_MAPPING_CATEGORY_M_SCORE table : This is a table containing a list of GL accounts from the SKA1 table for the SPE region. For each GL account, which category does it belong to?
-- 

-- Step 1: Link the summarized Trial Balance cube to the AM M-score mapping to add categories
-- At the same time try to take the year-end balances of the accounts.
-- and Total net movements for each Company code, fiscal year and GL account.


	EXEC SP_REMOVE_TABLES 'B03_SS02%' 

	EXEC SP_DROPTABLE 'B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES'

	SELECT DISTINCT
	  B03_04_IT_TB_SUMMARY_FULL.B03_04_T001_BUKRS, -- Company code
      B03_04_IT_TB_SUMMARY_FULL.B03_04_TB_RYEAR, -- Fiscal year
      B03_04_IT_TB_SUMMARY_FULL.B03_04_TB_RACCT, -- GL accounts    
	  AM_GL_MAPPING_CATEGORY_M_SCORE.SKAT_TXT50, -- GL accounts text
	  B03_04_IT_TB_SUMMARY_FULL.B03_04_T001_BUTXT, -- Company code text
	  AM_GL_MAPPING_CATEGORY_M_SCORE.[Category], -- Category
	  AM_GL_MAPPING_CATEGORY_M_SCORE.[Compound category level 1], -- Compound category l1
	  AM_GL_MAPPING_CATEGORY_M_SCORE.[Compound category level 2], -- Compund category l2
      B.B03_04_TB_HSL_TOT_MOV, -- Net movements local amount HSL
      B.B03_04_TB_HSL_TOT_MOV_CUC, -- Net movement local amount HSL to USD
      B.B03_04_TB_KSL_TOT_MOV, -- Net movemnet KSL amount (DMBE2)
      A.B03_04_ZF_TB_HSL_TOT_END, -- Ending balance HSL
      A.B03_04_ZF_TB_HSL_TOT_END_CUC, -- Ending balance HSL CUC
      A.B03_04_ZF_TB_KSL_TOT_END -- Ending balance KSL
	INTO B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES
	FROM B03_04_IT_TB_SUMMARY_FULL
	LEFT JOIN 
	(
		-- For each company code, fiscal year and GL accounts get ending balance amount
		SELECT DISTINCT
			B03_04_T001_BUKRS,
			B03_04_TB_RYEAR,
			B03_04_TB_RACCT,
			B03_04_ZF_TB_HSL_TOT_END,
			B03_04_ZF_TB_HSL_TOT_END_CUC,
			B03_04_ZF_TB_KSL_TOT_END
		FROM B03_04_IT_TB_SUMMARY_FULL
		WHERE B03_04_TB_MONAT = (SELECT MAX(B03_04_TB_MONAT) FROM B03_04_IT_TB_SUMMARY_FULL) -- Filtering on the last period so that we can have the ending balances at year-ends.
	 ) A
	 ON B03_04_IT_TB_SUMMARY_FULL.B03_04_TB_RYEAR = A.B03_04_TB_RYEAR AND
		B03_04_IT_TB_SUMMARY_FULL.B03_04_T001_BUKRS = A.B03_04_T001_BUKRS AND
		B03_04_IT_TB_SUMMARY_FULL.B03_04_TB_RACCT = A.B03_04_TB_RACCT
	LEFT JOIN 
	(
		-- For each company code, fiscal year and GL accounts get net movement.
		-- Group by company code, fiscal year and GL accounts then Total movements with MONAT <> 0 ( opening)
		SELECT DISTINCT
			B03_04_T001_BUKRS,
			B03_04_TB_RYEAR,
			B03_04_TB_RACCT,
			SUM(B03_04_IT_TB_SUMMARY_FULL.B03_04_TB_HSL_TOT_MOV)		AS B03_04_TB_HSL_TOT_MOV,
			SUM(B03_04_IT_TB_SUMMARY_FULL.B03_04_TB_HSL_TOT_MOV_CUC)	AS B03_04_TB_HSL_TOT_MOV_CUC,
			SUM(B03_04_IT_TB_SUMMARY_FULL.B03_04_TB_KSL_TOT_MOV)		AS B03_04_TB_KSL_TOT_MOV
		FROM B03_04_IT_TB_SUMMARY_FULL
		WHERE B03_04_TB_MONAT <> '00'
		GROUP BY 
			B03_04_T001_BUKRS,
			B03_04_TB_RYEAR,
			B03_04_TB_RACCT
	 ) B
	 ON B03_04_IT_TB_SUMMARY_FULL.B03_04_TB_RYEAR = B.B03_04_TB_RYEAR AND
		B03_04_IT_TB_SUMMARY_FULL.B03_04_T001_BUKRS = B.B03_04_T001_BUKRS AND
		B03_04_IT_TB_SUMMARY_FULL.B03_04_TB_RACCT = B.B03_04_TB_RACCT
	LEFT JOIN AM_GL_MAPPING_CATEGORY_M_SCORE -- Add Category and Compound l1 and l2 from AM_GL_MAPPING_CATEGORY_M_SCORE mapping based on GL accounts.
	ON	B03_04_IT_TB_SUMMARY_FULL.B03_04_TB_RACCT = SKA1_SAKNR


-- Step 2: Create a table that calculates the movements and ending balances per Company code - Year - Category
-- Step 2.1: Group by Company code - Year - SINGLE Category
	
	EXEC SP_DROPTABLE 'B03_SS02_02A_TT_TB_SINGL_CATEGORY_GROUPED'

	SELECT DISTINCT
		B03_04_T001_BUKRS, -- Company code
		B03_04_TB_RYEAR, -- Fiscal year
		Category, -- Category
		SUM(B03_04_TB_HSL_TOT_MOV)		AS B03_04_TB_HSL_TOT_MOV, -- Total movements HSL amount
		SUM(B03_04_TB_HSL_TOT_MOV_CUC) 	AS B03_04_TB_HSL_TOT_MOV_CUC, -- Total movements HSL amount USD
		SUM(B03_04_TB_KSL_TOT_MOV)		AS B03_04_TB_KSL_TOT_MOV, -- Total movements KSL amount
		SUM(B03_04_ZF_TB_HSL_TOT_END)		AS B03_04_ZF_TB_HSL_TOT_END, -- Ending balance HSL
		SUM(B03_04_ZF_TB_HSL_TOT_END_CUC)	AS B03_04_ZF_TB_HSL_TOT_END_CUC, -- Ending balance HSL USD
		SUM(B03_04_ZF_TB_KSL_TOT_END)		AS B03_04_ZF_TB_KSL_TOT_END-- Ending balance KSL
	INTO B03_SS02_02A_TT_TB_SINGL_CATEGORY_GROUPED
	FROM B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES
	GROUP BY -- Group by company code, fiscal year and category
		B03_04_T001_BUKRS,
		B03_04_TB_RYEAR,
		Category
	
-- Step 2.2: Group by Company code - Year - Level 1 category
/*
The reason we need to calculate category level 1.
In the M-score formula, we need to caculate Total assets and Total assets include categories such as Cash, Fixed assets, Receivables, etc.
So HanhLam created a level 1 column. For example, for level 1 is Total assets, the category is as follows

SELECT 
	DISTINCT Category, [Compound category level 1], [Compound category level 2]
FROM AM_GL_MAPPING_CATEGORY_M_SCORE
WHERE [Compound category level 1] = 'Total assets'
----------------------------------------------------------------------
Category		    |	Compound category level 1 |	Compound category level 2
--------------------------------------------------|----------------------
Cash			    |	Total assets			  |	Current assets
Depreciation	    |	Total assets			  |
Fixed assets	    |	Total assets			  |
Other assets	    |	Total assets			  |
PP&E			    |	Total assets			  |
Receivables		    |	Total assets			  | Current assets
Right-of-use assets	|   Total assets			  |
*/
	EXEC SP_DROPTABLE 'B03_SS02_02B_TT_TB_CATEGORY_LV1_GROUPED'

	SELECT DISTINCT
		B03_04_T001_BUKRS, -- Company code
		B03_04_TB_RYEAR, -- Fiscal year
		[Compound category level 1], -- Compound category level 1
		SUM(B03_04_TB_HSL_TOT_MOV)		AS B03_04_TB_HSL_TOT_MOV, -- Total movements HSL amount
		SUM(B03_04_TB_HSL_TOT_MOV_CUC) 	AS B03_04_TB_HSL_TOT_MOV_CUC, -- Total movements HSL amount USD
		SUM(B03_04_TB_KSL_TOT_MOV)		AS B03_04_TB_KSL_TOT_MOV, -- Total movements KSL amount
		SUM(B03_04_ZF_TB_HSL_TOT_END)		AS B03_04_ZF_TB_HSL_TOT_END, -- Ending balance HSL
		SUM(B03_04_ZF_TB_HSL_TOT_END_CUC)	AS B03_04_ZF_TB_HSL_TOT_END_CUC, -- Ending balance HSL to USD
		SUM(B03_04_ZF_TB_KSL_TOT_END)		AS B03_04_ZF_TB_KSL_TOT_END -- Ending balance KSL
	INTO B03_SS02_02B_TT_TB_CATEGORY_LV1_GROUPED
	FROM B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES
	GROUP BY
		B03_04_T001_BUKRS,  -- Company code
		B03_04_TB_RYEAR, -- Fiscal year
		[Compound category level 1] -- Compound category level 1

-- Step 2.3: Group by Company code - Year - Level 2 category
-- 	The reason we need to calculate category level 2.
-- In the M-score formula, we need to calculate current assets include categories such as Cash and Receivables.

	EXEC SP_DROPTABLE 'B03_SS02_02C_TT_TB_CATEGORY_LV2_GROUPED'

	SELECT DISTINCT
		B03_04_T001_BUKRS, -- Company code
		B03_04_TB_RYEAR, -- Fiscal year
		[Compound category level 2], -- Compound category level 2
		SUM(B03_04_TB_HSL_TOT_MOV)		AS B03_04_TB_HSL_TOT_MOV, -- Total movements HSL amount
		SUM(B03_04_TB_HSL_TOT_MOV_CUC) 	AS B03_04_TB_HSL_TOT_MOV_CUC, -- Total movements HSL amount USD
		SUM(B03_04_TB_KSL_TOT_MOV)		AS B03_04_TB_KSL_TOT_MOV, -- Total movements KSL amount
		SUM(B03_04_ZF_TB_HSL_TOT_END)		AS B03_04_ZF_TB_HSL_TOT_END, -- Ending balance HSL
	    SUM(B03_04_ZF_TB_HSL_TOT_END_CUC)	AS B03_04_ZF_TB_HSL_TOT_END_CUC, -- Ending balance HSL USD
		SUM(B03_04_ZF_TB_KSL_TOT_END)		AS B03_04_ZF_TB_KSL_TOT_END -- Ending balance KSL
	INTO B03_SS02_02C_TT_TB_CATEGORY_LV2_GROUPED
	FROM B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES
	GROUP BY
		B03_04_T001_BUKRS, -- Company code
		B03_04_TB_RYEAR, -- Fiscal year
		[Compound category level 2] -- Compound category level 2

-- Step 3: Create a pivot table of which the columns are categories (single, compound categories included)
-- Step 3.1: Create a table that contains the yearly net movements, ending balances of the categories for each company code

	EXEC SP_DROPTABLE 'B03_SS02_03A_IT_CATEGORIES_MOV_BAL_PER_BUKRS_RYEAR'

	SELECT DISTINCT
		B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_T001_BUKRS, -- Company code 
		B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_TB_RYEAR, -- Fiscal year
		-- Sales : Calculate the amount values of the Sales category
		COALESCE(ZF_TB_HSL_SALES_TOT_MOV,0)			AS ZF_TB_HSL_SALES_TOT_MOV, --  Total movements HSL amount
		COALESCE(ZF_TB_HSL_SALES_TOT_MOV_CUC,0)		AS ZF_TB_HSL_SALES_TOT_MOV_CUC, -- Total movements HSL amount USD
		COALESCE(ZF_TB_KSL_SALES_TOT_MOV,0)			AS ZF_TB_KSL_SALES_TOT_MOV, -- Total movements KSL amount
		COALESCE(ZF_TB_HSL_SALES_TOT_END,0)			AS ZF_TB_HSL_SALES_TOT_END, -- Ending balance HSL amount
		COALESCE(ZF_TB_HSL_SALES_TOT_END_CUC,0)		AS ZF_TB_HSL_SALES_TOT_END_CUC,  -- Ending balance HSL amount USD
		COALESCE(ZF_TB_KSL_SALES_TOT_END,0)			AS ZF_TB_KSL_SALES_TOT_END, -- Ending balance KSL amount 
		COALESCE(ZF_TB_HSL_SALES_TOT_MOV_PREV,0)		AS ZF_TB_HSL_SALES_TOT_MOV_PREV, --  Total movements HSL previous amount
		COALESCE(ZF_TB_HSL_SALES_TOT_MOV_CUC_PREV,0)	AS ZF_TB_HSL_SALES_TOT_MOV_CUC_PREV, --  Total movements HSL previous amount USD
		COALESCE(ZF_TB_KSL_SALES_TOT_MOV_PREV,0)		AS ZF_TB_KSL_SALES_TOT_MOV_PREV, --  Total movements KSL previous amount 
		COALESCE(ZF_TB_HSL_SALES_TOT_END_PREV,0)		AS ZF_TB_HSL_SALES_TOT_END_PREV, --  Ending balance HSL previous amount
		COALESCE(ZF_TB_HSL_SALES_TOT_END_CUC_PREV,0)	AS ZF_TB_HSL_SALES_TOT_END_CUC_PREV, -- Ending balance HSL previous amount USD
		COALESCE(ZF_TB_KSL_SALES_TOT_END_PREV,0)		AS ZF_TB_KSL_SALES_TOT_END_PREV, -- Ending balance KSL previous amount
		-- Receivables
		COALESCE(ZF_TB_HSL_RECEIVABLES_TOT_MOV,0)				AS ZF_TB_HSL_RECEIVABLES_TOT_MOV,
		COALESCE(ZF_TB_HSL_RECEIVABLES_TOT_MOV_CUC,0)			AS ZF_TB_HSL_RECEIVABLES_TOT_MOV_CUC,
		COALESCE(ZF_TB_KSL_RECEIVABLES_TOT_MOV,0)				AS ZF_TB_KSL_RECEIVABLES_TOT_MOV,
		COALESCE(ZF_TB_HSL_RECEIVABLES_TOT_END,0)				AS ZF_TB_HSL_RECEIVABLES_TOT_END,
		COALESCE(ZF_TB_HSL_RECEIVABLES_TOT_END_CUC,0)			AS ZF_TB_HSL_RECEIVABLES_TOT_END_CUC,
		COALESCE(ZF_TB_KSL_RECEIVABLES_TOT_END,0)				AS ZF_TB_KSL_RECEIVABLES_TOT_END,
		COALESCE(ZF_TB_HSL_RECEIVABLES_TOT_MOV_PREV,0)		AS ZF_TB_HSL_RECEIVABLES_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_RECEIVABLES_TOT_MOV_CUC_PREV,0)	AS ZF_TB_HSL_RECEIVABLES_TOT_MOV_CUC_PREV,
		COALESCE(ZF_TB_KSL_RECEIVABLES_TOT_MOV_PREV,0)		AS ZF_TB_KSL_RECEIVABLES_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_RECEIVABLES_TOT_END_PREV,0)		AS ZF_TB_HSL_RECEIVABLES_TOT_END_PREV,
		COALESCE(ZF_TB_HSL_RECEIVABLES_TOT_END_CUC_PREV,0)	AS ZF_TB_HSL_RECEIVABLES_TOT_END_CUC_PREV,
		COALESCE(ZF_TB_KSL_RECEIVABLES_TOT_END_PREV,0)		AS ZF_TB_KSL_RECEIVABLES_TOT_END_PREV,
		-- COGS
		COALESCE(ZF_TB_HSL_COGS_TOT_MOV,0)				AS ZF_TB_HSL_COGS_TOT_MOV,
		COALESCE(ZF_TB_HSL_COGS_TOT_MOV_CUC,0)			AS ZF_TB_HSL_COGS_TOT_MOV_CUC,
		COALESCE(ZF_TB_KSL_COGS_TOT_MOV,0)				AS ZF_TB_KSL_COGS_TOT_MOV,
		COALESCE(ZF_TB_HSL_COGS_TOT_END,0)				AS ZF_TB_HSL_COGS_TOT_END,
		COALESCE(ZF_TB_HSL_COGS_TOT_END_CUC,0)			AS ZF_TB_HSL_COGS_TOT_END_CUC,
		COALESCE(ZF_TB_KSL_COGS_TOT_END,0)				AS ZF_TB_KSL_COGS_TOT_END,
		COALESCE(ZF_TB_HSL_COGS_TOT_MOV_PREV,0)			AS ZF_TB_HSL_COGS_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_COGS_TOT_MOV_CUC_PREV,0)		AS ZF_TB_HSL_COGS_TOT_MOV_CUC_PREV,
		COALESCE(ZF_TB_KSL_COGS_TOT_MOV_PREV,0)			AS ZF_TB_KSL_COGS_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_COGS_TOT_END_PREV,0)			AS ZF_TB_HSL_COGS_TOT_END_PREV,
		COALESCE(ZF_TB_HSL_COGS_TOT_END_CUC_PREV,0)		AS ZF_TB_HSL_COGS_TOT_END_CUC_PREV,
		COALESCE(ZF_TB_KSL_COGS_TOT_END_PREV,0)			AS ZF_TB_KSL_COGS_TOT_END_PREV,
		-- SG&A expenese
		COALESCE(ZF_TB_HSL_SGAEXP_TOT_MOV,0)				AS ZF_TB_HSL_SGAEXP_TOT_MOV,
		COALESCE(ZF_TB_HSL_SGAEXP_TOT_MOV_CUC,0)			AS ZF_TB_HSL_SGAEXP_TOT_MOV_CUC,
		COALESCE(ZF_TB_KSL_SGAEXP_TOT_MOV,0)				AS ZF_TB_KSL_SGAEXP_TOT_MOV,
		COALESCE(ZF_TB_HSL_SGAEXP_TOT_END,0)				AS ZF_TB_HSL_SGAEXP_TOT_END,
		COALESCE(ZF_TB_HSL_SGAEXP_TOT_END_CUC,0)			AS ZF_TB_HSL_SGAEXP_TOT_END_CUC,
		COALESCE(ZF_TB_KSL_SGAEXP_TOT_END,0)				AS ZF_TB_KSL_SGAEXP_TOT_END,
		COALESCE(ZF_TB_HSL_SGAEXP_TOT_MOV_PREV,0)			AS ZF_TB_HSL_SGAEXP_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_SGAEXP_TOT_MOV_CUC_PREV,0)		AS ZF_TB_HSL_SGAEXP_TOT_MOV_CUC_PREV,
		COALESCE(ZF_TB_KSL_SGAEXP_TOT_MOV_PREV,0)			AS ZF_TB_KSL_SGAEXP_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_SGAEXP_TOT_END_PREV,0)			AS ZF_TB_HSL_SGAEXP_TOT_END_PREV,
		COALESCE(ZF_TB_HSL_SGAEXP_TOT_END_CUC_PREV,0)		AS ZF_TB_HSL_SGAEXP_TOT_END_CUC_PREV,
		COALESCE(ZF_TB_KSL_SGAEXP_TOT_END_PREV,0)			AS ZF_TB_KSL_SGAEXP_TOT_END_PREV,
		-- PP&E
		COALESCE(ZF_TB_HSL_PPE_TOT_MOV,0)				AS ZF_TB_HSL_PPE_TOT_MOV,
		COALESCE(ZF_TB_HSL_PPE_TOT_MOV_CUC,0)			AS ZF_TB_HSL_PPE_TOT_MOV_CUC,
		COALESCE(ZF_TB_KSL_PPE_TOT_MOV,0)				AS ZF_TB_KSL_PPE_TOT_MOV,
		COALESCE(ZF_TB_HSL_PPE_TOT_END,0)				AS ZF_TB_HSL_PPE_TOT_END,
		COALESCE(ZF_TB_HSL_PPE_TOT_END_CUC,0)			AS ZF_TB_HSL_PPE_TOT_END_CUC,
		COALESCE(ZF_TB_KSL_PPE_TOT_END,0)				AS ZF_TB_KSL_PPE_TOT_END,
		COALESCE(ZF_TB_HSL_PPE_TOT_MOV_PREV,0)			AS ZF_TB_HSL_PPE_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_PPE_TOT_MOV_CUC_PREV,0)		AS ZF_TB_HSL_PPE_TOT_MOV_CUC_PREV,
		COALESCE(ZF_TB_KSL_PPE_TOT_MOV_PREV,0)			AS ZF_TB_KSL_PPE_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_PPE_TOT_END_PREV,0)			AS ZF_TB_HSL_PPE_TOT_END_PREV,
		COALESCE(ZF_TB_HSL_PPE_TOT_END_CUC_PREV,0)		AS ZF_TB_HSL_PPE_TOT_END_CUC_PREV,
		COALESCE(ZF_TB_KSL_PPE_TOT_END_PREV,0)			AS ZF_TB_KSL_PPE_TOT_END_PREV,
		-- Depreciation
		COALESCE(ZF_TB_HSL_DEPRECIATION_TOT_MOV,0)				AS ZF_TB_HSL_DEPRECIATION_TOT_MOV,
		COALESCE(ZF_TB_HSL_DEPRECIATION_TOT_MOV_CUC,0)			AS ZF_TB_HSL_DEPRECIATION_TOT_MOV_CUC,
		COALESCE(ZF_TB_KSL_DEPRECIATION_TOT_MOV,0)				AS ZF_TB_KSL_DEPRECIATION_TOT_MOV,
		COALESCE(ZF_TB_HSL_DEPRECIATION_TOT_END,0)				AS ZF_TB_HSL_DEPRECIATION_TOT_END,
		COALESCE(ZF_TB_HSL_DEPRECIATION_TOT_END_CUC,0)			AS ZF_TB_HSL_DEPRECIATION_TOT_END_CUC,
		COALESCE(ZF_TB_KSL_DEPRECIATION_TOT_END,0)				AS ZF_TB_KSL_DEPRECIATION_TOT_END,
		COALESCE(ZF_TB_HSL_DEPRECIATION_TOT_MOV_PREV,0)			AS ZF_TB_HSL_DEPRECIATION_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_DEPRECIATION_TOT_MOV_CUC_PREV,0)		AS ZF_TB_HSL_DEPRECIATION_TOT_MOV_CUC_PREV,
		COALESCE(ZF_TB_KSL_DEPRECIATION_TOT_MOV_PREV,0)			AS ZF_TB_KSL_DEPRECIATION_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_DEPRECIATION_TOT_END_PREV,0)			AS ZF_TB_HSL_DEPRECIATION_TOT_END_PREV,
		COALESCE(ZF_TB_HSL_DEPRECIATION_TOT_END_CUC_PREV,0)		AS ZF_TB_HSL_DEPRECIATION_TOT_END_CUC_PREV,
		COALESCE(ZF_TB_KSL_DEPRECIATION_TOT_END_PREV,0)			AS ZF_TB_KSL_DEPRECIATION_TOT_END_PREV,
		-- Accrued operating expenses
		COALESCE(ZF_TB_HSL_ACCR_OPEXPENSE_TOT_MOV,0)				AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_MOV,
		COALESCE(ZF_TB_HSL_ACCR_OPEXPENSE_TOT_MOV_CUC,0)			AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_MOV_CUC,
		COALESCE(ZF_TB_KSL_ACCR_OPEXPENSE_TOT_MOV,0)				AS ZF_TB_KSL_ACCR_OPEXPENSE_TOT_MOV,
		COALESCE(ZF_TB_HSL_ACCR_OPEXPENSE_TOT_END,0)				AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_END,
		COALESCE(ZF_TB_HSL_ACCR_OPEXPENSE_TOT_END_CUC,0)			AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_END_CUC,
		COALESCE(ZF_TB_KSL_ACCR_OPEXPENSE_TOT_END,0)				AS ZF_TB_KSL_ACCR_OPEXPENSE_TOT_END,
		COALESCE(ZF_TB_HSL_ACCR_OPEXPENSE_TOT_MOV_PREV,0)			AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_ACCR_OPEXPENSE_TOT_MOV_CUC_PREV,0)		AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_MOV_CUC_PREV,
		COALESCE(ZF_TB_KSL_ACCR_OPEXPENSE_TOT_MOV_PREV,0)			AS ZF_TB_KSL_ACCR_OPEXPENSE_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_ACCR_OPEXPENSE_TOT_END_PREV,0)			AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_END_PREV,
		COALESCE(ZF_TB_HSL_ACCR_OPEXPENSE_TOT_END_CUC_PREV,0)		AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_END_CUC_PREV,
		COALESCE(ZF_TB_KSL_ACCR_OPEXPENSE_TOT_END_PREV,0)			AS ZF_TB_KSL_ACCR_OPEXPENSE_TOT_END_PREV,
		-- Payables
		COALESCE(ZF_TB_HSL_PAYABLES_TOT_MOV,0)				AS ZF_TB_HSL_PAYABLES_TOT_MOV,
		COALESCE(ZF_TB_HSL_PAYABLES_TOT_MOV_CUC,0)			AS ZF_TB_HSL_PAYABLES_TOT_MOV_CUC,
		COALESCE(ZF_TB_KSL_PAYABLES_TOT_MOV,0)				AS ZF_TB_KSL_PAYABLES_TOT_MOV,
		COALESCE(ZF_TB_HSL_PAYABLES_TOT_END,0)				AS ZF_TB_HSL_PAYABLES_TOT_END,
		COALESCE(ZF_TB_HSL_PAYABLES_TOT_END_CUC,0)			AS ZF_TB_HSL_PAYABLES_TOT_END_CUC,
		COALESCE(ZF_TB_KSL_PAYABLES_TOT_END,0)				AS ZF_TB_KSL_PAYABLES_TOT_END,
		COALESCE(ZF_TB_HSL_PAYABLES_TOT_MOV_PREV,0)			AS ZF_TB_HSL_PAYABLES_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_PAYABLES_TOT_MOV_CUC_PREV,0)		AS ZF_TB_HSL_PAYABLES_TOT_MOV_CUC_PREV,
		COALESCE(ZF_TB_KSL_PAYABLES_TOT_MOV_PREV,0)			AS ZF_TB_KSL_PAYABLES_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_PAYABLES_TOT_END_PREV,0)			AS ZF_TB_HSL_PAYABLES_TOT_END_PREV,
		COALESCE(ZF_TB_HSL_PAYABLES_TOT_END_CUC_PREV,0)		AS ZF_TB_HSL_PAYABLES_TOT_END_CUC_PREV,
		COALESCE(ZF_TB_KSL_PAYABLES_TOT_END_PREV,0)			AS ZF_TB_KSL_PAYABLES_TOT_END_PREV,
		-- Debt
		COALESCE(ZF_TB_HSL_DEBT_TOT_MOV,0)				AS ZF_TB_HSL_DEBT_TOT_MOV,
		COALESCE(ZF_TB_HSL_DEBT_TOT_MOV_CUC,0)			AS ZF_TB_HSL_DEBT_TOT_MOV_CUC,
		COALESCE(ZF_TB_KSL_DEBT_TOT_MOV,0)				AS ZF_TB_KSL_DEBT_TOT_MOV,
		COALESCE(ZF_TB_HSL_DEBT_TOT_END,0)				AS ZF_TB_HSL_DEBT_TOT_END,
		COALESCE(ZF_TB_HSL_DEBT_TOT_END_CUC,0)			AS ZF_TB_HSL_DEBT_TOT_END_CUC,
		COALESCE(ZF_TB_KSL_DEBT_TOT_END,0)				AS ZF_TB_KSL_DEBT_TOT_END,
		COALESCE(ZF_TB_HSL_DEBT_TOT_MOV_PREV,0)			AS ZF_TB_HSL_DEBT_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_DEBT_TOT_MOV_CUC_PREV,0)		AS ZF_TB_HSL_DEBT_TOT_MOV_CUC_PREV,
		COALESCE(ZF_TB_KSL_DEBT_TOT_MOV_PREV,0)			AS ZF_TB_KSL_DEBT_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_DEBT_TOT_END_PREV,0)			AS ZF_TB_HSL_DEBT_TOT_END_PREV,
		COALESCE(ZF_TB_HSL_DEBT_TOT_END_CUC_PREV,0)		AS ZF_TB_HSL_DEBT_TOT_END_CUC_PREV,
		COALESCE(ZF_TB_KSL_DEBT_TOT_END_PREV,0)			AS ZF_TB_KSL_DEBT_TOT_END_PREV,
		-- GR/IR
		COALESCE(ZF_TB_HSL_GRIR_TOT_MOV,0)				AS ZF_TB_HSL_GRIR_TOT_MOV,
		COALESCE(ZF_TB_HSL_GRIR_TOT_MOV_CUC,0)			AS ZF_TB_HSL_GRIR_TOT_MOV_CUC,
		COALESCE(ZF_TB_KSL_GRIR_TOT_MOV,0)				AS ZF_TB_KSL_GRIR_TOT_MOV,
		COALESCE(ZF_TB_HSL_GRIR_TOT_END,0)				AS ZF_TB_HSL_GRIR_TOT_END,
		COALESCE(ZF_TB_HSL_GRIR_TOT_END_CUC,0)			AS ZF_TB_HSL_GRIR_TOT_END_CUC,
		COALESCE(ZF_TB_KSL_GRIR_TOT_END,0)				AS ZF_TB_KSL_GRIR_TOT_END,
		COALESCE(ZF_TB_HSL_GRIR_TOT_MOV_PREV,0)			AS ZF_TB_HSL_GRIR_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_GRIR_TOT_MOV_CUC_PREV,0)		AS ZF_TB_HSL_GRIR_TOT_MOV_CUC_PREV,
		COALESCE(ZF_TB_KSL_GRIR_TOT_MOV_PREV,0)			AS ZF_TB_KSL_GRIR_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_GRIR_TOT_END_PREV,0)			AS ZF_TB_HSL_GRIR_TOT_END_PREV,
		COALESCE(ZF_TB_HSL_GRIR_TOT_END_CUC_PREV,0)		AS ZF_TB_HSL_GRIR_TOT_END_CUC_PREV,
		COALESCE(ZF_TB_KSL_GRIR_TOT_END_PREV,0)			AS ZF_TB_KSL_GRIR_TOT_END_PREV,
		-- Total assets
		COALESCE(ZF_TB_HSL_TOTAL_ASSETS_TOT_MOV,0)				AS ZF_TB_HSL_TOTAL_ASSETS_TOT_MOV,
		COALESCE(ZF_TB_HSL_TOTAL_ASSETS_TOT_MOV_CUC,0)			AS ZF_TB_HSL_TOTAL_ASSETS_TOT_MOV_CUC,
		COALESCE(ZF_TB_KSL_TOTAL_ASSETS_TOT_MOV,0)				AS ZF_TB_KSL_TOTAL_ASSETS_TOT_MOV,
		COALESCE(ZF_TB_HSL_TOTAL_ASSETS_TOT_END,0)				AS ZF_TB_HSL_TOTAL_ASSETS_TOT_END,
		COALESCE(ZF_TB_HSL_TOTAL_ASSETS_TOT_END_CUC,0)			AS ZF_TB_HSL_TOTAL_ASSETS_TOT_END_CUC,
		COALESCE(ZF_TB_KSL_TOTAL_ASSETS_TOT_END,0)				AS ZF_TB_KSL_TOTAL_ASSETS_TOT_END,
		COALESCE(ZF_TB_HSL_TOTAL_ASSETS_TOT_MOV_PREV,0)			AS ZF_TB_HSL_TOTAL_ASSETS_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_TOTAL_ASSETS_TOT_MOV_CUC_PREV,0)		AS ZF_TB_HSL_TOTAL_ASSETS_TOT_MOV_CUC_PREV,
		COALESCE(ZF_TB_KSL_TOTAL_ASSETS_TOT_MOV_PREV,0)			AS ZF_TB_KSL_TOTAL_ASSETS_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_TOTAL_ASSETS_TOT_END_PREV,0)			AS ZF_TB_HSL_TOTAL_ASSETS_TOT_END_PREV,
		COALESCE(ZF_TB_HSL_TOTAL_ASSETS_TOT_END_CUC_PREV,0)		AS ZF_TB_HSL_TOTAL_ASSETS_TOT_END_CUC_PREV,
		COALESCE(ZF_TB_KSL_TOTAL_ASSETS_TOT_END_PREV,0)			AS ZF_TB_KSL_TOTAL_ASSETS_TOT_END_PREV,
		-- Net income
		COALESCE(ZF_TB_HSL_NET_INCOME_TOT_MOV,0)				AS ZF_TB_HSL_NET_INCOME_TOT_MOV,
		COALESCE(ZF_TB_HSL_NET_INCOME_TOT_MOV_CUC,0)			AS ZF_TB_HSL_NET_INCOME_TOT_MOV_CUC,
		COALESCE(ZF_TB_KSL_NET_INCOME_TOT_MOV,0)				AS ZF_TB_KSL_NET_INCOME_TOT_MOV,
		COALESCE(ZF_TB_HSL_NET_INCOME_TOT_END,0)				AS ZF_TB_HSL_NET_INCOME_TOT_END,
		COALESCE(ZF_TB_HSL_NET_INCOME_TOT_END_CUC,0)			AS ZF_TB_HSL_NET_INCOME_TOT_END_CUC,
		COALESCE(ZF_TB_KSL_NET_INCOME_TOT_END,0)				AS ZF_TB_KSL_NET_INCOME_TOT_END,
		COALESCE(ZF_TB_HSL_NET_INCOME_TOT_MOV_PREV,0)			AS ZF_TB_HSL_NET_INCOME_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_NET_INCOME_TOT_MOV_CUC_PREV,0)		AS ZF_TB_HSL_NET_INCOME_TOT_MOV_CUC_PREV,
		COALESCE(ZF_TB_KSL_NET_INCOME_TOT_MOV_PREV,0)			AS ZF_TB_KSL_NET_INCOME_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_NET_INCOME_TOT_END_PREV,0)			AS ZF_TB_HSL_NET_INCOME_TOT_END_PREV,
		COALESCE(ZF_TB_HSL_NET_INCOME_TOT_END_CUC_PREV,0)		AS ZF_TB_HSL_NET_INCOME_TOT_END_CUC_PREV,
		COALESCE(ZF_TB_KSL_NET_INCOME_TOT_END_PREV,0)			AS ZF_TB_KSL_NET_INCOME_TOT_END_PREV,
		-- Current assets
		COALESCE(ZF_TB_HSL_CURRENT_ASSETS_TOT_MOV,0)				AS ZF_TB_HSL_CURRENT_ASSETS_TOT_MOV,
		COALESCE(ZF_TB_HSL_CURRENT_ASSETS_TOT_MOV_CUC,0)			AS ZF_TB_HSL_CURRENT_ASSETS_TOT_MOV_CUC,
		COALESCE(ZF_TB_KSL_CURRENT_ASSETS_TOT_MOV,0)				AS ZF_TB_KSL_CURRENT_ASSETS_TOT_MOV,
		COALESCE(ZF_TB_HSL_CURRENT_ASSETS_TOT_END,0)				AS ZF_TB_HSL_CURRENT_ASSETS_TOT_END,
		COALESCE(ZF_TB_HSL_CURRENT_ASSETS_TOT_END_CUC,0)			AS ZF_TB_HSL_CURRENT_ASSETS_TOT_END_CUC,
		COALESCE(ZF_TB_KSL_CURRENT_ASSETS_TOT_END,0)				AS ZF_TB_KSL_CURRENT_ASSETS_TOT_END,
		COALESCE(ZF_TB_HSL_CURRENT_ASSETS_TOT_MOV_PREV,0)			AS ZF_TB_HSL_CURRENT_ASSETS_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_CURRENT_ASSETS_TOT_MOV_CUC_PREV,0)		AS ZF_TB_HSL_CURRENT_ASSETS_TOT_MOV_CUC_PREV,
		COALESCE(ZF_TB_KSL_CURRENT_ASSETS_TOT_MOV_PREV,0)			AS ZF_TB_KSL_CURRENT_ASSETS_TOT_MOV_PREV,
		COALESCE(ZF_TB_HSL_CURRENT_ASSETS_TOT_END_PREV,0)			AS ZF_TB_HSL_CURRENT_ASSETS_TOT_END_PREV,
		COALESCE(ZF_TB_HSL_CURRENT_ASSETS_TOT_END_CUC_PREV,0)		AS ZF_TB_HSL_CURRENT_ASSETS_TOT_END_CUC_PREV,
		COALESCE(ZF_TB_KSL_CURRENT_ASSETS_TOT_END_PREV,0)			AS ZF_TB_KSL_CURRENT_ASSETS_TOT_END_PREV
	INTO B03_SS02_03A_IT_CATEGORIES_MOV_BAL_PER_BUKRS_RYEAR
	FROM B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES
	LEFT JOIN 
	(
		SELECT DISTINCT
			B03_04_T001_BUKRS, -- Company code 
			B03_04_TB_RYEAR, -- Fiscal year
			B03_04_TB_HSL_TOT_MOV		AS ZF_TB_HSL_SALES_TOT_MOV, --  Total movements HSL amount
			B03_04_TB_HSL_TOT_MOV_CUC	AS ZF_TB_HSL_SALES_TOT_MOV_CUC, --  Total movements HSL amount USD
			B03_04_TB_KSL_TOT_MOV		AS ZF_TB_KSL_SALES_TOT_MOV, --  Total movements KSL amount
			B03_04_ZF_TB_HSL_TOT_END		AS ZF_TB_HSL_SALES_TOT_END, -- Ending balance HSL amount
			B03_04_ZF_TB_HSL_TOT_END_CUC	AS ZF_TB_HSL_SALES_TOT_END_CUC, -- Ending balance HSL amount USD
			B03_04_ZF_TB_KSL_TOT_END		AS ZF_TB_KSL_SALES_TOT_END, -- Ending balance KSL amount
			-- Calculate previous values, for example Total movement of 2022 will be equal to total movement of 2021
			LAG(B03_04_TB_HSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_SALES_TOT_MOV_PREV,
			LAG(B03_04_TB_HSL_TOT_MOV_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_SALES_TOT_MOV_CUC_PREV,
			LAG(B03_04_TB_KSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_SALES_TOT_MOV_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_SALES_TOT_END_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_SALES_TOT_END_CUC_PREV,
			LAG(B03_04_ZF_TB_KSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_SALES_TOT_END_PREV
		FROM B03_SS02_02A_TT_TB_SINGL_CATEGORY_GROUPED
		WHERE Category = 'Sales'
	) B1
	ON B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_T001_BUKRS = B1.B03_04_T001_BUKRS AND
		B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_TB_RYEAR = B1.B03_04_TB_RYEAR
	LEFT JOIN 
	(
		SELECT DISTINCT
			B03_04_T001_BUKRS,
			B03_04_TB_RYEAR,
			B03_04_TB_HSL_TOT_MOV		AS ZF_TB_HSL_RECEIVABLES_TOT_MOV,
			B03_04_TB_HSL_TOT_MOV_CUC	AS ZF_TB_HSL_RECEIVABLES_TOT_MOV_CUC,
			B03_04_TB_KSL_TOT_MOV		AS ZF_TB_KSL_RECEIVABLES_TOT_MOV,
			B03_04_ZF_TB_HSL_TOT_END		AS ZF_TB_HSL_RECEIVABLES_TOT_END,
			B03_04_ZF_TB_HSL_TOT_END_CUC	AS ZF_TB_HSL_RECEIVABLES_TOT_END_CUC,
			B03_04_ZF_TB_KSL_TOT_END		AS ZF_TB_KSL_RECEIVABLES_TOT_END,
			LAG(B03_04_TB_HSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_RECEIVABLES_TOT_MOV_PREV,
			LAG(B03_04_TB_HSL_TOT_MOV_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_RECEIVABLES_TOT_MOV_CUC_PREV,
			LAG(B03_04_TB_KSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_RECEIVABLES_TOT_MOV_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_RECEIVABLES_TOT_END_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_RECEIVABLES_TOT_END_CUC_PREV,
			LAG(B03_04_ZF_TB_KSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_RECEIVABLES_TOT_END_PREV
		FROM B03_SS02_02A_TT_TB_SINGL_CATEGORY_GROUPED
		WHERE Category = 'Receivables'
	) B2
	ON B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_T001_BUKRS = B2.B03_04_T001_BUKRS AND
		B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_TB_RYEAR = B2.B03_04_TB_RYEAR
	LEFT JOIN 
	(
		SELECT DISTINCT
			B03_04_T001_BUKRS,
			B03_04_TB_RYEAR,
			B03_04_TB_HSL_TOT_MOV		AS ZF_TB_HSL_COGS_TOT_MOV,
			B03_04_TB_HSL_TOT_MOV_CUC	AS ZF_TB_HSL_COGS_TOT_MOV_CUC,
			B03_04_TB_KSL_TOT_MOV		AS ZF_TB_KSL_COGS_TOT_MOV,
			B03_04_ZF_TB_HSL_TOT_END		AS ZF_TB_HSL_COGS_TOT_END,
			B03_04_ZF_TB_HSL_TOT_END_CUC	AS ZF_TB_HSL_COGS_TOT_END_CUC,
			B03_04_ZF_TB_KSL_TOT_END		AS ZF_TB_KSL_COGS_TOT_END,
			LAG(B03_04_TB_HSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_COGS_TOT_MOV_PREV,
			LAG(B03_04_TB_HSL_TOT_MOV_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_COGS_TOT_MOV_CUC_PREV,
			LAG(B03_04_TB_KSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_COGS_TOT_MOV_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_COGS_TOT_END_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_COGS_TOT_END_CUC_PREV,
			LAG(B03_04_ZF_TB_KSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_COGS_TOT_END_PREV
		FROM B03_SS02_02A_TT_TB_SINGL_CATEGORY_GROUPED
		WHERE Category = 'COGS'
	) B3
	ON B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_T001_BUKRS = B3.B03_04_T001_BUKRS AND
		B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_TB_RYEAR = B3.B03_04_TB_RYEAR
	LEFT JOIN 
	(
		SELECT DISTINCT
			B03_04_T001_BUKRS,
			B03_04_TB_RYEAR,
			B03_04_TB_HSL_TOT_MOV		AS ZF_TB_HSL_SGAEXP_TOT_MOV,
			B03_04_TB_HSL_TOT_MOV_CUC	AS ZF_TB_HSL_SGAEXP_TOT_MOV_CUC,
			B03_04_TB_KSL_TOT_MOV		AS ZF_TB_KSL_SGAEXP_TOT_MOV,
			B03_04_ZF_TB_HSL_TOT_END		AS ZF_TB_HSL_SGAEXP_TOT_END,
			B03_04_ZF_TB_HSL_TOT_END_CUC	AS ZF_TB_HSL_SGAEXP_TOT_END_CUC,
			B03_04_ZF_TB_KSL_TOT_END		AS ZF_TB_KSL_SGAEXP_TOT_END,
			LAG(B03_04_TB_HSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_SGAEXP_TOT_MOV_PREV,
			LAG(B03_04_TB_HSL_TOT_MOV_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_SGAEXP_TOT_MOV_CUC_PREV,
			LAG(B03_04_TB_KSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_SGAEXP_TOT_MOV_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_SGAEXP_TOT_END_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_SGAEXP_TOT_END_CUC_PREV,
			LAG(B03_04_ZF_TB_KSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_SGAEXP_TOT_END_PREV
		FROM B03_SS02_02A_TT_TB_SINGL_CATEGORY_GROUPED
		WHERE Category = 'SG&A expenses'
	) B4
	ON B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_T001_BUKRS = B4.B03_04_T001_BUKRS AND
		B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_TB_RYEAR = B4.B03_04_TB_RYEAR
	LEFT JOIN 
	(
		SELECT DISTINCT
			B03_04_T001_BUKRS,
			B03_04_TB_RYEAR,
			B03_04_TB_HSL_TOT_MOV		AS ZF_TB_HSL_PPE_TOT_MOV,
			B03_04_TB_HSL_TOT_MOV_CUC	AS ZF_TB_HSL_PPE_TOT_MOV_CUC,
			B03_04_TB_KSL_TOT_MOV		AS ZF_TB_KSL_PPE_TOT_MOV,
			B03_04_ZF_TB_HSL_TOT_END		AS ZF_TB_HSL_PPE_TOT_END,
			B03_04_ZF_TB_HSL_TOT_END_CUC	AS ZF_TB_HSL_PPE_TOT_END_CUC,
			B03_04_ZF_TB_KSL_TOT_END		AS ZF_TB_KSL_PPE_TOT_END,
			LAG(B03_04_TB_HSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_PPE_TOT_MOV_PREV,
			LAG(B03_04_TB_HSL_TOT_MOV_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_PPE_TOT_MOV_CUC_PREV,
			LAG(B03_04_TB_KSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_PPE_TOT_MOV_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_PPE_TOT_END_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_PPE_TOT_END_CUC_PREV,
			LAG(B03_04_ZF_TB_KSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_PPE_TOT_END_PREV
		FROM B03_SS02_02A_TT_TB_SINGL_CATEGORY_GROUPED
		WHERE Category = 'PP&E'
	) B5
	ON B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_T001_BUKRS = B5.B03_04_T001_BUKRS AND
		B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_TB_RYEAR = B5.B03_04_TB_RYEAR
	LEFT JOIN 
	(
		SELECT DISTINCT
			B03_04_T001_BUKRS,
			B03_04_TB_RYEAR,
			B03_04_TB_HSL_TOT_MOV		AS ZF_TB_HSL_DEPRECIATION_TOT_MOV,
			B03_04_TB_HSL_TOT_MOV_CUC	AS ZF_TB_HSL_DEPRECIATION_TOT_MOV_CUC,
			B03_04_TB_KSL_TOT_MOV		AS ZF_TB_KSL_DEPRECIATION_TOT_MOV,
			B03_04_ZF_TB_HSL_TOT_END		AS ZF_TB_HSL_DEPRECIATION_TOT_END,
			B03_04_ZF_TB_HSL_TOT_END_CUC	AS ZF_TB_HSL_DEPRECIATION_TOT_END_CUC,
			B03_04_ZF_TB_KSL_TOT_END		AS ZF_TB_KSL_DEPRECIATION_TOT_END,
			LAG(B03_04_TB_HSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_DEPRECIATION_TOT_MOV_PREV,
			LAG(B03_04_TB_HSL_TOT_MOV_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_DEPRECIATION_TOT_MOV_CUC_PREV,
			LAG(B03_04_TB_KSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_DEPRECIATION_TOT_MOV_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_DEPRECIATION_TOT_END_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_DEPRECIATION_TOT_END_CUC_PREV,
			LAG(B03_04_ZF_TB_KSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_DEPRECIATION_TOT_END_PREV
		FROM B03_SS02_02A_TT_TB_SINGL_CATEGORY_GROUPED
		WHERE Category = 'Depreciation'
	) B6
	ON B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_T001_BUKRS = B6.B03_04_T001_BUKRS AND
		B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_TB_RYEAR = B6.B03_04_TB_RYEAR
	LEFT JOIN 
	(
		SELECT DISTINCT
			B03_04_T001_BUKRS,
			B03_04_TB_RYEAR,
			B03_04_TB_HSL_TOT_MOV		AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_MOV,
			B03_04_TB_HSL_TOT_MOV_CUC	AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_MOV_CUC,
			B03_04_TB_KSL_TOT_MOV		AS ZF_TB_KSL_ACCR_OPEXPENSE_TOT_MOV,
			B03_04_ZF_TB_HSL_TOT_END		AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_END,
			B03_04_ZF_TB_HSL_TOT_END_CUC	AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_END_CUC,
			B03_04_ZF_TB_KSL_TOT_END		AS ZF_TB_KSL_ACCR_OPEXPENSE_TOT_END,
			LAG(B03_04_TB_HSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_MOV_PREV,
			LAG(B03_04_TB_HSL_TOT_MOV_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_MOV_CUC_PREV,
			LAG(B03_04_TB_KSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_ACCR_OPEXPENSE_TOT_MOV_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_END_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_END_CUC_PREV,
			LAG(B03_04_ZF_TB_KSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_ACCR_OPEXPENSE_TOT_END_PREV
		FROM B03_SS02_02A_TT_TB_SINGL_CATEGORY_GROUPED
		WHERE Category = 'Accrued operating expenses'
	) B7
	ON B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_T001_BUKRS = B7.B03_04_T001_BUKRS AND
		B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_TB_RYEAR = B7.B03_04_TB_RYEAR
	LEFT JOIN 
	(
		SELECT DISTINCT
			B03_04_T001_BUKRS,
			B03_04_TB_RYEAR,
			B03_04_TB_HSL_TOT_MOV		AS ZF_TB_HSL_PAYABLES_TOT_MOV,
			B03_04_TB_HSL_TOT_MOV_CUC	AS ZF_TB_HSL_PAYABLES_TOT_MOV_CUC,
			B03_04_TB_KSL_TOT_MOV		AS ZF_TB_KSL_PAYABLES_TOT_MOV,
			B03_04_ZF_TB_HSL_TOT_END		AS ZF_TB_HSL_PAYABLES_TOT_END,
			B03_04_ZF_TB_HSL_TOT_END_CUC	AS ZF_TB_HSL_PAYABLES_TOT_END_CUC,
			B03_04_ZF_TB_KSL_TOT_END		AS ZF_TB_KSL_PAYABLES_TOT_END,
			LAG(B03_04_TB_HSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_PAYABLES_TOT_MOV_PREV,
			LAG(B03_04_TB_HSL_TOT_MOV_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_PAYABLES_TOT_MOV_CUC_PREV,
			LAG(B03_04_TB_KSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_PAYABLES_TOT_MOV_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_PAYABLES_TOT_END_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_PAYABLES_TOT_END_CUC_PREV,
			LAG(B03_04_ZF_TB_KSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_PAYABLES_TOT_END_PREV
		FROM B03_SS02_02A_TT_TB_SINGL_CATEGORY_GROUPED
		WHERE Category = 'Payables'
	) B8
	ON B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_T001_BUKRS = B8.B03_04_T001_BUKRS AND
		B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_TB_RYEAR = B8.B03_04_TB_RYEAR
	LEFT JOIN 
	(
		SELECT DISTINCT
			B03_04_T001_BUKRS,
			B03_04_TB_RYEAR,
			B03_04_TB_HSL_TOT_MOV		AS ZF_TB_HSL_DEBT_TOT_MOV,
			B03_04_TB_HSL_TOT_MOV_CUC	AS ZF_TB_HSL_DEBT_TOT_MOV_CUC,
			B03_04_TB_KSL_TOT_MOV		AS ZF_TB_KSL_DEBT_TOT_MOV,
			B03_04_ZF_TB_HSL_TOT_END		AS ZF_TB_HSL_DEBT_TOT_END,
			B03_04_ZF_TB_HSL_TOT_END_CUC	AS ZF_TB_HSL_DEBT_TOT_END_CUC,
			B03_04_ZF_TB_KSL_TOT_END		AS ZF_TB_KSL_DEBT_TOT_END,
			LAG(B03_04_TB_HSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_DEBT_TOT_MOV_PREV,
			LAG(B03_04_TB_HSL_TOT_MOV_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_DEBT_TOT_MOV_CUC_PREV,
			LAG(B03_04_TB_KSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_DEBT_TOT_MOV_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_DEBT_TOT_END_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_DEBT_TOT_END_CUC_PREV,
			LAG(B03_04_ZF_TB_KSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_DEBT_TOT_END_PREV
		FROM B03_SS02_02A_TT_TB_SINGL_CATEGORY_GROUPED
		WHERE Category = 'Debt'
	) B9
	ON B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_T001_BUKRS = B9.B03_04_T001_BUKRS AND
		B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_TB_RYEAR = B9.B03_04_TB_RYEAR
	LEFT JOIN 
	(
		SELECT DISTINCT
			B03_04_T001_BUKRS,
			B03_04_TB_RYEAR,
			B03_04_TB_HSL_TOT_MOV		AS ZF_TB_HSL_GRIR_TOT_MOV,
			B03_04_TB_HSL_TOT_MOV_CUC	AS ZF_TB_HSL_GRIR_TOT_MOV_CUC,
			B03_04_TB_KSL_TOT_MOV		AS ZF_TB_KSL_GRIR_TOT_MOV,
			B03_04_ZF_TB_HSL_TOT_END		AS ZF_TB_HSL_GRIR_TOT_END,
			B03_04_ZF_TB_HSL_TOT_END_CUC	AS ZF_TB_HSL_GRIR_TOT_END_CUC,
			B03_04_ZF_TB_KSL_TOT_END		AS ZF_TB_KSL_GRIR_TOT_END,
			LAG(B03_04_TB_HSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_GRIR_TOT_MOV_PREV,
			LAG(B03_04_TB_HSL_TOT_MOV_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_GRIR_TOT_MOV_CUC_PREV,
			LAG(B03_04_TB_KSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_GRIR_TOT_MOV_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_GRIR_TOT_END_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_GRIR_TOT_END_CUC_PREV,
			LAG(B03_04_ZF_TB_KSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_GRIR_TOT_END_PREV
		FROM B03_SS02_02A_TT_TB_SINGL_CATEGORY_GROUPED
		WHERE Category = 'GR/IR'
	) B10
	ON B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_T001_BUKRS = B10.B03_04_T001_BUKRS AND
		B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_TB_RYEAR = B10.B03_04_TB_RYEAR
	LEFT JOIN 
	(
		SELECT DISTINCT
			B03_04_T001_BUKRS,
			B03_04_TB_RYEAR,
			B03_04_TB_HSL_TOT_MOV		AS ZF_TB_HSL_TOTAL_ASSETS_TOT_MOV,
			B03_04_TB_HSL_TOT_MOV_CUC	AS ZF_TB_HSL_TOTAL_ASSETS_TOT_MOV_CUC,
			B03_04_TB_KSL_TOT_MOV		AS ZF_TB_KSL_TOTAL_ASSETS_TOT_MOV,
			B03_04_ZF_TB_HSL_TOT_END		AS ZF_TB_HSL_TOTAL_ASSETS_TOT_END,
			B03_04_ZF_TB_HSL_TOT_END_CUC	AS ZF_TB_HSL_TOTAL_ASSETS_TOT_END_CUC,
			B03_04_ZF_TB_KSL_TOT_END		AS ZF_TB_KSL_TOTAL_ASSETS_TOT_END,
			LAG(B03_04_TB_HSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_TOTAL_ASSETS_TOT_MOV_PREV,
			LAG(B03_04_TB_HSL_TOT_MOV_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_TOTAL_ASSETS_TOT_MOV_CUC_PREV,
			LAG(B03_04_TB_KSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_TOTAL_ASSETS_TOT_MOV_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_TOTAL_ASSETS_TOT_END_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_TOTAL_ASSETS_TOT_END_CUC_PREV,
			LAG(B03_04_ZF_TB_KSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_TOTAL_ASSETS_TOT_END_PREV
		FROM B03_SS02_02B_TT_TB_CATEGORY_LV1_GROUPED
		WHERE [Compound category level 1] = 'Total assets'
	) B11
	ON B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_T001_BUKRS = B11.B03_04_T001_BUKRS AND
		B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_TB_RYEAR = B11.B03_04_TB_RYEAR
	LEFT JOIN 
	(
		SELECT DISTINCT
			B03_04_T001_BUKRS,
			B03_04_TB_RYEAR,
			B03_04_TB_HSL_TOT_MOV		AS ZF_TB_HSL_NET_INCOME_TOT_MOV,
			B03_04_TB_HSL_TOT_MOV_CUC	AS ZF_TB_HSL_NET_INCOME_TOT_MOV_CUC,
			B03_04_TB_KSL_TOT_MOV		AS ZF_TB_KSL_NET_INCOME_TOT_MOV,
			B03_04_ZF_TB_HSL_TOT_END		AS ZF_TB_HSL_NET_INCOME_TOT_END,
			B03_04_ZF_TB_HSL_TOT_END_CUC	AS ZF_TB_HSL_NET_INCOME_TOT_END_CUC,
			B03_04_ZF_TB_KSL_TOT_END		AS ZF_TB_KSL_NET_INCOME_TOT_END,
			LAG(B03_04_TB_HSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_NET_INCOME_TOT_MOV_PREV,
			LAG(B03_04_TB_HSL_TOT_MOV_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_NET_INCOME_TOT_MOV_CUC_PREV,
			LAG(B03_04_TB_KSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_NET_INCOME_TOT_MOV_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_NET_INCOME_TOT_END_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_NET_INCOME_TOT_END_CUC_PREV,
			LAG(B03_04_ZF_TB_KSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_NET_INCOME_TOT_END_PREV
		FROM B03_SS02_02B_TT_TB_CATEGORY_LV1_GROUPED
		WHERE [Compound category level 1] = 'Net income'
	) B12
	ON B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_T001_BUKRS = B12.B03_04_T001_BUKRS AND
		B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_TB_RYEAR = B12.B03_04_TB_RYEAR
	LEFT JOIN 
	(
		SELECT DISTINCT
			B03_04_T001_BUKRS,
			B03_04_TB_RYEAR,
			B03_04_TB_HSL_TOT_MOV		AS ZF_TB_HSL_CURRENT_ASSETS_TOT_MOV,
			B03_04_TB_HSL_TOT_MOV_CUC	AS ZF_TB_HSL_CURRENT_ASSETS_TOT_MOV_CUC,
			B03_04_TB_KSL_TOT_MOV		AS ZF_TB_KSL_CURRENT_ASSETS_TOT_MOV,
			B03_04_ZF_TB_HSL_TOT_END		AS ZF_TB_HSL_CURRENT_ASSETS_TOT_END,
			B03_04_ZF_TB_HSL_TOT_END_CUC	AS ZF_TB_HSL_CURRENT_ASSETS_TOT_END_CUC,
			B03_04_ZF_TB_KSL_TOT_END		AS ZF_TB_KSL_CURRENT_ASSETS_TOT_END,
			LAG(B03_04_TB_HSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_CURRENT_ASSETS_TOT_MOV_PREV,
			LAG(B03_04_TB_HSL_TOT_MOV_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_CURRENT_ASSETS_TOT_MOV_CUC_PREV,
			LAG(B03_04_TB_KSL_TOT_MOV)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_CURRENT_ASSETS_TOT_MOV_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_CURRENT_ASSETS_TOT_END_PREV,
			LAG(B03_04_ZF_TB_HSL_TOT_END_CUC)	OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_HSL_CURRENT_ASSETS_TOT_END_CUC_PREV,
			LAG(B03_04_ZF_TB_KSL_TOT_END)		OVER (PARTITION BY B03_04_T001_BUKRS ORDER BY B03_04_T001_BUKRS, B03_04_TB_RYEAR)		AS ZF_TB_KSL_CURRENT_ASSETS_TOT_END_PREV
		FROM B03_SS02_02C_TT_TB_CATEGORY_LV2_GROUPED
		WHERE [Compound category level 2] = 'Current assets'
	) B13
	ON B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_T001_BUKRS = B13.B03_04_T001_BUKRS AND
		B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES.B03_04_TB_RYEAR = B13.B03_04_TB_RYEAR

SELECT * FROM B03_SS02_03A_IT_CATEGORIES_MOV_BAL_PER_BUKRS_RYEAR
-- Step 3.2: Group by based on fiscal year only as for SPE we need to see it as a whole instead of individual company codes

	EXEC SP_DROPTABLE 'B03_SS02_03B_IT_CATEGORIES_MOV_BAL_PER_RYEAR'

	SELECT
		B03_04_TB_RYEAR AS B03_04_TB_RYEAR,
		SUM(ZF_TB_HSL_SALES_TOT_MOV) AS ZF_TB_HSL_SALES_TOT_MOV,
		SUM(ZF_TB_HSL_SALES_TOT_MOV_CUC) AS ZF_TB_HSL_SALES_TOT_MOV_CUC,
		SUM(ZF_TB_KSL_SALES_TOT_MOV) AS ZF_TB_KSL_SALES_TOT_MOV,
		SUM(ZF_TB_HSL_SALES_TOT_END) AS ZF_TB_HSL_SALES_TOT_END,
		SUM(ZF_TB_HSL_SALES_TOT_END_CUC) AS ZF_TB_HSL_SALES_TOT_END_CUC,
		SUM(ZF_TB_KSL_SALES_TOT_END) AS ZF_TB_KSL_SALES_TOT_END,
		SUM(ZF_TB_HSL_SALES_TOT_MOV_PREV) AS ZF_TB_HSL_SALES_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_SALES_TOT_MOV_CUC_PREV) AS ZF_TB_HSL_SALES_TOT_MOV_CUC_PREV,
		SUM(ZF_TB_KSL_SALES_TOT_MOV_PREV) AS ZF_TB_KSL_SALES_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_SALES_TOT_END_PREV) AS ZF_TB_HSL_SALES_TOT_END_PREV,
		SUM(ZF_TB_HSL_SALES_TOT_END_CUC_PREV) AS ZF_TB_HSL_SALES_TOT_END_CUC_PREV,
		SUM(ZF_TB_KSL_SALES_TOT_END_PREV) AS ZF_TB_KSL_SALES_TOT_END_PREV,
		SUM(ZF_TB_HSL_RECEIVABLES_TOT_MOV) AS ZF_TB_HSL_RECEIVABLES_TOT_MOV,
		SUM(ZF_TB_HSL_RECEIVABLES_TOT_MOV_CUC) AS ZF_TB_HSL_RECEIVABLES_TOT_MOV_CUC,
		SUM(ZF_TB_KSL_RECEIVABLES_TOT_MOV) AS ZF_TB_KSL_RECEIVABLES_TOT_MOV,
		SUM(ZF_TB_HSL_RECEIVABLES_TOT_END) AS ZF_TB_HSL_RECEIVABLES_TOT_END,
		SUM(ZF_TB_HSL_RECEIVABLES_TOT_END_CUC) AS ZF_TB_HSL_RECEIVABLES_TOT_END_CUC,
		SUM(ZF_TB_KSL_RECEIVABLES_TOT_END) AS ZF_TB_KSL_RECEIVABLES_TOT_END,
		SUM(ZF_TB_HSL_RECEIVABLES_TOT_MOV_PREV) AS ZF_TB_HSL_RECEIVABLES_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_RECEIVABLES_TOT_MOV_CUC_PREV) AS ZF_TB_HSL_RECEIVABLES_TOT_MOV_CUC_PREV,
		SUM(ZF_TB_KSL_RECEIVABLES_TOT_MOV_PREV) AS ZF_TB_KSL_RECEIVABLES_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_RECEIVABLES_TOT_END_PREV) AS ZF_TB_HSL_RECEIVABLES_TOT_END_PREV,
		SUM(ZF_TB_HSL_RECEIVABLES_TOT_END_CUC_PREV) AS ZF_TB_HSL_RECEIVABLES_TOT_END_CUC_PREV,
		SUM(ZF_TB_KSL_RECEIVABLES_TOT_END_PREV) AS ZF_TB_KSL_RECEIVABLES_TOT_END_PREV,
		SUM(ZF_TB_HSL_COGS_TOT_MOV) AS ZF_TB_HSL_COGS_TOT_MOV,
		SUM(ZF_TB_HSL_COGS_TOT_MOV_CUC) AS ZF_TB_HSL_COGS_TOT_MOV_CUC,
		SUM(ZF_TB_KSL_COGS_TOT_MOV) AS ZF_TB_KSL_COGS_TOT_MOV,
		SUM(ZF_TB_HSL_COGS_TOT_END) AS ZF_TB_HSL_COGS_TOT_END,
		SUM(ZF_TB_HSL_COGS_TOT_END_CUC) AS ZF_TB_HSL_COGS_TOT_END_CUC,
		SUM(ZF_TB_KSL_COGS_TOT_END) AS ZF_TB_KSL_COGS_TOT_END,
		SUM(ZF_TB_HSL_COGS_TOT_MOV_PREV) AS ZF_TB_HSL_COGS_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_COGS_TOT_MOV_CUC_PREV) AS ZF_TB_HSL_COGS_TOT_MOV_CUC_PREV,
		SUM(ZF_TB_KSL_COGS_TOT_MOV_PREV) AS ZF_TB_KSL_COGS_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_COGS_TOT_END_PREV) AS ZF_TB_HSL_COGS_TOT_END_PREV,
		SUM(ZF_TB_HSL_COGS_TOT_END_CUC_PREV) AS ZF_TB_HSL_COGS_TOT_END_CUC_PREV,
		SUM(ZF_TB_KSL_COGS_TOT_END_PREV) AS ZF_TB_KSL_COGS_TOT_END_PREV,
		SUM(ZF_TB_HSL_SGAEXP_TOT_MOV) AS ZF_TB_HSL_SGAEXP_TOT_MOV,
		SUM(ZF_TB_HSL_SGAEXP_TOT_MOV_CUC) AS ZF_TB_HSL_SGAEXP_TOT_MOV_CUC,
		SUM(ZF_TB_KSL_SGAEXP_TOT_MOV) AS ZF_TB_KSL_SGAEXP_TOT_MOV,
		SUM(ZF_TB_HSL_SGAEXP_TOT_END) AS ZF_TB_HSL_SGAEXP_TOT_END,
		SUM(ZF_TB_HSL_SGAEXP_TOT_END_CUC) AS ZF_TB_HSL_SGAEXP_TOT_END_CUC,
		SUM(ZF_TB_KSL_SGAEXP_TOT_END) AS ZF_TB_KSL_SGAEXP_TOT_END,
		SUM(ZF_TB_HSL_SGAEXP_TOT_MOV_PREV) AS ZF_TB_HSL_SGAEXP_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_SGAEXP_TOT_MOV_CUC_PREV) AS ZF_TB_HSL_SGAEXP_TOT_MOV_CUC_PREV,
		SUM(ZF_TB_KSL_SGAEXP_TOT_MOV_PREV) AS ZF_TB_KSL_SGAEXP_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_SGAEXP_TOT_END_PREV) AS ZF_TB_HSL_SGAEXP_TOT_END_PREV,
		SUM(ZF_TB_HSL_SGAEXP_TOT_END_CUC_PREV) AS ZF_TB_HSL_SGAEXP_TOT_END_CUC_PREV,
		SUM(ZF_TB_KSL_SGAEXP_TOT_END_PREV) AS ZF_TB_KSL_SGAEXP_TOT_END_PREV,
		SUM(ZF_TB_HSL_PPE_TOT_MOV) AS ZF_TB_HSL_PPE_TOT_MOV,
		SUM(ZF_TB_HSL_PPE_TOT_MOV_CUC) AS ZF_TB_HSL_PPE_TOT_MOV_CUC,
		SUM(ZF_TB_KSL_PPE_TOT_MOV) AS ZF_TB_KSL_PPE_TOT_MOV,
		SUM(ZF_TB_HSL_PPE_TOT_END) AS ZF_TB_HSL_PPE_TOT_END,
		SUM(ZF_TB_HSL_PPE_TOT_END_CUC) AS ZF_TB_HSL_PPE_TOT_END_CUC,
		SUM(ZF_TB_KSL_PPE_TOT_END) AS ZF_TB_KSL_PPE_TOT_END,
		SUM(ZF_TB_HSL_PPE_TOT_MOV_PREV) AS ZF_TB_HSL_PPE_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_PPE_TOT_MOV_CUC_PREV) AS ZF_TB_HSL_PPE_TOT_MOV_CUC_PREV,
		SUM(ZF_TB_KSL_PPE_TOT_MOV_PREV) AS ZF_TB_KSL_PPE_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_PPE_TOT_END_PREV) AS ZF_TB_HSL_PPE_TOT_END_PREV,
		SUM(ZF_TB_HSL_PPE_TOT_END_CUC_PREV) AS ZF_TB_HSL_PPE_TOT_END_CUC_PREV,
		SUM(ZF_TB_KSL_PPE_TOT_END_PREV) AS ZF_TB_KSL_PPE_TOT_END_PREV,
		SUM(ZF_TB_HSL_DEPRECIATION_TOT_MOV) AS ZF_TB_HSL_DEPRECIATION_TOT_MOV,
		SUM(ZF_TB_HSL_DEPRECIATION_TOT_MOV_CUC) AS ZF_TB_HSL_DEPRECIATION_TOT_MOV_CUC,
		SUM(ZF_TB_KSL_DEPRECIATION_TOT_MOV) AS ZF_TB_KSL_DEPRECIATION_TOT_MOV,
		SUM(ZF_TB_HSL_DEPRECIATION_TOT_END) AS ZF_TB_HSL_DEPRECIATION_TOT_END,
		SUM(ZF_TB_HSL_DEPRECIATION_TOT_END_CUC) AS ZF_TB_HSL_DEPRECIATION_TOT_END_CUC,
		SUM(ZF_TB_KSL_DEPRECIATION_TOT_END) AS ZF_TB_KSL_DEPRECIATION_TOT_END,
		SUM(ZF_TB_HSL_DEPRECIATION_TOT_MOV_PREV) AS ZF_TB_HSL_DEPRECIATION_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_DEPRECIATION_TOT_MOV_CUC_PREV) AS ZF_TB_HSL_DEPRECIATION_TOT_MOV_CUC_PREV,
		SUM(ZF_TB_KSL_DEPRECIATION_TOT_MOV_PREV) AS ZF_TB_KSL_DEPRECIATION_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_DEPRECIATION_TOT_END_PREV) AS ZF_TB_HSL_DEPRECIATION_TOT_END_PREV,
		SUM(ZF_TB_HSL_DEPRECIATION_TOT_END_CUC_PREV) AS ZF_TB_HSL_DEPRECIATION_TOT_END_CUC_PREV,
		SUM(ZF_TB_KSL_DEPRECIATION_TOT_END_PREV) AS ZF_TB_KSL_DEPRECIATION_TOT_END_PREV,
		SUM(ZF_TB_HSL_ACCR_OPEXPENSE_TOT_MOV) AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_MOV,
		SUM(ZF_TB_HSL_ACCR_OPEXPENSE_TOT_MOV_CUC) AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_MOV_CUC,
		SUM(ZF_TB_KSL_ACCR_OPEXPENSE_TOT_MOV) AS ZF_TB_KSL_ACCR_OPEXPENSE_TOT_MOV,
		SUM(ZF_TB_HSL_ACCR_OPEXPENSE_TOT_END) AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_END,
		SUM(ZF_TB_HSL_ACCR_OPEXPENSE_TOT_END_CUC) AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_END_CUC,
		SUM(ZF_TB_KSL_ACCR_OPEXPENSE_TOT_END) AS ZF_TB_KSL_ACCR_OPEXPENSE_TOT_END,
		SUM(ZF_TB_HSL_ACCR_OPEXPENSE_TOT_MOV_PREV) AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_ACCR_OPEXPENSE_TOT_MOV_CUC_PREV) AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_MOV_CUC_PREV,
		SUM(ZF_TB_KSL_ACCR_OPEXPENSE_TOT_MOV_PREV) AS ZF_TB_KSL_ACCR_OPEXPENSE_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_ACCR_OPEXPENSE_TOT_END_PREV) AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_END_PREV,
		SUM(ZF_TB_HSL_ACCR_OPEXPENSE_TOT_END_CUC_PREV) AS ZF_TB_HSL_ACCR_OPEXPENSE_TOT_END_CUC_PREV,
		SUM(ZF_TB_KSL_ACCR_OPEXPENSE_TOT_END_PREV) AS ZF_TB_KSL_ACCR_OPEXPENSE_TOT_END_PREV,
		SUM(ZF_TB_HSL_PAYABLES_TOT_MOV) AS ZF_TB_HSL_PAYABLES_TOT_MOV,
		SUM(ZF_TB_HSL_PAYABLES_TOT_MOV_CUC) AS ZF_TB_HSL_PAYABLES_TOT_MOV_CUC,
		SUM(ZF_TB_KSL_PAYABLES_TOT_MOV) AS ZF_TB_KSL_PAYABLES_TOT_MOV,
		SUM(ZF_TB_HSL_PAYABLES_TOT_END) AS ZF_TB_HSL_PAYABLES_TOT_END,
		SUM(ZF_TB_HSL_PAYABLES_TOT_END_CUC) AS ZF_TB_HSL_PAYABLES_TOT_END_CUC,
		SUM(ZF_TB_KSL_PAYABLES_TOT_END) AS ZF_TB_KSL_PAYABLES_TOT_END,
		SUM(ZF_TB_HSL_PAYABLES_TOT_MOV_PREV) AS ZF_TB_HSL_PAYABLES_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_PAYABLES_TOT_MOV_CUC_PREV) AS ZF_TB_HSL_PAYABLES_TOT_MOV_CUC_PREV,
		SUM(ZF_TB_KSL_PAYABLES_TOT_MOV_PREV) AS ZF_TB_KSL_PAYABLES_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_PAYABLES_TOT_END_PREV) AS ZF_TB_HSL_PAYABLES_TOT_END_PREV,
		SUM(ZF_TB_HSL_PAYABLES_TOT_END_CUC_PREV) AS ZF_TB_HSL_PAYABLES_TOT_END_CUC_PREV,
		SUM(ZF_TB_KSL_PAYABLES_TOT_END_PREV) AS ZF_TB_KSL_PAYABLES_TOT_END_PREV,
		SUM(ZF_TB_HSL_DEBT_TOT_MOV) AS ZF_TB_HSL_DEBT_TOT_MOV,
		SUM(ZF_TB_HSL_DEBT_TOT_MOV_CUC) AS ZF_TB_HSL_DEBT_TOT_MOV_CUC,
		SUM(ZF_TB_KSL_DEBT_TOT_MOV) AS ZF_TB_KSL_DEBT_TOT_MOV,
		SUM(ZF_TB_HSL_DEBT_TOT_END) AS ZF_TB_HSL_DEBT_TOT_END,
		SUM(ZF_TB_HSL_DEBT_TOT_END_CUC) AS ZF_TB_HSL_DEBT_TOT_END_CUC,
		SUM(ZF_TB_KSL_DEBT_TOT_END) AS ZF_TB_KSL_DEBT_TOT_END,
		SUM(ZF_TB_HSL_DEBT_TOT_MOV_PREV) AS ZF_TB_HSL_DEBT_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_DEBT_TOT_MOV_CUC_PREV) AS ZF_TB_HSL_DEBT_TOT_MOV_CUC_PREV,
		SUM(ZF_TB_KSL_DEBT_TOT_MOV_PREV) AS ZF_TB_KSL_DEBT_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_DEBT_TOT_END_PREV) AS ZF_TB_HSL_DEBT_TOT_END_PREV,
		SUM(ZF_TB_HSL_DEBT_TOT_END_CUC_PREV) AS ZF_TB_HSL_DEBT_TOT_END_CUC_PREV,
		SUM(ZF_TB_KSL_DEBT_TOT_END_PREV) AS ZF_TB_KSL_DEBT_TOT_END_PREV,
		SUM(ZF_TB_HSL_GRIR_TOT_MOV) AS ZF_TB_HSL_GRIR_TOT_MOV,
		SUM(ZF_TB_HSL_GRIR_TOT_MOV_CUC) AS ZF_TB_HSL_GRIR_TOT_MOV_CUC,
		SUM(ZF_TB_KSL_GRIR_TOT_MOV) AS ZF_TB_KSL_GRIR_TOT_MOV,
		SUM(ZF_TB_HSL_GRIR_TOT_END) AS ZF_TB_HSL_GRIR_TOT_END,
		SUM(ZF_TB_HSL_GRIR_TOT_END_CUC) AS ZF_TB_HSL_GRIR_TOT_END_CUC,
		SUM(ZF_TB_KSL_GRIR_TOT_END) AS ZF_TB_KSL_GRIR_TOT_END,
		SUM(ZF_TB_HSL_GRIR_TOT_MOV_PREV) AS ZF_TB_HSL_GRIR_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_GRIR_TOT_MOV_CUC_PREV) AS ZF_TB_HSL_GRIR_TOT_MOV_CUC_PREV,
		SUM(ZF_TB_KSL_GRIR_TOT_MOV_PREV) AS ZF_TB_KSL_GRIR_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_GRIR_TOT_END_PREV) AS ZF_TB_HSL_GRIR_TOT_END_PREV,
		SUM(ZF_TB_HSL_GRIR_TOT_END_CUC_PREV) AS ZF_TB_HSL_GRIR_TOT_END_CUC_PREV,
		SUM(ZF_TB_KSL_GRIR_TOT_END_PREV) AS ZF_TB_KSL_GRIR_TOT_END_PREV,
		SUM(ZF_TB_HSL_TOTAL_ASSETS_TOT_MOV) AS ZF_TB_HSL_TOTAL_ASSETS_TOT_MOV,
		SUM(ZF_TB_HSL_TOTAL_ASSETS_TOT_MOV_CUC) AS ZF_TB_HSL_TOTAL_ASSETS_TOT_MOV_CUC,
		SUM(ZF_TB_KSL_TOTAL_ASSETS_TOT_MOV) AS ZF_TB_KSL_TOTAL_ASSETS_TOT_MOV,
		SUM(ZF_TB_HSL_TOTAL_ASSETS_TOT_END) AS ZF_TB_HSL_TOTAL_ASSETS_TOT_END,
		SUM(ZF_TB_HSL_TOTAL_ASSETS_TOT_END_CUC) AS ZF_TB_HSL_TOTAL_ASSETS_TOT_END_CUC,
		SUM(ZF_TB_KSL_TOTAL_ASSETS_TOT_END) AS ZF_TB_KSL_TOTAL_ASSETS_TOT_END,
		SUM(ZF_TB_HSL_TOTAL_ASSETS_TOT_MOV_PREV) AS ZF_TB_HSL_TOTAL_ASSETS_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_TOTAL_ASSETS_TOT_MOV_CUC_PREV) AS ZF_TB_HSL_TOTAL_ASSETS_TOT_MOV_CUC_PREV,
		SUM(ZF_TB_KSL_TOTAL_ASSETS_TOT_MOV_PREV) AS ZF_TB_KSL_TOTAL_ASSETS_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_TOTAL_ASSETS_TOT_END_PREV) AS ZF_TB_HSL_TOTAL_ASSETS_TOT_END_PREV,
		SUM(ZF_TB_HSL_TOTAL_ASSETS_TOT_END_CUC_PREV) AS ZF_TB_HSL_TOTAL_ASSETS_TOT_END_CUC_PREV,
		SUM(ZF_TB_KSL_TOTAL_ASSETS_TOT_END_PREV) AS ZF_TB_KSL_TOTAL_ASSETS_TOT_END_PREV,
		SUM(ZF_TB_HSL_NET_INCOME_TOT_MOV) AS ZF_TB_HSL_NET_INCOME_TOT_MOV,
		SUM(ZF_TB_HSL_NET_INCOME_TOT_MOV_CUC) AS ZF_TB_HSL_NET_INCOME_TOT_MOV_CUC,
		SUM(ZF_TB_KSL_NET_INCOME_TOT_MOV) AS ZF_TB_KSL_NET_INCOME_TOT_MOV,
		SUM(ZF_TB_HSL_NET_INCOME_TOT_END) AS ZF_TB_HSL_NET_INCOME_TOT_END,
		SUM(ZF_TB_HSL_NET_INCOME_TOT_END_CUC) AS ZF_TB_HSL_NET_INCOME_TOT_END_CUC,
		SUM(ZF_TB_KSL_NET_INCOME_TOT_END) AS ZF_TB_KSL_NET_INCOME_TOT_END,
		SUM(ZF_TB_HSL_NET_INCOME_TOT_MOV_PREV) AS ZF_TB_HSL_NET_INCOME_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_NET_INCOME_TOT_MOV_CUC_PREV) AS ZF_TB_HSL_NET_INCOME_TOT_MOV_CUC_PREV,
		SUM(ZF_TB_KSL_NET_INCOME_TOT_MOV_PREV) AS ZF_TB_KSL_NET_INCOME_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_NET_INCOME_TOT_END_PREV) AS ZF_TB_HSL_NET_INCOME_TOT_END_PREV,
		SUM(ZF_TB_HSL_NET_INCOME_TOT_END_CUC_PREV) AS ZF_TB_HSL_NET_INCOME_TOT_END_CUC_PREV,
		SUM(ZF_TB_KSL_NET_INCOME_TOT_END_PREV) AS ZF_TB_KSL_NET_INCOME_TOT_END_PREV,
		SUM(ZF_TB_HSL_CURRENT_ASSETS_TOT_MOV) AS ZF_TB_HSL_CURRENT_ASSETS_TOT_MOV,
		SUM(ZF_TB_HSL_CURRENT_ASSETS_TOT_MOV_CUC) AS ZF_TB_HSL_CURRENT_ASSETS_TOT_MOV_CUC,
		SUM(ZF_TB_KSL_CURRENT_ASSETS_TOT_MOV) AS ZF_TB_KSL_CURRENT_ASSETS_TOT_MOV,
		SUM(ZF_TB_HSL_CURRENT_ASSETS_TOT_END) AS ZF_TB_HSL_CURRENT_ASSETS_TOT_END,
		SUM(ZF_TB_HSL_CURRENT_ASSETS_TOT_END_CUC) AS ZF_TB_HSL_CURRENT_ASSETS_TOT_END_CUC,
		SUM(ZF_TB_KSL_CURRENT_ASSETS_TOT_END) AS ZF_TB_KSL_CURRENT_ASSETS_TOT_END,
		SUM(ZF_TB_HSL_CURRENT_ASSETS_TOT_MOV_PREV) AS ZF_TB_HSL_CURRENT_ASSETS_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_CURRENT_ASSETS_TOT_MOV_CUC_PREV) AS ZF_TB_HSL_CURRENT_ASSETS_TOT_MOV_CUC_PREV,
		SUM(ZF_TB_KSL_CURRENT_ASSETS_TOT_MOV_PREV) AS ZF_TB_KSL_CURRENT_ASSETS_TOT_MOV_PREV,
		SUM(ZF_TB_HSL_CURRENT_ASSETS_TOT_END_PREV) AS ZF_TB_HSL_CURRENT_ASSETS_TOT_END_PREV,
		SUM(ZF_TB_HSL_CURRENT_ASSETS_TOT_END_CUC_PREV) AS ZF_TB_HSL_CURRENT_ASSETS_TOT_END_CUC_PREV,
		SUM(ZF_TB_KSL_CURRENT_ASSETS_TOT_END_PREV) AS ZF_TB_KSL_CURRENT_ASSETS_TOT_END_PREV
	INTO B03_SS02_03B_IT_CATEGORIES_MOV_BAL_PER_RYEAR
	FROM B03_SS02_03A_IT_CATEGORIES_MOV_BAL_PER_BUKRS_RYEAR
	GROUP BY B03_04_TB_RYEAR

-- Step 4: Alter table B03_SS02_03_IT_CATEGORIES_MOV_BAL_MSCORE and B03_SS02_03B_IT_CATEGORIES_MOV_BAL_PER_RYEAR to calculate M-scores

	EXEC SP_CALCULATE_MSCORE 'B03_SS02_03A_IT_CATEGORIES_MOV_BAL_PER_BUKRS_RYEAR'
	EXEC SP_CALCULATE_MSCORE 'B03_SS02_03B_IT_CATEGORIES_MOV_BAL_PER_RYEAR'

-- Step 4: Add a table to rank the impact of variables on the M-score
-- Step 4.1: -- Extract distinct values for different variables from the table B03_SS02_03A_IT_CATEGORIES_MOV_BAL_PER_BUKRS_RYEAR related to ZF_MSCORE and store them in a new table.


	EXEC SP_DROPTABLE 'B03_SS02_04A_TT_VAL_VALUES_BUKRS_RYEAR'

	SELECT DISTINCT
		B03_04_T001_BUKRS, -- Company code
		B03_04_TB_RYEAR, -- Fiscal year
		ZF_MSCORE, -- M-score of the company code in the year
		'DSR' AS ZF_MSCORE_VAL, -- Text to identify the variable of which the value is for
		ZF_MSCORE_VAL_DSR AS ZF_MSCORE_VAL_VALUE, -- Value of the variable 
		0.920*ZF_MSCORE_VAL_DSR AS ZF_MSCORE_VAL_MULTIPLY_SLOPE
	INTO B03_SS02_04A_TT_VAL_VALUES_BUKRS_RYEAR
	FROM B03_SS02_03A_IT_CATEGORIES_MOV_BAL_PER_BUKRS_RYEAR
	UNION ALL
	SELECT DISTINCT
		B03_04_T001_BUKRS,
		B03_04_TB_RYEAR,
		ZF_MSCORE,
		'GMI' AS ZF_MSCORE_VAL,
		ZF_MSCORE_VAL_GMI AS ZF_MSCORE_VAL_VALUE,
		0.528*ZF_MSCORE_VAL_GMI AS ZF_MSCORE_VAL_MULTIPLY_SLOPE
	FROM B03_SS02_03A_IT_CATEGORIES_MOV_BAL_PER_BUKRS_RYEAR
	UNION ALL
	SELECT DISTINCT
		B03_04_T001_BUKRS,
		B03_04_TB_RYEAR,
		ZF_MSCORE,
		'AQI' AS ZF_MSCORE_VAL,
		ZF_MSCORE_VAL_AQI AS ZF_MSCORE_VAL_VALUE,
		0.404*ZF_MSCORE_VAL_AQI AS ZF_MSCORE_VAL_MULTIPLY_SLOPE
	FROM B03_SS02_03A_IT_CATEGORIES_MOV_BAL_PER_BUKRS_RYEAR
	UNION ALL
	SELECT DISTINCT
		B03_04_T001_BUKRS,
		B03_04_TB_RYEAR,
		ZF_MSCORE,
		'SGI' AS ZF_MSCORE_VAL,
		ZF_MSCORE_VAL_SGI AS ZF_MSCORE_VAL_VALUE,
		0.892*ZF_MSCORE_VAL_SGI AS ZF_MSCORE_VAL_MULTIPLY_SLOPE
	FROM B03_SS02_03A_IT_CATEGORIES_MOV_BAL_PER_BUKRS_RYEAR
	UNION ALL
	SELECT DISTINCT
		B03_04_T001_BUKRS,
		B03_04_TB_RYEAR,
		ZF_MSCORE,
		'DEPI' AS ZF_MSCORE_VAL,
		ZF_MSCORE_VAL_DEPI AS ZF_MSCORE_VAL_VALUE,
		0.115*ZF_MSCORE_VAL_DEPI AS ZF_MSCORE_VAL_MULTIPLY_SLOPE
	FROM B03_SS02_03A_IT_CATEGORIES_MOV_BAL_PER_BUKRS_RYEAR
	UNION ALL
	SELECT DISTINCT
		B03_04_T001_BUKRS,
		B03_04_TB_RYEAR,
		ZF_MSCORE,
		'SGAI' AS ZF_MSCORE_VAL,
		ZF_MSCORE_VAL_SGAI AS ZF_MSCORE_VAL_VALUE,
		0.172*ZF_MSCORE_VAL_SGAI AS ZF_MSCORE_VAL_MULTIPLY_SLOPE
	FROM B03_SS02_03A_IT_CATEGORIES_MOV_BAL_PER_BUKRS_RYEAR
	UNION ALL
	SELECT DISTINCT
		B03_04_T001_BUKRS,
		B03_04_TB_RYEAR,
		ZF_MSCORE,
		'Accruals' AS ZF_MSCORE_VAL,
		ZF_MSCORE_VAL_ACCRUALS AS ZF_MSCORE_VAL_VALUE,
		4.679*ZF_MSCORE_VAL_ACCRUALS AS ZF_MSCORE_VAL_MULTIPLY_SLOPE
	FROM B03_SS02_03A_IT_CATEGORIES_MOV_BAL_PER_BUKRS_RYEAR
	UNION ALL
	SELECT DISTINCT
		B03_04_T001_BUKRS,
		B03_04_TB_RYEAR,
		ZF_MSCORE,
		'LEVI' AS ZF_MSCORE_VAL,
		ZF_MSCORE_VAL_LEVI AS ZF_MSCORE_VAL_VALUE,
		0.327*ZF_MSCORE_VAL_LEVI AS ZF_MSCORE_VAL_MULTIPLY_SLOPE
	FROM B03_SS02_03A_IT_CATEGORIES_MOV_BAL_PER_BUKRS_RYEAR


-- Step 4.2: -- Extract distinct values for different variables from the table B03_SS02_03B_IT_CATEGORIES_MOV_BAL_PER_RYEAR related to ZF_MSCORE and store them in a new table.

	EXEC SP_DROPTABLE 'B03_SS02_04B_TT_VAL_VALUES_RYEAR'

	SELECT DISTINCT
		B03_04_TB_RYEAR, -- Fiscal year
		ZF_MSCORE, -- M-score of the company code in the year
		'DSR' AS ZF_MSCORE_VAL, -- Text to identify the variable of which the value is for
		ZF_MSCORE_VAL_DSR AS ZF_MSCORE_VAL_VALUE, -- Value of the variable 
		0.920*ZF_MSCORE_VAL_DSR AS ZF_MSCORE_VAL_MULTIPLY_SLOPE
	INTO B03_SS02_04B_TT_VAL_VALUES_RYEAR
	FROM B03_SS02_03B_IT_CATEGORIES_MOV_BAL_PER_RYEAR
	UNION ALL
	SELECT DISTINCT
		B03_04_TB_RYEAR,
		ZF_MSCORE,
		'GMI' AS ZF_MSCORE_VAL,
		ZF_MSCORE_VAL_GMI AS ZF_MSCORE_VAL_VALUE,
		0.528*ZF_MSCORE_VAL_GMI AS ZF_MSCORE_VAL_MULTIPLY_SLOPE
	FROM B03_SS02_03B_IT_CATEGORIES_MOV_BAL_PER_RYEAR
	UNION ALL
	SELECT DISTINCT
		B03_04_TB_RYEAR,
		ZF_MSCORE,
		'AQI' AS ZF_MSCORE_VAL,
		ZF_MSCORE_VAL_AQI AS ZF_MSCORE_VAL_VALUE,
		0.404*ZF_MSCORE_VAL_AQI AS ZF_MSCORE_VAL_MULTIPLY_SLOPE
	FROM B03_SS02_03B_IT_CATEGORIES_MOV_BAL_PER_RYEAR
	UNION ALL
	SELECT DISTINCT
		B03_04_TB_RYEAR,
		ZF_MSCORE,
		'SGI' AS ZF_MSCORE_VAL,
		ZF_MSCORE_VAL_SGI AS ZF_MSCORE_VAL_VALUE,
		0.892*ZF_MSCORE_VAL_SGI AS ZF_MSCORE_VAL_MULTIPLY_SLOPE
	FROM B03_SS02_03B_IT_CATEGORIES_MOV_BAL_PER_RYEAR
	UNION ALL
	SELECT DISTINCT
		B03_04_TB_RYEAR,
		ZF_MSCORE,
		'DEPI' AS ZF_MSCORE_VAL,
		ZF_MSCORE_VAL_DEPI AS ZF_MSCORE_VAL_VALUE,
		0.115*ZF_MSCORE_VAL_DEPI AS ZF_MSCORE_VAL_MULTIPLY_SLOPE
	FROM B03_SS02_03B_IT_CATEGORIES_MOV_BAL_PER_RYEAR
	UNION ALL
	SELECT DISTINCT
		B03_04_TB_RYEAR,
		ZF_MSCORE,
		'SGAI' AS ZF_MSCORE_VAL,
		ZF_MSCORE_VAL_SGAI AS ZF_MSCORE_VAL_VALUE,
		0.172*ZF_MSCORE_VAL_SGAI AS ZF_MSCORE_VAL_MULTIPLY_SLOPE
	FROM B03_SS02_03B_IT_CATEGORIES_MOV_BAL_PER_RYEAR
	UNION ALL
	SELECT DISTINCT
		B03_04_TB_RYEAR,
		ZF_MSCORE,
		'Accruals' AS ZF_MSCORE_VAL,
		ZF_MSCORE_VAL_ACCRUALS AS ZF_MSCORE_VAL_VALUE,
		4.679*ZF_MSCORE_VAL_ACCRUALS AS ZF_MSCORE_VAL_MULTIPLY_SLOPE
	FROM B03_SS02_03B_IT_CATEGORIES_MOV_BAL_PER_RYEAR
	UNION ALL
	SELECT DISTINCT
		B03_04_TB_RYEAR,
		ZF_MSCORE,
		'LEVI' AS ZF_MSCORE_VAL,
		ZF_MSCORE_VAL_LEVI AS ZF_MSCORE_VAL_VALUE,
		0.327*ZF_MSCORE_VAL_LEVI AS ZF_MSCORE_VAL_MULTIPLY_SLOPE
	FROM B03_SS02_03B_IT_CATEGORIES_MOV_BAL_PER_RYEAR

-- Step 5: Add rankings of the impact of variables on M-score using DENSE_RANK
-- Step 5.1: Add rankings of the impact of variables on M-score using DENSE_RANK: TABLE 

	EXEC SP_DROPTABLE 'B03_SS02_05A_IT_MSCORE_VAL_IMPACT_BUKRS_RYEAR'
	SELECT
	*,
	DENSE_RANK() OVER(PARTITION BY B03_04_T001_BUKRS, B03_04_TB_RYEAR ORDER BY ZF_MSCORE_VAL_MULTIPLY_SLOPE DESC) AS ZF_RANKING_VAL_IMPACT -- Field to descendingly rank the value of the variable by Company code, fiscal year
	INTO B03_SS02_05A_IT_MSCORE_VAL_IMPACT_BUKRS_RYEAR
	FROM B03_SS02_04A_TT_VAL_VALUES_BUKRS_RYEAR

-- Step 5.2: Add rankings of the impact of variables on M-score using DENSE_RANK: TABLE 

	EXEC SP_DROPTABLE 'B03_SS02_05B_IT_MSCORE_VAL_IMPACT_RYEAR'
	SELECT
	*,
	DENSE_RANK() OVER(PARTITION BY B03_04_TB_RYEAR ORDER BY ZF_MSCORE_VAL_MULTIPLY_SLOPE DESC) AS ZF_RANKING_VAL_IMPACT -- Field to descendingly rank the value of the variable by Company code, fiscal year
	INTO B03_SS02_05B_IT_MSCORE_VAL_IMPACT_RYEAR
	FROM B03_SS02_04B_TT_VAL_VALUES_RYEAR

--/*Drop temporary tables*/

	EXEC SP_REMOVE_TABLES '%_TT_%'

--Rename all the fields_rt

	EXEC SP_UNNAME_FIELD  'B03_04_','B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES'
	EXEC SP_RENAME_FIELD  'B03_SS02_01_','B03_SS02_01_IT_SUMMARY_ADD_CATEGORIES'

	EXEC SP_UNNAME_FIELD  'B03_04_','B03_SS02_03A_IT_CATEGORIES_MOV_BAL_PER_BUKRS_RYEAR'
	EXEC SP_RENAME_FIELD  'B03_SS02_03A_','B03_SS02_03A_IT_CATEGORIES_MOV_BAL_PER_BUKRS_RYEAR'

	EXEC SP_UNNAME_FIELD  'B03_04_','B03_SS02_03B_IT_CATEGORIES_MOV_BAL_PER_RYEAR'
	EXEC SP_RENAME_FIELD  'B03_SS02_03B_','B03_SS02_03B_IT_CATEGORIES_MOV_BAL_PER_RYEAR'

	EXEC SP_UNNAME_FIELD  'B03_04_','B03_SS02_05A_IT_MSCORE_VAL_IMPACT_BUKRS_RYEAR'
	EXEC SP_RENAME_FIELD  'B03_SS02_05A_','B03_SS02_05A_IT_MSCORE_VAL_IMPACT_BUKRS_RYEAR'

	EXEC SP_UNNAME_FIELD  'B03_04_','B03_SS02_05B_IT_MSCORE_VAL_IMPACT_RYEAR'
	EXEC SP_RENAME_FIELD  'B03_SS02_05B_','B03_SS02_05B_IT_MSCORE_VAL_IMPACT_RYEAR'
GO
