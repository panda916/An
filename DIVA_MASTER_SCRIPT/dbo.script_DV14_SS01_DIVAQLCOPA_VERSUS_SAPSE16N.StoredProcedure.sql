USE [DIVA_MASTER_SCRIPT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--CREATE OR ALTER PROCEDURE [DBO].DV14_SS01_DIVAQLCOPA_VERSUS_SAPSE16N
CREATE     PROCEDURE [dbo].[script_DV14_SS01_DIVAQLCOPA_VERSUS_SAPSE16N]
WITH EXECUTE AS CALLER
AS
--DYNAMIC_SCRIPT_START
BEGIN



/* Initiate the log */
--Create database log table if it does not exist
IF OBJECT_ID('LOG_SP_EXECUTION', 'U') IS NULL BEGIN CREATE TABLE [DBO].[LOG_SP_EXECUTION] ([DATABASE] NVARCHAR(MAX) NULL,[OBJECT] NVARCHAR(MAX) NULL,[OBJECT_TYPE] NVARCHAR(MAX) NULL,[USER] NVARCHAR(MAX) NULL,[DATE] DATE NULL,[TIME] TIME NULL,[DESCRIPTION] NVARCHAR(MAX) NULL,[TABLE] NVARCHAR(MAX),[ROWS] INT) END

--Log start of procedure
INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Procedure started',NULL,NULL


/* Initialize parameters from globals table */

     DECLARE
			 @CURRENCY NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'currency')
			,@DATE1 NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'date1')
			,@DATE2 NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'date2')
			,@DOWNLOADDATE NVARCHAR(MAX)		= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'downloaddate')
			,@DATEFORMAT VARCHAR(3)             = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'dateformat')
			,@EXCHANGERATETYPE NVARCHAR(MAX)	= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'exchangeratetype')
			,@LANGUAGE1 NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'language1')
			,@LANGUAGE2 NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'language2')
			,@YEAR NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'year')
			,@ID NVARCHAR(MAX)					= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'id')
			,@LIMIT_RECORDS INT		            = CAST((SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'LIMIT_RECORDS') AS INT)


/*Test mode*/

SET ROWCOUNT @LIMIT_RECORDS

/*Change history comments*/


  /*
  Title:	DV14_QLIK_COPA_OVERVIEW_VS_SAP_SE16N
  Description: Compare the Transaction details table on the COPA dashboard to the COPA table exported from ASAP_SE16N


    --------------------------------------------------------------
    Update history
    --------------------------------------------------------------
    Date		    | Who |	Description
	25-09-2018	     NP    Created

  */


--Step 1
		--Create the xml string contains required fields
		--Convert horizontal fields from sap report ASAP_SE16N to vertical fields
		--Fields  ASAP_SE16N are inner join with AM_COPA_MAPPING fields
		--Format number and values in the ASAP_SE16N reports

EXEC SP_SAP_REPORT_FIELD_TO_STANDARD 'ASAP_SE16N'

EXEC SP_DROPTABLE 'DV14_SS01_01_TT_AM_COPA_MAPPING_SE16N_FIELDS'

SELECT STUFF(
	(SELECT
	N'),('  +  CASE WHEN C.NAME = AM_DV_VALUE_FIELD_MAPPING.VALUES_FIELD_NAME THEN '''' + AM_DV_VALUE_FIELD_MAPPING.VALUES_FIELD_NAME + ''',' + '['+AM_DV_VALUE_FIELD_MAPPING.VALUES_FIELD_NAME+']' ELSE '['+ AM_DV_VALUE_FIELD_MAPPING.VALUES_FIELD_NAME+']'  END
		 FROM  SYS.SYSCOLUMNS C
			JOIN  SYS.SYSOBJECTS O
			ON O.ID=C.ID
			INNER JOIN AM_DV_VALUE_FIELD_MAPPING ON
			C.NAME = AM_DV_VALUE_FIELD_MAPPING.VALUES_FIELD_NAME
				WHERE O.XTYPE='U'
				AND O.NAME= 'ASAP_SE16N'

			ORDER BY C.COLID
			FOR XML PATH('')) ,1,2,'') XML_CONVERTED_FIELD_STRINGS

	INTO DV14_SS01_01_TT_AM_COPA_MAPPING_SE16N_FIELDS






-- Step 2

		-- Generate tables to be displayed in dashboards
		-- The horizontal fields and  its values from ASAP_SE16N are now vertically appended in the same columns named SAP_NAMES,SAP_VALUES
		-- Create DVXX_05_RT_FULL_<SAPXX/DIVASQLXX>


EXEC SP_DROPTABLE 'DV14_SS01_02_RT_FULL_SAPSE16N'

DECLARE @QUERY NVARCHAR(MAX),
 @DV14_SS01_02_RT_FULL_SAPSE16N  NVARCHAR(MAX) = 'DV14_SS01_02_RT_FULL_SAPSE16N',
 @ASAP_SE16N NVARCHAR(50)=N'ASAP_SE16N';

SET @QUERY=N'SELECT DISTINCT PALEDGER, BUKRS,GJAHR ,BELNR PAOBJNR, BUDAT, SAP_NAMES, SAP_VALUES INTO '  +  @DV14_SS01_02_RT_FULL_SAPSE16N +

' FROM ' + @ASAP_SE16N + '
   CROSS APPLY (
      VALUES ' + (
   SELECT  XML_CONVERTED_FIELD_STRINGS
   FROM DV14_SS01_01_TT_AM_COPA_MAPPING_SE16N_FIELDS
   WHERE XML_CONVERTED_FIELD_STRINGS IS NOT NULL
   ) + ')) X (SAP_NAMES,SAP_VALUES)'

   PRINT @QUERY
EXEC SP_EXECUTESQL @QUERY


--Step 3: get the hierarchy ranks

EXEC SP_REMOVE_TABLES 'DV14_SS01_03_TT_FULL_SAPSE16N_HIERARCHY_LEVEL1_UNPIVOTED'

SELECT 
	DISTINCT 
	   [PALEDGER]
	  ,[BUKRS]
      ,[GJAHR]
      ,[PAOBJNR]
      ,[BUDAT]
      ,[SAP_NAMES]
      ,dbo.STRING_TO_NUMBER([SAP_VALUES]) AS [SAP_VALUES]
	  ,COMA_M_HIERARCHY_L1
	  INTO DV14_SS01_03_TT_FULL_SAPSE16N_HIERARCHY_LEVEL1_UNPIVOTED

  FROM [DIVA_TURKEY_DATA_REFRESH].[DBO].[DV14_SS01_02_RT_FULL_SAPSE16N]

  LEFT JOIN AM_COPA_MAPPING ON
  AM_COPA_MAPPING.COMA_BUKRS = [BUKRS] AND
  AM_COPA_MAPPING.COMA_SAP_FIELD = [DV14_SS01_02_RT_FULL_SAPSE16N].SAP_NAMES


-- Step 4: pivoting the table columns accordingly to AM_COPA_MAPPING FIELDS
EXEC SP_REMOVE_TABLES 'DV14_SS01_04_TT_FULL_SAPSE16N_HIERARCHY_LEVEL1_PIVOTED'


		DECLARE @XML_CONVERTED_PIVOTED_VALUE_FIELD_STRINGS NVARCHAR(MAX) = (
		SELECT STUFF( (SELECT DISTINCT
			N',[' +  COMA_M_HIERARCHY_L1 + ']' FROM AM_COPA_MAPPING

		FOR XML PATH (''))  ,1,1,'')  XML_CONVERTED_PIVOTED_VALUE_FIELD_STRINGS )

		

		DECLARE @PIVOTING_QUERY NVARCHAR(MAX)
		SELECT @PIVOTING_QUERY=N' SELECT  *

		INTO DV14_SS01_04_TT_FULL_SAPSE16N_HIERARCHY_LEVEL1_PIVOTED
		FROM DV14_SS01_03_TT_FULL_SAPSE16N_HIERARCHY_LEVEL1_UNPIVOTED


		PIVOT (SUM (SAP_VALUES) FOR COMA_M_HIERARCHY_L1 IN (' +
		@XML_CONVERTED_PIVOTED_VALUE_FIELD_STRINGS + ')) AS SUM_SAP_VALUES'


		EXEC SP_EXECUTESQL @PIVOTING_QUERY
		




-- add the prefix to the field name for copa comparison

--ALTER TABLE DV14_SS01_02_RT_FULL_SAPSE16N ALTER COLUMN SAP_NAMES VARCHAR(100);

--UPDATE DV14_SS01_02_RT_FULL_SAPSE16N SET SAP_NAMES = SAP_NAMES


/*Rename fields for Qlik*/

--EXEC SP_RENAME_FIELD 'XXXXSCRIPTNUMBERXXXX_', 'XXXXSCRIPTNUMBERXXXX_XXXXTABLE_NUMBERXXXX_IT_XXXXSAP_TECHNICAL_NAMEXXXX_XXXXDESCRIPTIONXXXX'



/*Remove temporary tables*/




--INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
--SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Cube completed','XXXXSCRIPTNUMBERXXXX_XXXXTABLE_NUMBERXXXX_IT_XXXXSAP_TECHNICAL_NAMEXXXX_XXXXDESCRIPTIONXXXX',(SELECT COUNT(*) FROM XXXXSCRIPTNUMBERXXXX_XXXXTABLE_NUMBERXXXX_IT_XXXXSAP_TECHNICAL_NAMEXXXX_XXXXDESCRIPTIONXXXX)


--/* log end of procedure*/


--INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
--SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(date,GETDATE()),CONVERT(time,GETDATE()),'Procedure finished',NULL,NULL

END
GO
