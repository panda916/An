USE [DIVA_MASTER_SCRIPT]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--ALTER PROCEDURE [dbo].[B11_PTP_APA] 
CREATE       PROCEDURE [dbo].[script_B11_PTP_APA]
WITH EXECUTE AS CALLER
AS
-- --DYNAMIC_SCRIPT_START


/* Initiate the log */  
--Create database log table if it does not exist
IF OBJECT_ID('LOG_SP_EXECUTION', 'U') IS NULL BEGIN CREATE TABLE [DBO].[LOG_SP_EXECUTION] ([DATABASE] NVARCHAR(MAX) NULL,[OBJECT] NVARCHAR(MAX) NULL,[OBJECT_TYPE] NVARCHAR(MAX) NULL,[USER] NVARCHAR(MAX) NULL,[DATE] DATE NULL,[TIME] TIME NULL,[DESCRIPTION] NVARCHAR(MAX) NULL,[TABLE] NVARCHAR(MAX),[ROWS] INT) END

--Log start of procedure
INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Procedure started',NULL,NULL

/* Initialize parameters from globals table */

     DECLARE 	 
			 @CURRENCY NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'currency')
			,@DATE1 NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'date1')
			,@DATE2 NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'date2')
			,@DOWNLOADDATE NVARCHAR(MAX)		= (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'downloaddate')
			,@DATEFORMAT VARCHAR(3)             = (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'dateformat')
			,@EXCHANGERATETYPE NVARCHAR(MAX)	= (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'exchangeratetype')
			,@LANGUAGE1 NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'language1')
			,@LANGUAGE2 NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'language2')
			,@YEAR NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'year')
			,@ID NVARCHAR(MAX)					= (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'id')
			,@LIMIT_RECORDS INT		            = CAST((SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'LIMIT_RECORDS') AS INT)


/*Test mode*/

SET ROWCOUNT @LIMIT_RECORDS

/*Change history comments*/


  /*
  Title:	B11_PTP_APA Accounts payable
  Description: Generates up to three cubes:
		- APA - Accounts Payable line items
		- APA-new - Accounts Payable line items incorporating new GL data. Dependent on APA and GLA-new
		- APA-lines - Counter GL line items for accounts payable (e.g. for and invoice that Cr Accounts Payable, this cube will give the corresponding debit line items)

    --------------------------------------------------------------
    Update history
    --------------------------------------------------------------
    Date		    | Who |	Description

	13-04-2016		  MW	First version for Sony  
	18-04-2016		  EH	Added back in ZF_Bucket - AP as this is required for overview routine
	04-05-2016		  EH    Added index on BSAK and added code to remove and then re-add BKPF PK index as this was clashing with BSIK_BSAK_BKPF and impacting performance
	11-05-2016		  MW	Added company code to AM_FSMC join. Added cost center name.
	06-02-2017		  JSM	Added database log table for the stored procedure and commented all the index query.
	19-03-2017		  CW    Update and standardisation for SID
	19-03-2017		  CW    Remove manual parameters to enable running from ETL 13
	28-07-2017        NP    Naming convention
	28-07-2017        Anh   Integration of information necessary for audit tests
	15-10-2020        Hau   Comment out T074T because SPNI don't have that table
  */

 
--Step 1/ Create a list of MM invoices with a flag to show if there was a purchase order
--        and a flag to show if there was a goods receipt flags to show if there was a purchase order
-- 06_01_2022 Thuan : Remove MANDT field (join)


EXEC sp_droptable 'B11_01_TT_RSEG'

	  -- Obtain information concerning the MM invoice
		SELECT    
		  A_RSEG.RSEG_MANDT,
		  A_RSEG.RSEG_GJAHR,      
		  A_RSEG.RSEG_BELNR,
		  MAX(CASE WHEN COALESCE(B09_13_IT_PTP_POS.B09_EKKO_EBELN,'')<>'' THEN 'X' ELSE '' END) AS ZF_RSEG_INV_WITH_PO,
		  MAX(COALESCE(B09_13_IT_PTP_POS.B09_ZF_EKBE_VGABE_IS_A_GR,''))							AS ZF_RSEG_INV_WITH_GR
		
		INTO B11_01_TT_RSEG
		
		FROM A_RSEG
		
		LEFT JOIN B09_13_IT_PTP_POS 
		  ON  A_RSEG.RSEG_EBELN = B09_13_IT_PTP_POS.B09_EKKO_EBELN
		  AND A_RSEG.RSEG_EBELP = B09_13_IT_PTP_POS.B09_EKPO_EBELP
		
		GROUP BY 
			A_RSEG.RSEG_MANDT, 
			A_RSEG.RSEG_GJAHR, 
			A_RSEG.RSEG_BELNR

/*--Step 2/
-- Create a list of journal entry numbers for which there is more than one supplier
*/


	EXEC SP_DROPTABLE 'B11_02_TT_JE_MULTIPLE_SUPP'

	SELECT 
		BSAIK_GJAHR
		,BSAIK_BUKRS
		,BSAIK_BELNR
		,COUNT(BSAIK_LIFNR) AS ZF_BSAIK_NUM_SUPP_PER_JE
		INTO B11_02_TT_JE_MULTIPLE_SUPP
		FROM B04_10_IT_BSAK_BSIK_AP_ACC_SCH
		GROUP BY BSAIK_GJAHR, BSAIK_BUKRS,BSAIK_BELNR
		HAVING COUNT(DISTINCT BSAIK_LIFNR)>1


/*--Step 3
-- Create a list of supplier journal entry lines that are enriched with information from above tables and other tables 
	- Only keep journal entries lines for which the status is not pre-posting, noted or parked (BSAK_BSTAT = '')
	- -- Only keep items that are posted in the period (BUDAT between date1 and date2
-- Note: in this step, all lines are kept, whether they are for invoices, payments, etc. as these
   are required for the red flags.
   In Step 7, the table is split into buckets for invoices, payments, etc.
--Fields are being added from other SAP tables as mentioned in JOIN clauses below
--Fields are being calculated as mentioned in SELECT clause below*/ 

	EXEC SP_DROPTABLE 'B11_03_TT_PTP_APA'
			
	SELECT 	
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_MANDT AS  BSAIK_MANDT,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUKRS AS  BSAIK_BUKRS,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_GJAHR AS  BSAIK_GJAHR,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BELNR AS  BSAIK_BELNR,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUZEI AS  BSAIK_BUZEI,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BSCHL AS  BSAIK_BSCHL,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_SHKZG AS  BSAIK_SHKZG,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BLART AS  BSAIK_BLART,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_LIFNR AS  BSAIK_LIFNR,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_WAERS AS  BSAIK_WAERS,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_DMBTR AS  BSAIK_DMBTR,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_DMBE2 AS  BSAIK_DMBE2,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_DMBE3 AS  BSAIK_DMBE3,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_UMSKS AS  BSAIK_UMSKS,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_UMSKZ AS  BSAIK_UMSKZ,
		--ISNULL(A_T074T.T074T_LTEXT,'') AS T074T_LTEXT,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_AUGDT AS  BSAIK_AUGDT,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_AUGBL AS  BSAIK_AUGBL,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_ZUONR AS  BSAIK_ZUONR,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUDAT AS  BSAIK_BUDAT,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BLDAT AS  BSAIK_BLDAT,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_CPUDT AS  BSAIK_CPUDT,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_XBLNR AS  BSAIK_XBLNR,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_MONAT AS  BSAIK_MONAT,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_ZUMSK AS  BSAIK_ZUMSK,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_GSBER AS  BSAIK_GSBER,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_WRBTR AS  BSAIK_WRBTR,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_MWSKZ AS  BSAIK_MWSKZ,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_MWSTS AS  BSAIK_MWSTS,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_WMWST AS  BSAIK_WMWST,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_SGTXT AS  BSAIK_SGTXT,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_AUFNR AS  BSAIK_AUFNR,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_EBELN AS  BSAIK_EBELN,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_EBELP AS  BSAIK_EBELP,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_HKONT AS  BSAIK_HKONT,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_ZFBDT AS  BSAIK_ZFBDT,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_ZTERM AS  BSAIK_ZTERM,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_ZBD1T AS  BSAIK_ZBD1T,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_ZBD2T AS  BSAIK_ZBD2T,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_ZBD3T AS  BSAIK_ZBD3T,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_ZBD1P AS  BSAIK_ZBD1P,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_ZBD2P AS  BSAIK_ZBD2P,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_SKFBT AS  BSAIK_SKFBT,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_SKNTO AS  BSAIK_SKNTO,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_WSKTO AS  BSAIK_WSKTO,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_ZLSCH AS  BSAIK_ZLSCH,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_ZLSPR AS  BSAIK_ZLSPR,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BSTAT AS  BSAIK_BSTAT,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_PROJK AS  BSAIK_PROJK,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_XRAGL AS  BSAIK_XRAGL,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_KOSTL AS  BSAIK_KOSTL,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_XNEGP AS  BSAIK_XNEGP,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_PRCTR AS  BSAIK_PRCTR,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_AUGGJ AS  BSAIK_AUGGJ,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_ZF_BSAIK_CPUDT_AGE_DAYS AS  ZF_BSAIK_CPUDT_AGE_DAYS,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_ZF_BSAIK_OPEN_CLOSED AS  ZF_BSAIK_OPEN_CLOSED,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_ZF_BSAIK_SHKZG_DESC AS  ZF_BSAIK_SHKZG_DESC,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_ZF_BSAIK_SHKZG_INTEGER AS  ZF_BSAIK_SHKZG_INTEGER,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_ZF_BSAK_AUGDT_YEAR_MNTH AS  ZF_BSAK_AUGDT_YEAR_MNTH,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_ZF_BSAIK_WSKTO_SKBFT AS  ZF_BSAIK_WSKTO_SKBFT,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_T001_WAERS AS  T001_WAERS,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_ZF_BSAIK_DMBTR_S AS  ZF_BSAIK_DMBTR_S,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_ZF_BSAIK_DMBE2_S AS  ZF_BSAIK_DMBE2_S,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_ZF_BSAIK_DMBE3_S AS  ZF_BSAIK_DMBE3_S,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_GLOBALS_CURRENCY AS  GLOBALS_CURRENCY,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_ZF_BSAIK_DMBTR_S_CUC AS  ZF_BSAIK_DMBTR_S_CUC,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_LFA1_KTOKK AS  LFA1_KTOKK,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_T077Y_TXT30 AS  T077Y_TXT30,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_T003T_LTEXT AS  T003T_LTEXT,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BKPF_TCODE AS  BKPF_TCODE,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_ZF_SUPP_INV AS  ZF_SUPP_INV,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_ZF_SUPP_INV_CANC AS  ZF_SUPP_INV_CANC,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_ZF_SUPP_PAY AS  ZF_SUPP_PAY,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_ZF_SUPP_PAY_CANC AS  ZF_SUPP_PAY_CANC,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_ZF_OTHERS AS ZF_OTHERS,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_ZF_FLAG_SUMMARY ZF_FLAG_SUMMARY,
		--DAT Update 02/08/2022
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_ZF_DEBIT_HKONT_LIST AS  ZF_DEBIT_ACCOUNTS,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_ZF_CREDIT_HKONT_LIST AS  ZF_CREDIT_ACCOUNTS,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_ZF_DEBIT_SKAT_TXT20_LIST AS  ZF_DEBIT_ACCOUNT_TEXTS,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_ZF_CREDIT_SKAT_TXT20_LIST AS  ZF_CREDIT_ACCOUNT_TEXTS,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_XANET AS BSAIK_XANET,
		--Business area text description
		A_TGSBT.TGSBT_GTEXT,
		-- Business domaines
		AM_SCOPE.SCOPE_BUSINESS_DMN_L1,
		AM_SCOPE.SCOPE_BUSINESS_DMN_L2,
		--Company code description
		A_T001.T001_BUTXT,
		A_T001.T001_LAND1,
		--Transaction description
		A_TSTCT.TSTCT_TTEXT,
		-- Supplier details
		B08_06_IT_PTP_SMD.B08_LFA1_NAME1 AS LFA1_NAME1,
		B08_06_IT_PTP_SMD.B08_LFA1_LAND1 AS LFA1_LAND1,
		B08_06_IT_PTP_SMD.B08_LFA1_VBUND AS LFA1_VBUND,
		B08_06_IT_PTP_SMD.B08_INTERCO_TXT as INTERCO_TXT,
		--Includes document status texts
		COALESCE(A_DD07T.DD07T_DDTEXT, '') AS DD07T_DDTEXT,
		-- Three digit country code needed for dashboards. Field above is SAP field that is the two character code
		AM_COUNTRY_MAPPING_LFA1.COUNTRY_MAPPING_DESC,
		AM_COUNTRY_MAPPING_T001.COUNTRY_MAPPING_DESC T001_COUNTRY_MAPPING_DESC,
		-- Posting key description
		B00_TBSLT.TBSLT_LTEXT, 
		-- Values are inversed in the _S fields - so that the total spend shows as positive on dashboard
		CONVERT(MONEY,B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_WRBTR * COALESCE(TCURX_DOC.TCURX_FACTOR,1) 
		* iif(B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_SHKZG = 'H', -1, 1))					AS ZF_BSAIK_WRBTR_S,
	-- Some BKPF_KURSF values are null so I commented the line below out
	--	CONVERT(MONEY,(B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_WRBTR * BKPF_KURSF * COALESCE(TCURF_COC.TCURF_TFACT,1) / COALESCE(TCURF_COC.TCURF_FFACT,1)) * COALESCE(CAST(TCURR_CUC.TCURR_UKURS AS FLOAT),1) * COALESCE(TCURF_CUC.TCURF_TFACT,1) / (COALESCE(TCURF_CUC.TCURF_FFACT,1) * iif(B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_SHKZG = 'H', -1, 1)))	AS ZF_BSAIK_WRBTR_S_CUC,
 	   CONVERT(MONEY,B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_DMBTR 
			* COALESCE(TCURX_CUC.TCURX_FACTOR,1) * COALESCE(CAST(TCURR_CUC.TCURR_UKURS AS FLOAT),1)
			* COALESCE(TCURF_CUC.TCURF_TFACT,1) / COALESCE(TCURF_CUC.TCURF_FFACT,1))	                       
			AS      ZF_BSAIK_WRBTR_S_CUC,
	   CONVERT(MONEY,B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_DMBTR 
			* COALESCE(TCURX_CUC.TCURX_FACTOR,1) * COALESCE(CAST(TCURR_CUC.TCURR_UKURS AS FLOAT),1)
			* COALESCE(TCURF_CUC.TCURF_TFACT,1) / COALESCE(TCURF_CUC.TCURF_FFACT,1))	                       
			AS ZF_BSAIK_DMBTR_CUC,	
			-- User information
		A_BKPF.BKPF_USNAM AS BKPF_USNAM, 
		A_V_USERNAME.V_USERNAME_NAME_TEXT,      
		B00_USR02.USR02_USTYP,
		CASE 
		 WHEN B00_USR02.USR02_USTYP = 'A' THEN 'Dialog' 
		 WHEN B00_USR02.USR02_USTYP = 'B' THEN 'System' 
		 WHEN B00_USR02.USR02_USTYP = 'C' THEN 'Communication (external RFC)' 
		 WHEN B00_USR02.USR02_USTYP = 'L' THEN 'Reference' 
		 WHEN B00_USR02.USR02_USTYP = 'S' THEN 'Service' 
		 ELSE 'Other' 
		END AS ZF_USR02_USTYP_DESC,		
        -- GL account description for supplier control account
		B00_SKAT.SKAT_TXT50, 
		-- Profit center information
		COALESCE(CASE 
			WHEN B00_CEPCT.CEPCT_LTEXT ='' OR  B00_CEPCT.CEPCT_LTEXT IS NULL THEN 'Not assigned'
			ELSE  B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_PRCTR 
		END,'Not assigned')																					AS ZF_BSAIK_PRCTR,			
		COALESCE(CASE 
			WHEN B00_CEPCT.CEPCT_LTEXT ='' OR  B00_CEPCT.CEPCT_LTEXT IS NULL THEN 'Not assigned'
			ELSE  B00_CEPCT.CEPCT_LTEXT 
		END,'Not assigned')																					AS ZF_CEPCT_LTEXT,
		-- MM-invoice information
		CASE 
			WHEN A_BKPF.BKPF_AWTYP = 'RMRP' 
			THEN 'X' ELSE '' 
		END			
																							AS ZF_BKPF_AWTYP_MM_INV,
		CASE 
			WHEN A_BKPF.BKPF_AWTYP = 'RMRP'  THEN  LEFT(A_BKPF.BKPF_AWKEY, 10) 
			ELSE '' 
		END																								AS ZF_BKPF_AWTYP_MM_INV_NUM,
		CASE 
			WHEN A_BKPF.BKPF_AWTYP = 'RMRP'  THEN RIGHT(A_BKPF.BKPF_AWKEY,4)	 
			ELSE '' 
		END																								AS ZF_BKPF_AWTYP_MM_INV_YEAR,
		A_BKPF.BKPF_AWKEY									AS 		BKPF_AWKEY,							

		-- Date fields (calendar)
		YEAR(B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUDAT)														AS ZF_BSAIK_BUDAT_CY,
		CAST(YEAR(B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUDAT) AS VARCHAR(4)) + '-' + RIGHT('0' + CAST(MONTH(B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUDAT) AS VARCHAR(2)),2)		AS ZF_BSAIK_BUDAT_CY_MNTH,
		CAST(YEAR(B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUDAT) AS VARCHAR(4)) + '-' +
			CASE 
				WHEN MONTH (B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUDAT) IN (4,5,6) THEN 'Q2'
				WHEN MONTH (B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUDAT) IN (7,8,9) THEN 'Q3'
				WHEN MONTH (B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUDAT) IN (10,11,12) THEN 'Q4'
				ELSE 'Q1' 
			END																								AS ZF_BSAIK_BUDAT_CY_CQ,
		A_BKPF.BKPF_AWTYP,
		-- Date fields (fiscal)
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_GJAHR + '-' + CASE WHEN B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_MONAT IN ('01','02','03') then 'Q1'
						   WHEN B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_MONAT IN ('04','05','06') then 'Q2'
						   WHEN B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_MONAT IN ('07','08','09') then 'Q3'
						   WHEN B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_MONAT IN ('10','11','12') then 'Q4'
					  ELSE 'Q4' END																			AS ZF_BSAIK_MONAT_FQ,
		B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_GJAHR + '-' + B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_MONAT						AS ZF_BSAIK_GJAHR_MONAT,

		-- Logic to create 3 character posting month names.
		CONVERT(VARCHAR(3), DATENAME(MM, B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUDAT))								AS ZF_BSAIK_BUDAT_MNTH,
		-- Entry time
		A_BKPF.BKPF_CPUTM AS BKPF_CPUTM,
		-- Journal entry header text
		A_BKPF.BKPF_BKTXT AS BKPF_BKTXT,
		-- Determine what the last day of the period is
		EOMONTH(B07B_BSAIK_AUGDT) AS ZF_BSAIK_AUGDT_LST_DY_CAL,

		-- Take whatever is earlier, the last day of the period or the matching da0te
		SUBSTRING(CAST(CONVERT(DATE, B07B_BSAIK_AUGDT, 112) AS NVARCHAR(20)),1,7)  AS ZF_BSAIK_AUGDT_CAL_MNTH,
		
		-- Early and late payment buckets
		CASE 
			WHEN B07B_ZF_BSAIK_CPUDT_AGE_DAYS<-360 THEN '<-360'
			WHEN B07B_ZF_BSAIK_CPUDT_AGE_DAYS BETWEEN -360 AND -181 THEN '-360 to -181' 
			WHEN B07B_ZF_BSAIK_CPUDT_AGE_DAYS BETWEEN -180 AND -121 THEN '-180 to -121' 
			WHEN B07B_ZF_BSAIK_CPUDT_AGE_DAYS BETWEEN -120 AND -91 THEN '-120 to -91' 
			WHEN B07B_ZF_BSAIK_CPUDT_AGE_DAYS BETWEEN -90 AND -61 THEN '-90 to -61' 
			WHEN B07B_ZF_BSAIK_CPUDT_AGE_DAYS BETWEEN -60 AND -31 THEN '-60 to -31' 
			WHEN B07B_ZF_BSAIK_CPUDT_AGE_DAYS BETWEEN -30 AND -1 THEN '-30 to -1' 
			WHEN B07B_ZF_BSAIK_CPUDT_AGE_DAYS=0 THEN '0'
			WHEN B07B_ZF_BSAIK_CPUDT_AGE_DAYS BETWEEN 0 AND 30 THEN '1 to 30'  
			WHEN B07B_ZF_BSAIK_CPUDT_AGE_DAYS BETWEEN 31 AND 60 THEN '31 to 60' 
			WHEN B07B_ZF_BSAIK_CPUDT_AGE_DAYS BETWEEN 61 AND 90 THEN '61 to 90'
			WHEN B07B_ZF_BSAIK_CPUDT_AGE_DAYS BETWEEN 91 AND 120 THEN '91 to 120'
			WHEN B07B_ZF_BSAIK_CPUDT_AGE_DAYS BETWEEN 121 AND 180 THEN '121 to 180'
			WHEN B07B_ZF_BSAIK_CPUDT_AGE_DAYS BETWEEN 181 AND 360 THEN '181 to 360'
			ELSE '>360'         
		END ZF_BSAIK_CPUDT_AGE_DAY_RANGE, 
		DATEDIFF(DD, B07B_BSAIK_AUGDT, B07B_BSAIK_BLDAT) ZF_BLDAT_MINUS_AUGDT,
		IIF(DATEDIFF(DD, B07B_BSAIK_AUGDT, B07B_BSAIK_BLDAT) > 0,
		CASE
			WHEN DATEDIFF(DD, B07B_BSAIK_AUGDT, B07B_BSAIK_BLDAT) <= 10 THEN '01 - 10'
			WHEN DATEDIFF(DD, B07B_BSAIK_AUGDT, B07B_BSAIK_BLDAT) <= 20 THEN '11 - 20'
			WHEN DATEDIFF(DD, B07B_BSAIK_AUGDT, B07B_BSAIK_BLDAT) <= 30 THEN '21 - 30'
			ELSE '> 30' END + 'days', NULL) ZF_BLDAT_MINUS_AUGDT_BUCKET,
		IIF(DATEDIFF(DD, B07B_BSAIK_AUGDT, B07B_BSAIK_BLDAT) > 0, 1 , 0) ZF_BLDAT_MINUS_AUGDT_FLAG,
		-- Calculated due date
		DATEADD(d, 
		  CASE 
			WHEN (B07B_BSAIK_ZBD2T <> 0) AND (B07B_ZF_BSAIK_WSKTO_SKBFT <> B07B_BSAIK_ZBD1P) THEN
			  CASE 
				WHEN (B07B_ZF_BSAIK_WSKTO_SKBFT = B07B_BSAIK_ZBD2P) THEN B07B_BSAIK_ZBD2T
				WHEN (B07B_BSAIK_ZBD3T <> 0) THEN B07B_BSAIK_ZBD3T
				ELSE B07B_BSAIK_ZBD1T 
			  END
			ELSE B07B_BSAIK_ZBD1T 
		  END, B07B_BSAIK_ZFBDT) ZF_BSAIK_ZFBDT_ZBDXT_DUE_DATE,

		-- Days late, based on calculated due date logic compared against clearing date
		DATEDIFF(d,
			DATEADD(d, 
				CASE 
					WHEN (B07B_BSAIK_ZBD2T <> 0) AND (B07B_ZF_BSAIK_WSKTO_SKBFT <> B07B_BSAIK_ZBD1P) THEN
						CASE 
							WHEN (B07B_ZF_BSAIK_WSKTO_SKBFT = B07B_BSAIK_ZBD2P) THEN B07B_BSAIK_ZBD2T
							WHEN	(B07B_BSAIK_ZBD3T <> 0) THEN B07B_BSAIK_ZBD3T
							ELSE B07B_BSAIK_ZBD1T 
						END
					ELSE B07B_BSAIK_ZBD1T 
				END, B07B_BSAIK_ZFBDT)

			,CASE 
				WHEN COALESCE(B07B_BSAIK_AUGBL, '') = '' THEN NULL
				ELSE B07B_BSAIK_AUGDT 
			END) ZF_BSAIK_AUGDT_MINUS_ZBDXT,

		-- Days late, based on document date later than posting date
		DATEDIFF(d, B07B_BSAIK_BLDAT, B07B_BSAIK_BUDAT) AS ZF_BSAIK_BUDAT_MINUS_BLDAT,
		-- Planned DPO, based on comparison between baseline date and calculated due date
		CASE 
			WHEN B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_DMBTR = 0 THEN 0 
			ELSE datediff(dd,		  
				--Baseline date
				B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_ZFBDT, 
			
			  --Calc due date
			  DATEADD(d, 
				CASE 
					WHEN (B07B_BSAIK_ZBD2T <> 0) AND (B07B_ZF_BSAIK_WSKTO_SKBFT <> B07B_BSAIK_ZBD1P) THEN
						CASE 
							WHEN (B07B_ZF_BSAIK_WSKTO_SKBFT = B07B_BSAIK_ZBD2P) THEN B07B_BSAIK_ZBD2T
							WHEN (B07B_BSAIK_ZBD3T <> 0) THEN B07B_BSAIK_ZBD3T
							ELSE B07B_BSAIK_ZBD1T 
						END
					ELSE B07B_BSAIK_ZBD1T 
				END, B07B_BSAIK_ZFBDT) 
		  ) 
		 END ZF_BSAIK_ZFBDT_MINUS_ZBDXT,

		-- Actual DPO, based on difference between baseline date and clearing date
		CASE 
			WHEN B07B_BSAIK_DMBTR = 0 THEN 0 
			ELSE DATEDIFF(DD, B07B_BSAIK_ZFBDT, B07B_BSAIK_AUGDT) 
		END	ZF_BSAIK_ZFBDT_MINUS_AUGDT,

		
		-- Calculation of whether payment of the invoice was early/late
		-- Days late is equivalent to difference between planned DPO and actual DPO. Calculated using the same logic as the days late field above
		CASE 
			WHEN (DATEDIFF(D,  
					DATEADD(D, 
					   CASE 
						  WHEN (B07B_BSAIK_ZBD2T <> 0) AND (B07B_ZF_BSAIK_WSKTO_SKBFT <> B07B_BSAIK_ZBD1P)  THEN
							CASE 
								WHEN (B07B_ZF_BSAIK_WSKTO_SKBFT = B07B_BSAIK_ZBD2P) THEN B07B_BSAIK_ZBD2T
								WHEN (B07B_BSAIK_ZBD3T <> 0) THEN B07B_BSAIK_ZBD3T
								ELSE B07B_BSAIK_ZBD1T 
							END
						  ELSE B07B_BSAIK_ZBD1T 
					   END, B07B_BSAIK_ZFBDT)			
				,CASE 
					WHEN COALESCE(B07B_BSAIK_AUGBL, '') = '' THEN NULL
					ELSE B07B_BSAIK_AUGDT 
				END)) < 0 THEN 'Early Payment'	  
			  
			WHEN (DATEDIFF(D,  
					DATEADD(D, 
					   CASE 
						  WHEN (B07B_BSAIK_ZBD2T <> 0) AND (B07B_ZF_BSAIK_WSKTO_SKBFT <> B07B_BSAIK_ZBD1P) THEN
							 CASE 
								WHEN (B07B_ZF_BSAIK_WSKTO_SKBFT = B07B_BSAIK_ZBD2P) THEN B07B_BSAIK_ZBD2T
								WHEN (B07B_BSAIK_ZBD3T <> 0) THEN B07B_BSAIK_ZBD3T
								ELSE B07B_BSAIK_ZBD1T 
							 END
						  ELSE B07B_BSAIK_ZBD1T 
					   END, B07B_BSAIK_ZFBDT)			
				,CASE 
					WHEN COALESCE(B07B_BSAIK_AUGBL, '') = '' THEN NULL 
					ELSE B07B_BSAIK_AUGDT 
				 END)) = 0 THEN 'On-time Payment'	  
			  
			ELSE 'Late Payment' 
		END ZF_BSAIK_ZBDXT_AUGDT_EARLY_OR_LATE_DESC,


		-- Other supplier master fields
		B08_06_IT_PTP_SMD.B08_ZF_VENDOR_EXCEPTION_LIST AS ZF_VENDOR_EXCEPTION_LIST,																					
		COALESCE (B08_06_IT_PTP_SMD.B08_LFA1_VBUND,'Unknown ? supplier master record not available') ZF_LFA1_VBUND,
			
		-- Add indicator to show if there was an invoice with PO 
		COALESCE(B11_01_TT_RSEG.ZF_RSEG_INV_WITH_PO,'')	ZF_RSEG_INV_WITH_PO,
		-- Add indicator to show if there was an invoice with GR
		COALESCE(B11_01_TT_RSEG.ZF_RSEG_INV_WITH_GR,'')	ZF_RSEG_INV_WITH_GR,
		-- Add indicator to show if posted in the period
		CASE 
			WHEN B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUDAT >= @DATE1 AND B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUDAT <= @DATE2 THEN 'X'
			ELSE ''
		END	ZF_BSAIK_BUDAT_POST_PER,
		-- Add indicator to show if cleared in the period
		CASE
			WHEN B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_AUGDT between @DATE1 and @DATE2 THEN 'X'
			ELSE ''
		END ZF_BSAIK_AUGDT_CLEAR_PER,  
		-- Add a description of the document status
		CASE 
			WHEN COALESCE(A_T074U.T074U_MERKP,'') = '' THEN
				CASE B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BSTAT
					WHEN 'V' THEN 'Parked'
					WHEN 'W' THEN 'Parked'
					WHEN 'Z' THEN 'Parked'
					WHEN 'S' THEN 'Noted'
					WHEN ''  THEN 'Normal'
					ELSE 'Other non-financial items'
				END
			ELSE 'Noted'      
		END	ZF_BSAIK_BSTAT_DESC,
		-- Add an indicator to show if there are multiple suppliers per journal entry
		CASE WHEN (COALESCE(B11_02_TT_JE_MULTIPLE_SUPP.BSAIK_BELNR,'') <> '')
				THEN 'X'
				ELSE ''
		END AS ZF_BSAIK_MULTIPLE_SUPPS,
    	    	-- Invoice buckets 
		CASE 
		  WHEN B07B_ZF_SUPP_INV = 'X' THEN
			CASE
				WHEN B07B_BSAIK_BUDAT < @DATE1 THEN 'Invoice - type unknown'
				WHEN (COALESCE(B11_01_TT_RSEG.ZF_RSEG_INV_WITH_PO,'') <> '') THEN      
					CASE 
						WHEN (COALESCE(B11_01_TT_RSEG.ZF_RSEG_INV_WITH_GR,'') <> '') THEN '3-way match invoice' 
						ELSE '2-way match invoice'
					END
				ELSE 'Direct invoice'
			END 
		  WHEN B07B_ZF_SUPP_INV_CANC = 'X' THEN 'Credit memo'   
		  ELSE 'N/A'  
	   END ZF_BSAIK_INV_DESC,
		CASE 
		  WHEN B07B_ZF_SUPP_INV_CANC = 'X' THEN
				CASE 
					WHEN ((COALESCE(B11_01_TT_RSEG.ZF_RSEG_INV_WITH_PO,'') <> '') OR (COALESCE(B11_01_TT_RSEG.ZF_RSEG_INV_WITH_GR,'') <> '')) THEN 'N/A - matched invoice'
					ELSE
						CASE 
							WHEN B08_06_IT_PTP_SMD.B08_ZF_VENDOR_EXCEPTION_LIST = 'Yes' THEN 'Authorised exception'
							ELSE 'Unuathorised exception'
						END
					END
		  ELSE B07B_ZF_FLAG_SUMMARY END ZF_BSAIK_INV_NO_GR_PO
		,CASE                               
			WHEN B07B_BSAIK_SHKZG = 'S'
				THEN B07B_BSAIK_DMBTR 
			ELSE 0                                       
		 END AS ZF_BSAIK_DMBTR_DEBIT                     
		,CASE                                            
			WHEN B07B_BSAIK_SHKZG = 'H'
				THEN B07B_BSAIK_DMBTR  
			ELSE 0                                        
		 END AS ZF_BSAIK_DMBTR_CREDIT                     
		-- Add descriptions
		,B07B_BSAIK_BUKRS + '-' + A_T001.T001_BUTXT		AS ZF_BSAIK_BURKS_T001_BUTXT
		,B07B_BSAIK_LIFNR  + '-' +B08_06_IT_PTP_SMD.B08_LFA1_NAME1 ZF_BSAIK_LIFNR_NAME1
		,T052U_AP.T052U_TEXT1 AS ZF_T052U_TEXT1_AP -- Add document payment term description
		,LFB1_ZTERM AS LFB1_ZTERM -- Supplier payment term
		,T052U_SU.T052U_TEXT1  AS ZF_T052U_TEXT1_SU  -- Supplier payment term description

	  INTO B11_03_TT_PTP_APA  
	  
	  FROM B07_03_IT_FIN_AP_INV_PAY_FLAGS
	   -- Add supplier master data details, including the supplier account gruop
		  LEFT JOIN B08_06_IT_PTP_SMD 
			ON  B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUKRS = B08_06_IT_PTP_SMD.B08_LFB1_BUKRS 
			AND B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_LIFNR = B08_06_IT_PTP_SMD.B08_LFB1_LIFNR

		LEFT JOIN A_BKPF
		ON A_BKPF.BKPF_BUKRS = B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUKRS AND
		   A_BKPF.BKPF_GJAHR = B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_GJAHR AND
		   A_BKPF.BKPF_BELNR = B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BELNR

			
       -- Add the controlling area in order to be able to add profit center information		
		LEFT JOIN A_TKA02
			ON A_TKA02.TKA02_BUKRS = B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUKRS

			
							       			
	    -- Adding below profit center and cost center descriptions
		-- But actually there are no profit centers or cost centers in BSAK for India
		--Don't have BSEG.KOKRS, so use TKA02 (mapping from BUKRS to KOKRS)
		LEFT JOIN B00_CEPCT 
			ON  A_TKA02.TKA02_KOKRS = B00_CEPCT.CEPCT_KOKRS
			AND B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_PRCTR = B00_CEPCT.CEPCT_PRCTR 
			AND B00_CEPCT.CEPCT_DATBI > @downloaddate

        -- Add the FSMC information  
  	--	LEFT JOIN AM_FSMC 
			--ON AM_FSMC.FSMC_COMPANY_CODE = B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUKRS	 
		
		-- Restrict to only the company codes in scope
		INNER JOIN AM_SCOPE 
			ON  B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUKRS = AM_SCOPE.SCOPE_CMPNY_CODE 
	  
		-- Obtain chart of accounts code, company description and house currency
		LEFT JOIN A_T001 
			ON  B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUKRS = A_T001.T001_BUKRS

		  -- Add chart of accounts description
		  LEFT JOIN B00_SKAT
			ON B00_SKAT.SKAT_KTOPL = A_T001.T001_KTOPL
			AND B00_SKAT.SKAT_SAKNR = B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_HKONT
		
		   -- Add currency factor from company currency to USD

		LEFT JOIN B00_IT_TCURF TCURF_CUC
		ON A_T001.T001_WAERS = TCURF_CUC.TCURF_FCURR
		AND TCURF_CUC.TCURF_TCURR  = @currency  
		AND TCURF_CUC.TCURF_GDATU = (
			SELECT TOP 1 B00_IT_TCURF.TCURF_GDATU
			FROM B00_IT_TCURF
			WHERE A_T001.T001_WAERS = B00_IT_TCURF.TCURF_FCURR AND 
					B00_IT_TCURF.TCURF_TCURR  = @currency  AND
					B00_IT_TCURF.TCURF_GDATU <= B07B_BSAIK_BUDAT
			ORDER BY B00_IT_TCURF.TCURF_GDATU DESC
			)
		-- Add exchange rate from company currency to USD
		LEFT JOIN B00_IT_TCURR TCURR_CUC
			ON A_T001.T001_WAERS = TCURR_CUC.TCURR_FCURR
			AND TCURR_CUC.TCURR_TCURR  = @currency  
			AND TCURR_CUC.TCURR_GDATU = (
				SELECT TOP 1 B00_IT_TCURR.TCURR_GDATU
				FROM B00_IT_TCURR
				WHERE A_T001.T001_WAERS = B00_IT_TCURR.TCURR_FCURR AND 
						B00_IT_TCURR.TCURR_TCURR  = @currency  AND
						B00_IT_TCURR.TCURR_GDATU <= B07B_BSAIK_BUDAT
				ORDER BY B00_IT_TCURR.TCURR_GDATU DESC
				)
		  -- Add currency conversion factor for document currency
		  LEFT JOIN B00_TCURX TCURX_DOC  
			ON B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_WAERS = TCURX_DOC.TCURX_CURRKEY
		
		  -- Add currency conversion factors for company currency
		  LEFT JOIN B00_TCURX TCURX_CUC      
			ON A_T001.T001_WAERS = TCURX_CUC.TCURX_CURRKEY

		  -- Add user name
		  LEFT JOIN A_V_USERNAME
			ON A_BKPF.BKPF_USNAM = A_V_USERNAME.V_USERNAME_BNAME
		  
		  -- Add user account details
		  LEFT JOIN B00_USR02 
			ON A_BKPF.BKPF_USNAM = B00_USR02.USR02_BNAME
		  
		  -- Add posting key details
		  LEFT JOIN B00_TBSLT
			ON B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_UMSKZ = B00_TBSLT.TBSLT_UMSKZ 
			AND B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BSCHL = B00_TBSLT.TBSLT_BSCHL
		  
		  -- Add special ledger properties to determine if posting is to leading ledger
		  LEFT JOIN A_T074U
			ON ('K' = A_T074U.T074U_KOART) 
			AND (B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_UMSKZ = A_T074U.T074U_UMSKZ) 
			
		  -- Add special ledger UMSKZ description
		  /*LEFT JOIN A_T074T
			ON A_T074T.T074T_SPRAS IN ('E', 'EN') AND
			   A_T074T.T074T_KOART = 'K' AND
			   IIF(LEN(B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_UMSKZ)>0,B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_UMSKZ,'')  = T074T_SHBKZ*/
		
		  -- Add MM invoice details
		  LEFT JOIN B11_01_TT_RSEG 
			ON A_BKPF.BKPF_AWTYP = 'RMRP' 
			AND RIGHT(A_BKPF.BKPF_AWKEY,4) = B11_01_TT_RSEG.RSEG_GJAHR
			AND LEFT(A_BKPF.BKPF_AWKEY, 10) = B11_01_TT_RSEG.RSEG_BELNR


		-- Add 3 digit ISO country codes (for dashboard maps)
		LEFT JOIN AM_COUNTRY_MAPPING AM_COUNTRY_MAPPING_LFA1
			ON AM_COUNTRY_MAPPING_LFA1.COUNTRY_MAPPING_CODE= B08_06_IT_PTP_SMD.B08_LFA1_LAND1

		-- Add 3 digit ISO country codes (for dashboard maps)
		LEFT JOIN AM_COUNTRY_MAPPING AM_COUNTRY_MAPPING_T001
			ON AM_COUNTRY_MAPPING_T001.COUNTRY_MAPPING_CODE= A_T001.T001_LAND1

	    -- Add the multiple suppliers indicator
		LEFT JOIN B11_02_TT_JE_MULTIPLE_SUPP
			ON B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_GJAHR =B11_02_TT_JE_MULTIPLE_SUPP.BSAIK_GJAHR
			AND B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUKRS =B11_02_TT_JE_MULTIPLE_SUPP.BSAIK_BUKRS
			AND B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BELNR =B11_02_TT_JE_MULTIPLE_SUPP.BSAIK_BELNR

	    -- Add business area description
		LEFT JOIN A_TGSBT
		    ON B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_GSBER = A_TGSBT.TGSBT_GSBER

		-- Add transction description
		LEFT JOIN A_TSTCT
			ON B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BKPF_TCODE = A_TSTCT.TSTCT_TCODE

			AND A_TSTCT.TSTCT_SPRSL IN ('E', 'EN')
		-- Add supplier payment term
		LEFT JOIN A_LFB1
		ON B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_LIFNR = LFB1_LIFNR
		AND B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BUKRS = LFB1_BUKRS

		-- Add supplier payment term description
		LEFT JOIN B00_T052U T052U_SU
		ON LFB1_ZTERM = T052U_SU.T052U_ZTERM
		
		-- Add document payment term description
		LEFT JOIN B00_T052U T052U_AP
		ON B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_ZTERM = T052U_AP.T052U_ZTERM

		--Includes document status texts	
		LEFT JOIN A_DD07T 
		ON  (A_DD07T.DD07T_DDLANGUAGE = @language1) AND
			(A_DD07T.DD07T_DOMNAME ='BSTAT') AND
			(B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BSTAT = A_DD07T.DD07T_DOMVALUE_L)
		-- Only keep items that are not noted and that are not pre-posting
		-- Only keep items that are posted in the period 
		WHERE COALESCE(A_T074U.T074U_MERKP,'') = '' 
		AND ISNULL(B07_03_IT_FIN_AP_INV_PAY_FLAGS.B07B_BSAIK_BSTAT, '') =''

				
/*-- Step 4/ 
-- Add additional fields to the cube that can not be added above because some calculated fields needed
   to be calculated first above
*/

   EXEC SP_DROPTABLE 'B11_04_IT_PTP_APA'
   

	 SELECT B11_03_TT_PTP_APA.*
	    -- Add the days late range
		,CASE 
			WHEN ZF_BSAIK_AUGDT_MINUS_ZBDXT < - 10 THEN '< -10' 
			WHEN ZF_BSAIK_AUGDT_MINUS_ZBDXT < 0 THEN '-10 - -1'
			WHEN ZF_BSAIK_AUGDT_MINUS_ZBDXT = 0 THEN '0'
			WHEN ZF_BSAIK_AUGDT_MINUS_ZBDXT <= 10 THEN '1 - 10'
			WHEN ZF_BSAIK_AUGDT_MINUS_ZBDXT <= 20 THEN '11 - 20'
			WHEN ZF_BSAIK_AUGDT_MINUS_ZBDXT <= 30 THEN '21 - 30'
			WHEN ZF_BSAIK_AUGDT_MINUS_ZBDXT <= 60 THEN '31 - 60'
			WHEN ZF_BSAIK_AUGDT_MINUS_ZBDXT <= 90 THEN '61 - 90'
			WHEN ZF_BSAIK_AUGDT_MINUS_ZBDXT <= 120 THEN '91 - 120'
			WHEN ZF_BSAIK_AUGDT_MINUS_ZBDXT > 120 THEN '121 +'
			ELSE 'No clearinng date or due date'   
		END	AS ZF_ZBDXT_AUGDT_DAYS_LATE_RANGE
		,CASE 
				WHEN ZF_BSAIK_BUDAT_MINUS_BLDAT < -10 THEN '< -10'
				WHEN ZF_BSAIK_BUDAT_MINUS_BLDAT < 0 THEN '-10 - -1'
				WHEN ZF_BSAIK_BUDAT_MINUS_BLDAT = 0 THEN '0'
				WHEN ZF_BSAIK_BUDAT_MINUS_BLDAT <= 10 THEN '1 - 10'
				WHEN ZF_BSAIK_BUDAT_MINUS_BLDAT <= 20 THEN '11 - 20'
				WHEN ZF_BSAIK_BUDAT_MINUS_BLDAT <= 30 THEN '21 - 30'
				WHEN ZF_BSAIK_BUDAT_MINUS_BLDAT <= 60 THEN '31 - 60'
				WHEN ZF_BSAIK_BUDAT_MINUS_BLDAT <= 90 THEN '61 - 90'
				WHEN ZF_BSAIK_BUDAT_MINUS_BLDAT <= 120 THEN '91 - 120'
				WHEN ZF_BSAIK_BUDAT_MINUS_BLDAT > 120 THEN '121 +'
			ELSE 'No document date or posting date' 
		END ZF_POSTING_BUDAT_MINUS_BLDAT_CATEGORY
		,CASE
				WHEN ZF_BSAIK_AUGDT_MINUS_ZBDXT < -10 THEN '< -10'
				WHEN ZF_BSAIK_AUGDT_MINUS_ZBDXT < 0 THEN '-10 - -1'
				WHEN ZF_BSAIK_AUGDT_MINUS_ZBDXT = 0 THEN '0'
				WHEN ZF_BSAIK_AUGDT_MINUS_ZBDXT <= 10 THEN '1 - 10'
				WHEN ZF_BSAIK_AUGDT_MINUS_ZBDXT <= 20 THEN '11 - 20'
				WHEN ZF_BSAIK_AUGDT_MINUS_ZBDXT <= 30 THEN '21 - 30'
				WHEN ZF_BSAIK_AUGDT_MINUS_ZBDXT <= 60 THEN '31 - 60'	
				WHEN ZF_BSAIK_AUGDT_MINUS_ZBDXT <= 90 THEN '61 - 90'
				WHEN ZF_BSAIK_AUGDT_MINUS_ZBDXT <= 120 THEN '91 - 120'
				WHEN ZF_BSAIK_AUGDT_MINUS_ZBDXT > 120 THEN '121 +'
			ELSE 'No clearinng date or due date'
		END ZF_AUGDT_MINUS_ZBDXT_CATEGORY

		-- Add description of exceptional direct invoices
		,CASE
			WHEN ZF_BSAIK_INV_DESC =  'Direct invoice'  AND  ZF_VENDOR_EXCEPTION_LIST  ='NO'
				THEN 'Exception'
			ELSE 'OK'
		  END ZF_EXCEPTIONAL_DI
		-- Add value for credit memos when not on vendor exception list
		,CASE
			WHEN ZF_BSAIK_INV_DESC =  'Credit memo'  AND  ZF_VENDOR_EXCEPTION_LIST  ='NO'
				THEN ZF_BSAIK_DMBTR_S_CUC
			ELSE 0
		  END AS ZF_BSAIK_DMBTR_S_CUC_CM_NOT_VEL
		-- Add value for direct invoice when not on vendor exception list 
		,CASE
			WHEN ZF_BSAIK_INV_DESC =  'Direct invoice'  AND  ZF_VENDOR_EXCEPTION_LIST  ='NO'
				THEN ZF_BSAIK_DMBTR_S_CUC
			ELSE 0
		  END AS ZF_BSAIK_DMBTR_S_CUC_DI_NOT_VEL
		-- Add the value for early payments
		,CASE
			WHEN ZF_BSAIK_ZBDXT_AUGDT_EARLY_OR_LATE_DESC = 'Early Payment'
				THEN ZF_BSAIK_DMBTR_S_CUC
			ELSE 0
		 END AS ZF_EARLY_PAYMENT_VAL
		 -- Add the value for on-time payments
		,CASE
			WHEN ZF_BSAIK_ZBDXT_AUGDT_EARLY_OR_LATE_DESC = 'On-time Payment'
				THEN ZF_BSAIK_DMBTR_S_CUC
			ELSE 0
		 END AS ZF_ONTIME_PAYMENT_VAL
		 -- Add the value for late payments
		,CASE
			WHEN ZF_BSAIK_ZBDXT_AUGDT_EARLY_OR_LATE_DESC = 'Late Payment'
				THEN ZF_BSAIK_DMBTR_S_CUC
			ELSE 0
		 END AS ZF_LATE_PAYMENT_VAL		
		-- Add the debit/ credit amounts for custom currency
		,CASE                               
			WHEN BSAIK_SHKZG = 'S'
				THEN ZF_BSAIK_DMBTR_CUC
			ELSE 0                                       
		 END AS ZF_BSAIK_DMBTR_CUC_DEBIT                     
		,CASE                                            
			WHEN BSAIK_SHKZG = 'H'
				THEN ZF_BSAIK_DMBTR_CUC
			ELSE 0                                        
		 END AS ZF_BSAIK_DMBTR_CUC_CREDIT,               
		 
		 CONVERT(nvarchar(4), DATEPART(yyyy, BSAIK_BUDAT)) + '-' + LEFT(DATENAME(mm, BSAIK_BUDAT),3) ZF_BSAIK_BUDAT_YYYYMMM,
		 CONVERT(DATE, CONVERT(NVARCHAR(4), DATEPART(yyyy, BSAIK_BUDAT)) + 
		 
		 IIF(DATEPART(mm, BSAIK_BUDAT) < 10, '0' + CONVERT(NVARCHAR(4), DATEPART(mm, BSAIK_BUDAT)) , 
		 CONVERT(NVARCHAR(4), DATEPART(mm, BSAIK_BUDAT))) + '01', 112) ZF_BSAIK_BUDAT_YYYYMMDD_GROUPED

															
		INTO B11_04_IT_PTP_APA
		FROM B11_03_TT_PTP_APA

/*--Step 5
-- List of invoices and cancellations, invoices, cancellations, payments, payment cancellations
-- The list of invoices and cancellations is the list that is used in Qlik for PTP spendoverview
 */ 

 	   EXEC SP_DROPTABLE 'B11_05_IT_PTP_INVS_AND_CANCS'
	   
       SELECT * 
	   INTO B11_05_IT_PTP_INVS_AND_CANCS
	   FROM B11_04_IT_PTP_APA
	   WHERE ZF_SUPP_INV = 'X' OR ZF_SUPP_INV_CANC = 'X'
	  
	   EXEC SP_DROPTABLE 'B11_06_IT_PTP_INV'
       SELECT * 
	   INTO B11_06_IT_PTP_INV
	   FROM B11_04_IT_PTP_APA
	   WHERE ZF_SUPP_INV = 'X'

	   EXEC SP_DROPTABLE 'B11_07_IT_PTP_INV_CANC'

       SELECT * 
	   INTO B11_07_IT_PTP_INV_CANC
	   FROM B11_04_IT_PTP_APA
	   WHERE ZF_SUPP_INV_CANC = 'X'

	   EXEC SP_DROPTABLE 'B11_08_IT_PTP_PAY'

       SELECT * 
	   INTO B11_08_IT_PTP_PAY
	   FROM B11_04_IT_PTP_APA
	   WHERE ZF_SUPP_PAY = 'X'

	   EXEC SP_DROPTABLE 'B11_09_IT_PTP_PAY_CANC'

       SELECT * 
	   INTO B11_09_IT_PTP_PAY_CANC
	   FROM B11_04_IT_PTP_APA
	   WHERE ZF_SUPP_PAY_CANC = 'X'

-- Step 6 AP Ageing cube
-- Create a temp table with all month ends between @DATE1 and @DATE2
-- 06_01_2022 Thuan : Remove MANDT field (join)

	DECLARE @DATELOW date = (SELECT CAST(@DATE1 AS date))
	DECLARE @DATEHIGH date = (SELECT CAST(@DATE2 AS date))

	EXEC SP_DROPTABLE 'B11_11_TT_SNAPSHOT_DATE'
	CREATE TABLE B11_11_TT_SNAPSHOT_DATE (ZF_MNTH_END date)
	WHILE @DATELOW <= @DATEHIGH
	BEGIN 
		INSERT INTO B11_11_TT_SNAPSHOT_DATE 
		SELECT EOMONTH(@DATELOW)
		SET @DATELOW = DATEADD(mm, 1, @DATELOW)
	END

-- add compay code, mandant and fiscal year variant
	EXEC SP_DROPTABLE 'B11_12_TT_SNAPSHOT_BUKRS'
	SELECT T001_MANDT, T001_BUKRS, T001_PERIV, ZF_MNTH_END 
	INTO B11_12_TT_SNAPSHOT_BUKRS 
	FROM A_T001
	INNER JOIN AM_SCOPE ON A_T001.T001_BUKRS = AM_SCOPE.SCOPE_CMPNY_CODE
	CROSS JOIN B11_11_TT_SNAPSHOT_DATE
	ORDER BY
		T001_BUKRS, ZF_MNTH_END ASC

		

	EXEC SP_DROPTABLE 'B11_14_IT_AP_AGEING'

	EXEC SP_DROPTABLE 'B11_14_IT_AP_AGEING'
	SELECT
		B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_MANDT
		,B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BUKRS
		,B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_GJAHR
		,B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BELNR
		,B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BUZEI
		,B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END
		,B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_AUGDT
		,B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_LIFNR
		,B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_XANET
		,B11_05_IT_PTP_INVS_AND_CANCS.ZF_BSAIK_ZFBDT_ZBDXT_DUE_DATE
		,DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.ZF_BSAIK_ZFBDT_ZBDXT_DUE_DATE, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) ZF_SNAPSHOT_DATE_MINUS_BSAIK_DUE_DATE
		,B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BLDAT -- Document date
		,DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BLDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) AS ZF_SNAPSHOT_DATE_MINUS_BSAIK_BLDAT --Z_Age (document date)
		,B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_ZFBDT --Baseline date
		,DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_ZFBDT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) AS ZF_SNAPSHOT_DATE_MINUS_BSAIK_ZFBDT --Z_Age (baseline date)
		,B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BUDAT--Posting date
		,DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BUDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) AS ZF_SNAPSHOT_DATE_MINUS_BSAIK_BUDAT --Z_Age (posting date)
		,CASE 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.ZF_BSAIK_ZFBDT_ZBDXT_DUE_DATE, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) < -360 THEN '1. < -360' 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.ZF_BSAIK_ZFBDT_ZBDXT_DUE_DATE, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN -360 AND -181 THEN '2. -360 to -181'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.ZF_BSAIK_ZFBDT_ZBDXT_DUE_DATE, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN -180 AND -91 THEN '3. -180 to -91'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.ZF_BSAIK_ZFBDT_ZBDXT_DUE_DATE, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN -90 AND -31 THEN '4. -90 to -31'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.ZF_BSAIK_ZFBDT_ZBDXT_DUE_DATE, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN -30 AND -1 THEN '5. -30 to -1'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.ZF_BSAIK_ZFBDT_ZBDXT_DUE_DATE, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) = 0 THEN '6. = 0' 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.ZF_BSAIK_ZFBDT_ZBDXT_DUE_DATE, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN 0  AND 30 THEN '7. 1 to 30' 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.ZF_BSAIK_ZFBDT_ZBDXT_DUE_DATE, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN 30 AND 60 THEN '8. 31 to 60' 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.ZF_BSAIK_ZFBDT_ZBDXT_DUE_DATE, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN 60 AND 90 THEN '9. 61 to 90' 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.ZF_BSAIK_ZFBDT_ZBDXT_DUE_DATE, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN 90 AND 180 THEN '10. 91 to 180' 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.ZF_BSAIK_ZFBDT_ZBDXT_DUE_DATE, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN 180 AND 360 THEN '11. 181 to 360'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.ZF_BSAIK_ZFBDT_ZBDXT_DUE_DATE, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) > 360 THEN '12. > 360'
			ELSE 'No due date available'
		END ZF_BSAIK_ZBDXT_AGE_BUCKET
	   ,CASE 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BLDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) < -360 THEN '1. < -360' 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BLDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN -360 AND -181 THEN '2. -360 to -181'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BLDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN -180 AND -91 THEN '3. -180 to -91'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BLDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN -90 AND -31 THEN '4. -90 to -31'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BLDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN -30 AND -1 THEN '5. -30 to -1'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BLDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) = 0 THEN '6. = 0' 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BLDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN 0 AND 30 THEN '7. 1 to 30'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BLDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN 30 AND 60 THEN '8. 31 to 60'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BLDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN 60 AND 90 THEN '9. 61 to 90'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BLDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN 90 AND 180 THEN '10. 91 to 180'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BLDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN 180 AND 360 THEN '11. 181 to 360'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BLDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) > 360 THEN '12. > 360'
			ELSE 'No document date available'
		END ZF_BLDAT_AGE_BUCKET
	   ,CASE 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_ZFBDT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) < -360 THEN '1. < -360' 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_ZFBDT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN -360 AND -181 THEN '2. -360 to -181'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_ZFBDT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN -180 AND -91 THEN '3. -180 to -91'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_ZFBDT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN -90 AND -31 THEN '4. -90 to -31'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_ZFBDT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN -30 AND -1 THEN '5. -30 to -1'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_ZFBDT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) = 0 THEN '6. = 0' 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_ZFBDT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN 0 AND 30 THEN '7. 1 to 30' 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_ZFBDT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN 30 AND 60 THEN '8. 31 to 60' 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_ZFBDT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN 60 AND 90 THEN '9. 61 to 90' 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_ZFBDT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN 90 AND 180 THEN '10. 91 to 180' 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_ZFBDT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN 180 AND 360 THEN '11. 181 to 360'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_ZFBDT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) > 360 THEN '12. > 360'
			ELSE 'No baseline date available'
		END ZF_ZFBDT_AGE_BUCKET
	   ,CASE 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BUDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) < -360 THEN '1. < -360' 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BUDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN -360 AND -181 THEN '2. -360 to -181'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BUDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN -180 AND -91 THEN '3. -180 to -91'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BUDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN -90 AND -31 THEN '4. -90 to -31'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BUDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN -30 AND -1 THEN '5. -30 to -1'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BUDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) = 0 THEN '6. = 0'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BUDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN 0 AND 30 THEN '7. 1 to 30' 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BUDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN 30 AND 60 THEN '8. 31 to 60' 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BUDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN 60 AND 90 THEN '9. 91 to 90' 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BUDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN 90 AND 180 THEN '10. 91 to 180' 
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BUDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) BETWEEN 180 AND 360 THEN '11. 181 to 360'
			WHEN DATEDIFF(dd, B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BUDAT, B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END) > 360 THEN '12. > 360'
			ELSE 'No posting date available'
		END ZF_BUDAT_AGE_BUCKET
	INTO B11_14_IT_AP_AGEING
	FROM B11_05_IT_PTP_INVS_AND_CANCS
	LEFT JOIN B11_12_TT_SNAPSHOT_BUKRS
	ON  B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BUKRS = B11_12_TT_SNAPSHOT_BUKRS.T001_BUKRS
	WHERE (ISNULL(B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_AUGDT, '') = '' AND B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BUDAT <= B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END )
	--EXTRA SCRIPT
	OR (B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_AUGDT > B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END  AND B11_05_IT_PTP_INVS_AND_CANCS.BSAIK_BUDAT <= B11_12_TT_SNAPSHOT_BUKRS.ZF_MNTH_END )

/*Rename fields for Qlik*/
EXEC sp_RENAME_FIELD 'B11_', 'B11_05_IT_PTP_INVS_AND_CANCS'
EXEC sp_RENAME_FIELD 'B11B_', 'B11_04_IT_PTP_APA'
EXEC sp_RENAME_FIELD 'B11C_', 'B11_06_IT_PTP_INV'
EXEC sp_RENAME_FIELD 'B11D_', 'B11_07_IT_PTP_INV_CANC'
EXEC sp_RENAME_FIELD 'B11E_', 'B11_08_IT_PTP_PAY'
EXEC sp_RENAME_FIELD 'B11F_', 'B11_09_IT_PTP_PAY_CANC'
EXEC sp_RENAME_FIELD 'B11G_', 'B11_14_IT_AP_AGEING'

/* 
	Thuan : 08/02/2021 Make payment date dashboard. Base on request from Jesper. */
EXEC SP_DROPTABLE 'B11_15_IT_INV_PAY'
SELECT A.*, B.*
	   ,CASE 
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BUDAT, B.B11E_BSAIK_BUDAT) < -360 THEN '1. < -360' 
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BUDAT, B.B11E_BSAIK_BUDAT) BETWEEN -360 AND -181 THEN '2. -360 to -181'
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BUDAT, B.B11E_BSAIK_BUDAT) BETWEEN -180 AND -91 THEN '3. -180 to -91'
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BUDAT, B.B11E_BSAIK_BUDAT) BETWEEN -90 AND -31 THEN '4. -90 to -31'
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BUDAT, B.B11E_BSAIK_BUDAT) BETWEEN -30 AND -1 THEN '5. -30 to -1'
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BUDAT, B.B11E_BSAIK_BUDAT) = 0 THEN '6. = 0'
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BUDAT, B.B11E_BSAIK_BUDAT) BETWEEN 1 AND 33 THEN '7. 1 to 33' 
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BUDAT, B.B11E_BSAIK_BUDAT) BETWEEN 34 AND 60 THEN '8. 34 t0 60' 
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BUDAT, B.B11E_BSAIK_BUDAT) BETWEEN 61 AND 90 THEN '9. 61 to 90' 
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BUDAT, B.B11E_BSAIK_BUDAT) BETWEEN 91 AND 120 THEN '10. 91 to 120' 
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BUDAT, B.B11E_BSAIK_BUDAT) BETWEEN 121 AND 180 THEN '11. 121 to 180' 
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BUDAT, B.B11E_BSAIK_BUDAT) BETWEEN 181 AND 360 THEN '12. 181 to 360'
			ELSE '13. > 360'
		END ZF_PAY_MINUS_INV_BUDAT_BUCKET
		,CASE 
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BLDAT, B.B11E_BSAIK_BLDAT) < -360 THEN '1. < -360' 
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BLDAT, B.B11E_BSAIK_BLDAT) BETWEEN -360 AND -181 THEN '2. -360 to -181'
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BLDAT, B.B11E_BSAIK_BLDAT) BETWEEN -180 AND -91 THEN '3. -180 to -91'
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BLDAT, B.B11E_BSAIK_BLDAT) BETWEEN -90 AND -31 THEN '4. -90 to -31'
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BLDAT, B.B11E_BSAIK_BLDAT) BETWEEN -30 AND -1 THEN '5. -30 to -1'
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BLDAT, B.B11E_BSAIK_BLDAT) = 0 THEN '6. = 0' 
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BLDAT, B.B11E_BSAIK_BLDAT) BETWEEN 1 AND 33 THEN '7. 1 to 33' 
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BLDAT, B.B11E_BSAIK_BLDAT) BETWEEN 34 AND 60 THEN '8. 34 to 60' 
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BLDAT, B.B11E_BSAIK_BLDAT) BETWEEN 61 AND 90 THEN '9. 61 to 90' 
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BLDAT, B.B11E_BSAIK_BLDAT) BETWEEN 91 AND 120 THEN '10. 91 to 120' 
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BLDAT, B.B11E_BSAIK_BLDAT) BETWEEN 121 AND 180 THEN '11. 121 to 180' 
			WHEN DATEDIFF(dd, A.B11C_BSAIK_BLDAT, B.B11E_BSAIK_BLDAT) BETWEEN 181 AND 360 THEN '12. 181 to 360'
			ELSE '13. > 360'
		END ZF_PAY_MINUS_INV_BLDAT_BUCKET
INTO B11_15_IT_INV_PAY
FROM B11_06_IT_PTP_INV AS A
INNER  JOIN B11_08_IT_PTP_PAY AS B
ON A.B11C_BSAIK_BUKRS = B.B11E_BSAIK_BUKRS
AND A.B11C_BSAIK_AUGBL = B.B11E_BSAIK_AUGBL
AND A.B11C_BSAIK_AUGGJ = B.B11E_BSAIK_AUGGJ
WHERE A.B11C_BSAIK_AUGBL <> '' AND B.B11E_BSAIK_AUGBL <> '' 


/*Remove temporary tables*/

--EXEC sp_droptable 'B11_01_TT_RSEG'
--EXEC SP_DROPTABLE 'B11_02_TT_JE_MULTIPLE_SUPP'
--EXEC SP_DROPTABLE 'B11_03_TT_PTP_APA'
EXEC SP_REMOVE_TABLES '%_TT_%'

/* log cube creation*/

INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Cube completed','B11_05_IT_PTP_INVS_AND_CANCS',(SELECT COUNT(*) FROM B11_05_IT_PTP_INVS_AND_CANCS) 
INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Cube completed','B11_04_IT_PTP_APA',(SELECT COUNT(*) FROM B11_04_IT_PTP_APA) 
INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Cube completed','B11_06_IT_PTP_INV',(SELECT COUNT(*) FROM B11_06_IT_PTP_INV) 
INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Cube completed','B11_07_IT_PTP_INV_CANC',(SELECT COUNT(*) FROM B11_07_IT_PTP_INV_CANC) 
INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Cube completed','B11_08_IT_PTP_PAY',(SELECT COUNT(*) FROM B11_08_IT_PTP_PAY) 
INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Cube completed','B11_09_IT_PTP_PAY_CANC',(SELECT COUNT(*) FROM B11_09_IT_PTP_PAY_CANC) 


/* log end of procedure*/

--EXEC SP_DROPTABLE 'B11_04_IT_PTP_APA'
INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(date,GETDATE()),CONVERT(time,GETDATE()),'Procedure finished',NULL,NULL
GO
