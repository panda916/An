USE [DIVA_SAP_USAGE_ECC]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[script_B22_SOD_MATRIX_PART1_UPTO_STEP7]
AS
--DYNAMIC_SCRIPT_START
EXEC SP_REMOVE_TABLES 'B22[_]%[_]TT%'

-- Claire: This script is from the SOD MASTER B22_SOD_MATRIX script for part 1 up to step 7.
--- The script is identical to that already validated, except for:
--- 1/ The profile has been added to each part of step 7
--- 2/ the name of the table B22_09_TT has been changed to B22_09_IT
---- This cube is not perfect, becuase we do not eliminate in step 7 those users without sufficient authorizations, so 
---- even if they have the profile, it does not necessarily mean that it is active, in that they might not have any valid trasnaction 
---- codes that can use that profile

-- Step 1: Check if the user is active/ valid, etc. (Only select users who have been active since 2018 upwards)
	-- https://answers.sap.com/questions/7573093/values-of-field-uflag-in-table-usr02.html
	-- USR02_USTYP should start with A, as requested by Jesper
	EXEC SP_DROPTABLE 'B22_00_TT_USR02_BNAME_ACTIVE'
	SELECT DISTINCT  USR02_BNAME 
	INTO B22_00_TT_USR02_BNAME_ACTIVE 
	FROM A_USR02
	WHERE USR02_UFLAG = 0 OR USR02_UFLAG = 128 
	--INNER JOIN AM_BNAME_SCOPE ON USR02_BNAME LIKE BNAME
	--WHERE (USR02_USTYP LIKE 'A%') -- AND USR02_UFLAG = 0) AND USR02_TRDAT >= '2018-01-01'  --AND USR02_BNAME = 'SCAJJE00'
 --   AND EXISTS(SELECT * FROM AM_CURRENT_USER_FROM_DATABASE WHERE USR02_BNAME = ZF_SOURCE_USNAM)
    --AND (NOT USR02_BNAME LIKE 'CUT[_]%' AND NOT USR02_BNAME LIKE 'SAP%' AND NOT USR02_BNAME LIKE 'OSS%')

	ALTER TABLE B22_00_TT_USR02_BNAME_ACTIVE ALTER COLUMN USR02_BNAME VARCHAR(70)

-- Step 2: Obtain the profiles that the user has access to
	SELECT DISTINCT
		   B22_00_TT_USR02_BNAME_ACTIVE.USR02_BNAME,
		   A_UST04.UST04_PROFILE
	INTO B22_01_TT_UST04_BNAME_PROFN
	FROM B22_00_TT_USR02_BNAME_ACTIVE  -- Get profile from UST04 table
	LEFT JOIN A_UST04 ON B22_00_TT_USR02_BNAME_ACTIVE.USR02_BNAME = A_UST04.UST04_BNAME


-- Step 3: Create TSTC table with valid program TSTC_PGMNA should not be blank
	SELECT DISTINCT TSTC_TCODE INTO B22_04_TT_TSTC_VALID_PGM FROM A_TSTC 
	--INNER JOIN AM_TSTC_CINFO_MAPPING 
	--		ON dbo.REMOVE_LEADING_ZEROES(A_TSTC.TSTC_CINFO) = dbo.REMOVE_LEADING_ZEROES(AM_TSTC_CINFO_MAPPING.TSTC_CINFO) 
			
	WHERE ISNULL(TSTC_PGMNA, '') <> '' -- AND TSTC_CINFO_LOCK = 'N'
	CREATE INDEX TSTC_TCODE ON B22_04_TT_TSTC_VALID_PGM(TSTC_TCODE)

-- Step 3B: Create UST10S and UST10C table with valid Auth Objct

	SELECT * INTO B22_04B_TT_UST10S_VALID_AUTH FROM A_UST10S
	WHERE UST10S_AKTPS LIKE 'A%'
	--AND	(NOT EXISTS (SELECT 1 FROM A_USR12 WHERE UST10S_AUTH = USR12_AUTH 
	--											AND UST10S_OBJCT = USR12_OBJCT 
	--											AND USR12_AKTPS NOT LIKE 'A%')
	--	OR NOT EXISTS (SELECT 1 FROM A_USR13 WHERE UST10S_AUTH = USR13_AUTH 
	--												AND UST10S_OBJCT = USR13_OBJCT 
	--												AND USR13_AKTPS  NOT LIKE 'A%'))
	
-- Step 4A: If there are composite profiles, denormalize into the full list (only for those that are active)
	SELECT DISTINCT A.UST10C_PROFN, A.UST10C_SUBPROF 
	INTO B22_05_TT_UST10_PROFN_NORMALIZED
	FROM A_UST10C A
	UNION
	SELECT DISTINCT A.UST10C_PROFN, A.UST10C_PROFN
	FROM A_UST10C A

	WHILE EXISTS(SELECT A.UST10C_PROFN
					FROM B22_05_TT_UST10_PROFN_NORMALIZED A
					INNER JOIN A_UST10C B ON A.UST10C_SUBPROF = B.UST10C_PROFN AND UST10C_AKTPS LIKE 'A%'
					WHERE NOT EXISTS(SELECT * FROM B22_05_TT_UST10_PROFN_NORMALIZED C 
												WHERE A.UST10C_PROFN = C.UST10C_PROFN 
												AND C.UST10C_SUBPROF = B.UST10C_SUBPROF))
	BEGIN
		INSERT INTO B22_05_TT_UST10_PROFN_NORMALIZED
		SELECT DISTINCT A.UST10C_PROFN, B.UST10C_SUBPROF 
		FROM B22_05_TT_UST10_PROFN_NORMALIZED A
		INNER JOIN A_UST10C B ON A.UST10C_SUBPROF = B.UST10C_PROFN AND UST10C_AKTPS LIKE 'A%'
		WHERE NOT EXISTS(SELECT * FROM B22_05_TT_UST10_PROFN_NORMALIZED C 
									WHERE A.UST10C_PROFN = C.UST10C_PROFN 
									AND C.UST10C_SUBPROF = B.UST10C_SUBPROF)
	END
	
	-- Union both normalized profile list with existing single profile list in UST10S
	SELECT * 
	INTO B22_06A_TT_UST10_PROFN_FULL_LIST
	FROM B22_05_TT_UST10_PROFN_NORMALIZED
	--WHERE EXISTS (SELECT 1 FROM A_USR10 WHERE A_USR10.USR10_PROFN = UST10C_SUBPROF
	--												AND USR10_AKTPS LIKE 'A%')
	--		OR EXISTS (SELECT 1 FROM A_USR11 WHERE USR11_PROFN = UST10C_SUBPROF
	--													AND USR11_AKTPS LIKE 'A%')
	UNION
	SELECT DISTINCT UST10S_PROFN, UST10S_PROFN 
	FROM B22_04B_TT_UST10S_VALID_AUTH
	--WHERE NOT EXISTS(SELECT * FROM B22_05_TT_UST10_PROFN_NORMALIZED 
	--							WHERE UST10C_PROFN = UST10S_PROFN)
	--	AND ( NOT EXISTS (SELECT 1 FROM A_USR10 WHERE A_USR10.USR10_PROFN = UST10S_PROFN
	--												AND USR10_AKTPS NOT LIKE 'A%')
	--		OR NOT EXISTS (SELECT 1 FROM A_USR11 WHERE USR11_PROFN = UST10S_PROFN
	--													AND USR11_AKTPS NOT LIKE 'A%'))
	
-- Step 4B: denormalize/flatten structure of composite role into full list
	SELECT AGR_AGRS_AGR_NAME, AGR_AGRS_CHILD_AGR INTO B22_06B_TT_AGR_ROLE_NORMALIZED FROM A_AGR_AGRS
	UNION
	SELECT AGR_AGRS_AGR_NAME, AGR_AGRS_AGR_NAME FROM A_AGR_AGRS
	DECLARE @c INT = 1

	WHILE @c <> 0
	BEGIN
		INSERT INTO B22_06B_TT_AGR_ROLE_NORMALIZED
		SELECT DISTINCT 
			A.AGR_AGRS_AGR_NAME, 
			B.AGR_AGRS_CHILD_AGR 
		FROM B22_06B_TT_AGR_ROLE_NORMALIZED A
		INNER JOIN B22_06B_TT_AGR_ROLE_NORMALIZED B ON A.AGR_AGRS_CHILD_AGR = B.AGR_AGRS_AGR_NAME
		WHERE NOT EXISTS(SELECT * FROM B22_06B_TT_AGR_ROLE_NORMALIZED C 
							WHERE A.AGR_AGRS_AGR_NAME = C.AGR_AGRS_AGR_NAME 
							AND B.AGR_AGRS_CHILD_AGR = C.AGR_AGRS_CHILD_AGR)
		
		SET @c = (SELECT COUNT(*) FROM B22_06B_TT_AGR_ROLE_NORMALIZED A
						INNER JOIN B22_06B_TT_AGR_ROLE_NORMALIZED B ON A.AGR_AGRS_CHILD_AGR = B.AGR_AGRS_AGR_NAME
						WHERE NOT EXISTS(SELECT * FROM B22_06B_TT_AGR_ROLE_NORMALIZED C 
												WHERE A.AGR_AGRS_AGR_NAME = C.AGR_AGRS_AGR_NAME 
												AND B.AGR_AGRS_CHILD_AGR = C.AGR_AGRS_CHILD_AGR))
		
	END

-- Step 4C: Update missing roles from AGR_USERS to AGR_AGRS normalized table
	INSERT INTO B22_06B_TT_AGR_ROLE_NORMALIZED
	SELECT DISTINCT AGR_USERS_AGR_NAME, AGR_USERS_AGR_NAME FROM A_AGR_USERS
	WHERE 
	-- only update the mising role
	NOT EXISTS(SELECT * FROM B22_06B_TT_AGR_ROLE_NORMALIZED WHERE AGR_AGRS_AGR_NAME = AGR_USERS_AGR_NAME)


-- Step 7: Combine Authorization objects from Profile and Role
	--Get profile, objct, auth 
	--Get VON and BIS from UST12
	EXEC SP_DROPTABLE 'B22_09_IT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE'
	SELECT DISTINCT 
		A.USR02_BNAME,
		UST12_AUTH AS ZF_AGR_UST12_AUTH,
		UST12_OBJCT AS ZF_AGR_UST12_OBJCT,
		UST12_FIELD AS ZF_AGR_UST12_FIELD,
		UST12_VON AS ZF_AGR_UST12_VON, 
		UST12_BIS AS ZF_AGR_UST12_BIS,
		UST04_PROFILE AS ZF_AGR_UST12_PROFILE
	INTO B22_09_IT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
	FROM B22_01_TT_UST04_BNAME_PROFN AS A
	-- get the sub profiles for the user, keeping also all the parent profiles
	INNER JOIN B22_06A_TT_UST10_PROFN_FULL_LIST B 
			ON A.UST04_PROFILE = B.UST10C_PROFN
	-- get AUTH and OBJCT
	INNER JOIN B22_04B_TT_UST10S_VALID_AUTH ON B.UST10C_SUBPROF = UST10S_PROFN
	-- get the FIELD, VON and BIS
	INNER JOIN A_UST12 ON UST12_AUTH = UST10S_AUTH AND UST12_OBJCT = UST10S_OBJCT AND UST12_AKTPS LIKE 'A%'
	
	
	UNION

	--Get profile, objct, auth from ROLE table AGR_1251
	SELECT DISTINCT AGR_USERS_UNAME, AGR_1251_AUTH, AGR_1251_OBJECT, AGR_1251_FIELD, AGR_1251_LOW, AGR_1251_HIGH , '' AS ZF_PROFILE
	FROM A_AGR_USERS
	-- Limit on active users
	INNER JOIN B22_00_TT_USR02_BNAME_ACTIVE 
					ON AGR_USERS_UNAME = USR02_BNAME
	-- Get the child role (left because maybe some parents without child or users without child roles)
	LEFT JOIN B22_06B_TT_AGR_ROLE_NORMALIZED 
					ON AGR_AGRS_AGR_NAME = AGR_USERS_AGR_NAME
	-- Using child or parent role, get the auth, object, field, low, high
	INNER JOIN A_AGR_1251 
					ON ISNULL(AGR_AGRS_CHILD_AGR ,AGR_USERS_AGR_NAME) = AGR_1251_AGR_NAME
	WHERE AGR_1251_DELETED <> 'X' 
	
	UNION
	
	--Get profile, objct, auth from Role table AGR_1016
	SELECT DISTINCT AGR_USERS_UNAME, UST12_AUTH, UST12_OBJCT, UST12_FIELD, UST12_VON, UST12_BIS,
	AGR_1016_PROFILE
	FROM A_AGR_USERS
	-- Limit on active users
	INNER JOIN B22_00_TT_USR02_BNAME_ACTIVE 
					ON AGR_USERS_UNAME = USR02_BNAME
    -- Get the child role (left because maybe some parents without child or users without child roles)
	LEFT JOIN B22_06B_TT_AGR_ROLE_NORMALIZED 
					ON AGR_AGRS_AGR_NAME = AGR_USERS_AGR_NAME
	
	INNER JOIN A_AGR_1016 AA 
					ON AGR_1016_PSTATE like 'A%' 
					AND ISNULL(AGR_AGRS_CHILD_AGR ,AGR_USERS_AGR_NAME) = AA.AGR_1016_AGR_NAME
	INNER JOIN B22_06A_TT_UST10_PROFN_FULL_LIST 
					ON AA.AGR_1016_PROFILE = UST10C_PROFN
	INNER JOIN B22_04B_TT_UST10S_VALID_AUTH 
					ON UST10S_PROFN = UST10C_SUBPROF
	INNER JOIN A_UST12  
					ON UST12_AUTH = UST10S_AUTH AND UST12_OBJCT = UST10S_OBJCT AND UST12_AKTPS LIKE 'A%'
	
	UNION
	
	--Get profile, objct, auth from Role table AGR_PROF
	SELECT DISTINCT AGR_USERS_UNAME, UST12_AUTH, AU.UST12_OBJCT, AU.UST12_FIELD, AU.UST12_VON, AU.UST12_BIS,
	AGR_PROF_PROFILE
	FROM A_AGR_USERS
	INNER JOIN B22_00_TT_USR02_BNAME_ACTIVE 
					ON AGR_USERS_UNAME = USR02_BNAME
	LEFT JOIN B22_06B_TT_AGR_ROLE_NORMALIZED 
					ON AGR_AGRS_AGR_NAME = AGR_USERS_AGR_NAME
	INNER JOIN A_AGR_PROF AA 
					ON ISNULL(AGR_AGRS_CHILD_AGR ,AGR_USERS_AGR_NAME) = AA.AGR_PROF_AGR_NAME
	INNER JOIN B22_06A_TT_UST10_PROFN_FULL_LIST 
					ON AA.AGR_PROF_PROFILE = UST10C_PROFN
	INNER JOIN B22_04B_TT_UST10S_VALID_AUTH 
					ON UST10S_PROFN = UST10C_SUBPROF
	INNER JOIN A_UST12 AU 
					ON AU.UST12_AUTH = UST10S_AUTH AND AU.UST12_OBJCT = UST10S_OBJCT
GO
