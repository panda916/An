USE [DIVA_SAP_USAGE_ECC]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[script_BP06_DUPLICATE_INVOICES]

AS 

--DYNAMIC_SCRIPT_START
/* Initialize parameters from globals table */

/* Initialize parameters from globals table */

	 DECLARE 	 
			 @CURRENCY NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'currency')
			,@DATE1 NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'date1')
			,@DATE2 NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'date2')
			,@DOWNLOADDATE NVARCHAR(MAX)		= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'downloaddate')
			,@DATEFORMAT VARCHAR(3)             = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'dateformat')
			,@EXCHANGERATETYPE NVARCHAR(MAX)	= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'exchangeratetype')
			,@LANGUAGE1 NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'language1')
			,@LANGUAGE2 NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'language2')
			,@YEAR NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'year')
			,@ID NVARCHAR(MAX)					= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'id')
			,@LIMIT_RECORDS INT		            = CAST((SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'LIMIT_RECORDS') AS INT)


/*Test mode*/

SET ROWCOUNT @LIMIT_RECORDS

/*Change history comments*/

/*
	Title			:	BP06: Duplicate invoices ECC
	  
	--------------------------------------------------------------
	Update history
	--------------------------------------------------------------
	Date		    | Who |	Description
	18-07-2022		  Dat	First version for Sony  

*/

EXEC SP_REMOVE_TABLES 'BP06%'

-- Step 1/ Filter supplier payment duplicate 
-- Group by base on 4 fields: LIFNR, XBLNR, BLDAT, WRBTR
-- Take which case having count 4 fields above > 1
-- Thuan Update : 29/11/2022 : Make sure XBLNR, LIFRN and BUDAT are not null and Doc amount <> 0

EXEC SP_DROPTABLE 'BP06_00_TT_PAY_DUP'
SELECT 
-- Key link with B11_06_IT_PTP_INV table
    CONVERT(nvarchar,B11C_BSAIK_LIFNR)+CONVERT(nvarchar,B11C_BSAIK_XBLNR)+CONVERT(nvarchar,B11C_BSAIK_BLDAT)+CONVERT(nvarchar,B11C_BSAIK_WRBTR) AS ZF_DUP_KEY
INTO BP06_00_TT_PAY_DUP
FROM B11_06_IT_PTP_INV
WHERE B11C_BSAIK_WRBTR <> 0 
	AND ISNULL(B11C_BSAIK_XBLNR, '') <> ''
	AND ISNULL(B11C_BSAIK_LIFNR, '') <> ''
	AND ISNULL(B11C_BSAIK_BLDAT, '') <> ''	
GROUP BY 
    B11C_BSAIK_LIFNR,
    B11C_BSAIK_XBLNR,
    B11C_BSAIK_BLDAT,
    B11C_BSAIK_WRBTR
HAVING COUNT(*) > 1 

-- Step 2/ Create table of supplier payment duplicated
-- Left join with B11_06_IT_PTP_INV table base on 4 fields: LIFNR, XBLNR, BLDAT, WRBTR to get payment duplicated


EXEC SP_DROPTABLE 'BP06_01_TT_PAY_DUP'

SELECT DISTINCT 
	A.*
INTO BP06_01_TT_PAY_DUP
FROM   B11_06_IT_PTP_INV AS A
INNER JOIN BP06_00_TT_PAY_DUP 
ON 
	CONVERT(nvarchar,A.B11C_BSAIK_LIFNR)+
		CONVERT(nvarchar,A.B11C_BSAIK_XBLNR)+
			CONVERT(nvarchar,A.B11C_BSAIK_BLDAT)+
				CONVERT(nvarchar,A.B11C_BSAIK_WRBTR) = 
					ZF_DUP_KEY


EXEC SP_DROPTABLE 'BP06_01_TT_PAY_DUP'

SELECT DISTINCT 
	A.*
INTO BP06_01_TT_PAY_DUP
FROM   BP06_00_TT_PAY_DUP 
LEFT JOIN B11_06_IT_PTP_INV AS A
ON 
	CONVERT(nvarchar,A.B11C_BSAIK_LIFNR)+
		CONVERT(nvarchar,A.B11C_BSAIK_XBLNR)+
			CONVERT(nvarchar,A.B11C_BSAIK_BLDAT)+
				CONVERT(nvarchar,A.B11C_BSAIK_WRBTR) = 
					ZF_DUP_KEY


	

-- Step 3/ Classify each duplicate invoice based on scenario
-- Scenario 1:Same supplier/document date/document value/External document number
-- Scenario 2:Same document date/document value/External document number
-- Scenario 3:Same Supplier/document value/External document number
-- Scenario 4:Same Supplier/document date/External document number
-- Scenario 5:Same Supplier/document date/document value' 
-- Scenario 6:Same supplier name/Document amount/External document number	

EXEC SP_DROPTABLE 'BP06_02_IT_PAY_DUP'
SELECT 
		
		CASE
		WHEN SCENARIO_1.B11C_BSAIK_BUKRS IS NOT NULL THEN 'Test 1:Same supplier/Doc date/Doc value/External Doc number' 
		WHEN SCENARIO_2.B11C_BSAIK_BUKRS IS NOT NULL THEN 'Test 2:Same Doc date/Doc value/External Doc number' 
		WHEN SCENARIO_3.B11C_BSAIK_BUKRS IS NOT NULL THEN 'Test 3:Same Supplier/Doc value/External Doc number' 
		WHEN SCENARIO_4.B11C_BSAIK_BUKRS IS NOT NULL THEN 'Test 4:Same Supplier/Doc date/External Doc number' 
		WHEN SCENARIO_5.B11C_BSAIK_BUKRS IS NOT NULL THEN 'Test 5:Same Supplier/Doc date/Doc value' 
		WHEN SCENARIO_6.B11C_BSAIK_BUKRS IS NOT NULL THEN 'Test 6:Same Supplier name/Doc value/External Doc number' 
	END ZF_SCENARIO_DESC,
		CASE
		WHEN SCENARIO_1.B11C_BSAIK_BUKRS IS NOT NULL THEN 'YES' 
		ELSE 'NO'
	END ZF_TEST_1 ,
		CASE
		WHEN SCENARIO_2.B11C_BSAIK_BUKRS IS NOT NULL THEN 'YES' 
		ELSE 'NO'
	END ZF_TEST_2 ,
		CASE 
		WHEN SCENARIO_3.B11C_BSAIK_BUKRS IS NOT NULL THEN 'YES' 
		ELSE 'NO'
	END ZF_TEST_3 ,
		CASE 
		WHEN SCENARIO_4.B11C_BSAIK_BUKRS IS NOT NULL THEN 'YES' 
		ELSE 'NO'
	END ZF_TEST_4 ,
		CASE 
		WHEN SCENARIO_5.B11C_BSAIK_BUKRS IS NOT NULL THEN 'YES' 
		ELSE 'NO'
	END ZF_TEST_5 ,
		CASE 
		WHEN SCENARIO_6.B11C_BSAIK_BUKRS IS NOT NULL THEN 'YES' 
		ELSE 'NO'
	END ZF_TEST_6 ,
	CASE
		WHEN SCENARIO_1.B11C_BSAIK_BUKRS IS NOT NULL THEN SCENARIO_1.ZF_SCENARIO_ID
		WHEN SCENARIO_2.B11C_BSAIK_BUKRS IS NOT NULL THEN SCENARIO_2.ZF_SCENARIO_ID
		WHEN SCENARIO_3.B11C_BSAIK_BUKRS IS NOT NULL THEN SCENARIO_3.ZF_SCENARIO_ID
		WHEN SCENARIO_4.B11C_BSAIK_BUKRS IS NOT NULL THEN SCENARIO_4.ZF_SCENARIO_ID
		WHEN SCENARIO_5.B11C_BSAIK_BUKRS IS NOT NULL THEN SCENARIO_5.ZF_SCENARIO_ID
		WHEN SCENARIO_6.B11C_BSAIK_BUKRS IS NOT NULL THEN SCENARIO_6.ZF_SCENARIO_ID
	END ZF_SCENARIO_ID,

	BP06_01_TT_PAY_DUP.*,
	-- Add Document is flagged for reversal
	BKPF_XSTOV AS B11C_BSAIK_XSTOV,
	-- Add reversal document number
	BKPF_STBLG AS B11C_BSAIK_STBLG,
	-- Add reversal document year
	BKPF_STJAH AS B11C_BSAIK_STJAH

INTO BP06_02_IT_PAY_DUP

FROM BP06_01_TT_PAY_DUP
	LEFT JOIN A_BKPF
	ON  B11C_BSAIK_BUKRS = BKPF_BUKRS
	AND B11C_BSAIK_GJAHR = BKPF_GJAHR
	AND B11C_BSAIK_BELNR = BKPF_BELNR
	--SCENARIO 1 EXACT SUPPLIER/DOC DATE/DOC VALUE/EXTERNAL DOC NUMBER
	OUTER APPLY (SELECT TOP 1 B.B11C_BSAIK_BUKRS, CONCAT('LIFNR:', B.B11C_BSAIK_LIFNR, '_XBLNR:', B.B11C_BSAIK_XBLNR , '_BLDAT:', B.B11C_BSAIK_BLDAT, '_WRBTR:',B.B11C_BSAIK_WRBTR) AS ZF_SCENARIO_ID
						FROM BP06_01_TT_PAY_DUP B WHERE BP06_01_TT_PAY_DUP.B11C_BSAIK_LIFNR = B.B11C_BSAIK_LIFNR
												AND  BP06_01_TT_PAY_DUP.B11C_BSAIK_BLDAT = B.B11C_BSAIK_BLDAT
												AND BP06_01_TT_PAY_DUP.B11C_BSAIK_WRBTR = B.B11C_BSAIK_WRBTR
												AND BP06_01_TT_PAY_DUP.B11C_BSAIK_XBLNR = B.B11C_BSAIK_XBLNR
												AND BP06_01_TT_PAY_DUP.B11C_BSAIK_BUKRS + BP06_01_TT_PAY_DUP.B11C_BSAIK_GJAHR + BP06_01_TT_PAY_DUP.B11C_BSAIK_BELNR <> B.B11C_BSAIK_BUKRS + B.B11C_BSAIK_GJAHR + B.B11C_BSAIK_BELNR
												) SCENARIO_1
	-- SCENARIO 2 EXACT DOC DATE/DOC VALUE/EXTERNAL DOC NUMBER
	OUTER APPLY(SELECT TOP 1 B.B11C_BSAIK_BUKRS, CONCAT('_XBLNR:', B.B11C_BSAIK_XBLNR, '_BLDAT:', B.B11C_BSAIK_BLDAT, '_WRBTR:', B.B11C_BSAIK_WRBTR) AS ZF_SCENARIO_ID
							FROM BP06_01_TT_PAY_DUP B 
							WHERE  B.B11C_BSAIK_BLDAT = BP06_01_TT_PAY_DUP.B11C_BSAIK_BLDAT
														AND B.B11C_BSAIK_WRBTR = BP06_01_TT_PAY_DUP.B11C_BSAIK_WRBTR
														AND B.B11C_BSAIK_XBLNR = BP06_01_TT_PAY_DUP.B11C_BSAIK_XBLNR
														AND BP06_01_TT_PAY_DUP.B11C_BSAIK_BUKRS + BP06_01_TT_PAY_DUP.B11C_BSAIK_GJAHR + BP06_01_TT_PAY_DUP.B11C_BSAIK_BELNR <> B.B11C_BSAIK_BUKRS + B.B11C_BSAIK_GJAHR + B.B11C_BSAIK_BELNR
														) SCENARIO_2
	-- SCENARIO 3 EXACT SUPPLIER/DOC VALUE/EXTERNAL DOC NUMBER
	OUTER APPLY(SELECT TOP 1 B.B11C_BSAIK_BUKRS, CONCAT('LIFNR:', B.B11C_BSAIK_LIFNR, '_XBLNR:', B.B11C_BSAIK_XBLNR, '_WRBTR:', B.B11C_BSAIK_WRBTR) AS ZF_SCENARIO_ID
						FROM BP06_01_TT_PAY_DUP B 
						WHERE B.B11C_BSAIK_LIFNR = BP06_01_TT_PAY_DUP.B11C_BSAIK_LIFNR													 
													AND B.B11C_BSAIK_WRBTR = BP06_01_TT_PAY_DUP.B11C_BSAIK_WRBTR
													AND B.B11C_BSAIK_XBLNR = BP06_01_TT_PAY_DUP.B11C_BSAIK_XBLNR
													AND BP06_01_TT_PAY_DUP.B11C_BSAIK_BUKRS + BP06_01_TT_PAY_DUP.B11C_BSAIK_GJAHR + BP06_01_TT_PAY_DUP.B11C_BSAIK_BELNR <> B.B11C_BSAIK_BUKRS + B.B11C_BSAIK_GJAHR + B.B11C_BSAIK_BELNR
													) SCENARIO_3
	-- SCENARIO 4 EXACT SUPPLIER/DOC DATE/EXTERNAL DOC NUMBER
	OUTER APPLY(SELECT TOP 1 B.B11C_BSAIK_BUKRS, CONCAT('LIFNR:', B.B11C_BSAIK_LIFNR, '_BLDAT:', B.B11C_BSAIK_BLDAT, '_XBLNR:', B.B11C_BSAIK_XBLNR) AS ZF_SCENARIO_ID
						FROM BP06_01_TT_PAY_DUP B 
						WHERE BP06_01_TT_PAY_DUP.B11C_BSAIK_LIFNR = B.B11C_BSAIK_LIFNR
													AND B.B11C_BSAIK_XBLNR = BP06_01_TT_PAY_DUP.B11C_BSAIK_XBLNR
													AND B.B11C_BSAIK_BLDAT = BP06_01_TT_PAY_DUP.B11C_BSAIK_BLDAT
													AND BP06_01_TT_PAY_DUP.B11C_BSAIK_BUKRS + BP06_01_TT_PAY_DUP.B11C_BSAIK_GJAHR + BP06_01_TT_PAY_DUP.B11C_BSAIK_BELNR <> B.B11C_BSAIK_BUKRS + B.B11C_BSAIK_GJAHR + B.B11C_BSAIK_BELNR
													) SCENARIO_4
	-- SCENARIO 5 EXACT SUPPLIER/DOC DATE/DOC VALUE
	OUTER APPLY(SELECT TOP 1 B.B11C_BSAIK_BUKRS, CONCAT('LIFNR:',B.B11C_BSAIK_LIFNR , '_BLDAT:', B.B11C_BSAIK_BLDAT,'_WRBTR:',B.B11C_BSAIK_WRBTR ) AS ZF_SCENARIO_ID
						FROM BP06_01_TT_PAY_DUP B WHERE B.B11C_BSAIK_LIFNR = BP06_01_TT_PAY_DUP.B11C_BSAIK_LIFNR
													AND B.B11C_BSAIK_WRBTR = BP06_01_TT_PAY_DUP.B11C_BSAIK_WRBTR
													AND B.B11C_BSAIK_BLDAT = BP06_01_TT_PAY_DUP.B11C_BSAIK_BLDAT
													AND BP06_01_TT_PAY_DUP.B11C_BSAIK_BUKRS + BP06_01_TT_PAY_DUP.B11C_BSAIK_GJAHR + BP06_01_TT_PAY_DUP.B11C_BSAIK_BELNR <> B.B11C_BSAIK_BUKRS + B.B11C_BSAIK_GJAHR + B.B11C_BSAIK_BELNR
													) SCENARIO_5
	-- SCENARIO 6 EXACT SUPPLIER NAME/DOC VALUE/EXTERNAL DOCUMENT NR
	OUTER APPLY(SELECT TOP 1 B.B11C_BSAIK_BUKRS, CONCAT('NAME1:',B.B11C_LFA1_NAME1 ,'_WRBTR:',B.B11C_BSAIK_WRBTR,'_XBLNR:', B.B11C_BSAIK_XBLNR ) AS ZF_SCENARIO_ID
						FROM BP06_01_TT_PAY_DUP B WHERE B.B11C_LFA1_NAME1 = BP06_01_TT_PAY_DUP.B11C_LFA1_NAME1
													AND B.B11C_BSAIK_WRBTR = BP06_01_TT_PAY_DUP.B11C_BSAIK_WRBTR
													AND B.B11C_BSAIK_XBLNR = BP06_01_TT_PAY_DUP.B11C_BSAIK_XBLNR
													AND BP06_01_TT_PAY_DUP.B11C_BSAIK_BUKRS + BP06_01_TT_PAY_DUP.B11C_BSAIK_GJAHR + BP06_01_TT_PAY_DUP.B11C_BSAIK_BELNR <> B.B11C_BSAIK_BUKRS + B.B11C_BSAIK_GJAHR + B.B11C_BSAIK_BELNR
													) SCENARIO_6		

WHERE	SCENARIO_1.B11C_BSAIK_BUKRS IS NOT NULL
		OR SCENARIO_2.B11C_BSAIK_BUKRS IS NOT NULL
		OR SCENARIO_3.B11C_BSAIK_BUKRS IS NOT NULL
		OR SCENARIO_4.B11C_BSAIK_BUKRS IS NOT NULL
		OR SCENARIO_5.B11C_BSAIK_BUKRS IS NOT NULL
		OR SCENARIO_6.B11C_BSAIK_BUKRS IS NOT NULL

-- Step 4 / Create flags in supplier duplicate invoices table.
	
-- Step 4.1 Add invoices is paid flag : Supplier invoices can find in AP payment table ( AUGBL not empty)
-- Key Join : AUGBL and AUGDT
ALTER TABLE BP06_02_IT_PAY_DUP ADD ZF_INV_PAID_FLAG VARCHAR(3)

UPDATE BP06_02_IT_PAY_DUP
SET ZF_INV_PAID_FLAG = 
( 
	CASE
	WHEN  CONCAT(B11C_BSAIK_AUGBL,B11C_BSAIK_AUGDT)  IN
	(
		SELECT DISTINCT CONCAT(B11E_BSAIK_AUGBL,B11E_BSAIK_AUGDT)  
		FROM B11_08_IT_PTP_PAY -- Payment table
		WHERE B11E_BSAIK_AUGBL <> ''
	)  THEN 'YES'
	ELSE 'NO'
	END
)

-- Step 4.2 Add invoices is paid to ZP or KZ flag : Supplier invoices can find in AP full 
-- and document type is ZP or KZ ( AUGBL not empty)
-- Key Join : AUGBL and AUGGJ


ALTER TABLE BP06_02_IT_PAY_DUP  ADD  ZF_INV_PAID_KZ_ZP VARCHAR(3)


UPDATE BP06_02_IT_PAY_DUP
SET ZF_INV_PAID_KZ_ZP = 
(
	CASE
	WHEN  
	CONCAT(B11C_BSAIK_AUGBL,B11C_BSAIK_AUGDT) NOT IN
	(
		SELECT DISTINCT  CONCAT(B11E_BSAIK_AUGBL,B11E_BSAIK_AUGDT)  
		FROM B11_08_IT_PTP_PAY --Payment table
		WHERE B11E_BSAIK_AUGBL <> ''
		
	) 	
	AND CONCAT(B11C_BSAIK_AUGBL,B11C_BSAIK_AUGDT) IN 
	(
		SELECT CONCAT(B11B_BSAIK_AUGBL,B11B_BSAIK_AUGDT)
		FROM B11_04_IT_PTP_APA -- Full AP table
		WHERE B11B_BSAIK_AUGBL <> '' 
	) AND (B11C_BSAIK_BLART = 'KZ' OR B11C_BSAIK_BLART = 'ZP') AND B11C_BSAIK_AUGBL <> ''

	THEN 'YES'
	ELSE 'NO'
	END
)


-- Step 4.3/  Add flag to show which the supplier invoices are not cleared : AUGBL is empty

ALTER TABLE BP06_02_IT_PAY_DUP ADD  ZF_DOC_NOT_CLEAR VARCHAR(3)

UPDATE BP06_02_IT_PAY_DUP
SET ZF_DOC_NOT_CLEAR =
(
	CASE
	WHEN LEN(B11C_BSAIK_AUGDT) <1 THEN 'YES'
	ELSE 'NO'
	END
)

-- Step 4.4 / Add flag to say if all documents in the duplicate test case number are both 'YES' in ZF_INV_PAID_KZ_ZP and ZF_INV_PAID_FLAG
-- Invoices are both paid. ( Filter on Qliksense)

ALTER TABLE BP06_02_IT_PAY_DUP ADD  ZF_INV_BOTH_PAID VARCHAR(3)

-- Set ZF_INV_BOTH_PAID = YES when 1 duplicate case has more than 1 INV paid in in AP payment table
UPDATE BP06_02_IT_PAY_DUP
SET ZF_INV_BOTH_PAID = 
(
	CASE
	WHEN  CONVERT(nvarchar,B11C_BSAIK_LIFNR)+CONVERT(nvarchar,B11C_BSAIK_XBLNR)+CONVERT(nvarchar,B11C_BSAIK_BLDAT)+CONVERT(nvarchar,B11C_BSAIK_WRBTR) 
	IN ( 
			SELECT CONVERT(nvarchar,B11C_BSAIK_LIFNR)+
					CONVERT(nvarchar,B11C_BSAIK_XBLNR)+
					CONVERT(nvarchar,B11C_BSAIK_BLDAT)+
					CONVERT(nvarchar,B11C_BSAIK_WRBTR) 
					 FROM 
				(
					SELECT
					 B11C_BSAIK_LIFNR,
					 B11C_BSAIK_XBLNR,
					 B11C_BSAIK_BLDAT,
					 B11C_BSAIK_WRBTR,
					 REPLACE( dbo.GROUP_CONCAT(ZF_INV_PAID_FLAG), ',','-') AS ZF_INV_PAID_FLAG_LIST,
					 COUNT(ZF_INV_PAID_FLAG) AS ZF_INV_PAID_FLAG_COUNT
					 FROM BP06_02_IT_PAY_DUP
					 GROUP BY 
					 B11C_BSAIK_LIFNR,
					 B11C_BSAIK_XBLNR,
					 B11C_BSAIK_BLDAT,
					 B11C_BSAIK_WRBTR
					 ) AS A
		 					 WHERE ZF_INV_PAID_FLAG_LIST NOT LIKE '%NO%' AND ZF_INV_PAID_FLAG_COUNT>0
		) 
	THEN 'YES'
	ELSE 'NO'
	END
)

-- Update ZF_INV_BOTH_PAID = YES when 1 duplicate case has
--more than 1 supplier invoices can find in AP full 
--and document type is ZP or KZ and ZF_INV_BOTH_PAID = NO
UPDATE BP06_02_IT_PAY_DUP
SET ZF_INV_BOTH_PAID =
(
	CASE
	WHEN  CONVERT(nvarchar,B11C_BSAIK_LIFNR)+CONVERT(nvarchar,B11C_BSAIK_XBLNR)+CONVERT(nvarchar,B11C_BSAIK_BLDAT)+CONVERT(nvarchar,B11C_BSAIK_WRBTR) 
	IN (	
				SELECT CONVERT(nvarchar,B11C_BSAIK_LIFNR)+
						CONVERT(nvarchar,B11C_BSAIK_XBLNR)+
						CONVERT(nvarchar,B11C_BSAIK_BLDAT)+
						CONVERT(nvarchar,B11C_BSAIK_WRBTR) 
					 FROM 
				(
					SELECT
					 B11C_BSAIK_LIFNR,
					 B11C_BSAIK_XBLNR,
					 B11C_BSAIK_BLDAT,
					 B11C_BSAIK_WRBTR,
					 REPLACE( dbo.GROUP_CONCAT(ZF_INV_PAID_KZ_ZP), ',','-') AS ZF_INV_PAID_KZ_ZP_LIST,
					 COUNT(ZF_INV_PAID_KZ_ZP) AS ZF_INV_PAID_KZ_ZP_COUNT
					 FROM BP06_02_IT_PAY_DUP
					 GROUP BY 
					 B11C_BSAIK_LIFNR,
					 B11C_BSAIK_XBLNR,
					 B11C_BSAIK_BLDAT,
					 B11C_BSAIK_WRBTR
					 ) AS A
		 					 WHERE ZF_INV_PAID_KZ_ZP_LIST NOT LIKE '%NO%' AND ZF_INV_PAID_KZ_ZP_COUNT>0
		) 
	THEN 'YES'
	ELSE 'NO'
	END
)
WHERE ZF_INV_BOTH_PAID = 'NO'

-- Step 4.5 / Add duplicate number field

-- Create duplicate number field
ALTER TABLE BP06_02_IT_PAY_DUP
ADD  ZF_DUP_INDEX INT

-- Update ZF_DUP_INDEX base on duplicate case
UPDATE BP06_02_IT_PAY_DUP
SET ZF_DUP_INDEX = B.ZF_NUMBER
FROM BP06_02_IT_PAY_DUP AS A
INNER JOIN 
(
	SELECT B11C_BSAIK_XBLNR, B11C_BSAIK_LIFNR, B11C_BSAIK_WRBTR,B11C_BSAIK_BLDAT, 
	ROW_NUMBER() OVER(ORDER BY  B11C_BSAIK_XBLNR, B11C_BSAIK_LIFNR, B11C_BSAIK_WRBTR,B11C_BSAIK_BLDAT ASC) AS ZF_NUMBER 
	FROM BP06_02_IT_PAY_DUP
	GROUP BY B11C_BSAIK_XBLNR, B11C_BSAIK_LIFNR, B11C_BSAIK_WRBTR,B11C_BSAIK_BLDAT

) AS B
ON 
A.B11C_BSAIK_XBLNR = B.B11C_BSAIK_XBLNR
AND A.B11C_BSAIK_LIFNR = B.B11C_BSAIK_LIFNR
AND A.B11C_BSAIK_BLDAT = B.B11C_BSAIK_BLDAT
AND A.B11C_BSAIK_WRBTR = B.B11C_BSAIK_WRBTR

-- Step 4.6/  Add flag per case number to show if supplier invoice value is equal to supplier payment value.
-- Create field with value is NO
ALTER TABLE BP06_02_IT_PAY_DUP 
ADD ZF_SUP_INV_EQUAL_SUP_PAY VARCHAR(3)

UPDATE BP06_02_IT_PAY_DUP
SET ZF_SUP_INV_EQUAL_SUP_PAY = 'NO'

-- Update ZF_SUP_INV_EQUAL_SUP_PAY = YES if INV value is equal to supplier payment value
UPDATE BP06_02_IT_PAY_DUP
SET ZF_SUP_INV_EQUAL_SUP_PAY = ZF_INV_EQUAL_SUP_PAY
FROM BP06_02_IT_PAY_DUP AS C
INNER JOIN (SELECT * FROM 		 
		
			(
			-- Select AUGBL, AUGDT, create new field by calculate total DMBTR base on these field 
			-- and field with YES value (ZF_INV_EQUAL_SUP_PAY) to set for ZF_SUP_INV_EQUAL_SUP_PAY if INV value is equal to supplier payment value
			-- If AUGBL, AUGDT and total field appear in supplier payment table then set SUP_INV_EQUAL_SUP_PAY = ZF_SUP_INV_EQUAL_SUP_PAY 
			SELECT *, 'YES' ZF_INV_EQUAL_SUP_PAY FROM (SELECT  B11C_BSAIK_AUGBL,B11C_BSAIK_AUGDT , SUM(B11C_BSAIK_DMBTR)AS ZF_AMOUNT_INV FROM BP06_02_IT_PAY_DUP
			WHERE B11C_BSAIK_AUGBL<>''
			GROUP BY   B11C_BSAIK_AUGBL,B11C_BSAIK_AUGDT ) as A 
			WHERE CONCAT(B11C_BSAIK_AUGBL,B11C_BSAIK_AUGDT, ABS(ZF_AMOUNT_INV)) IN 
			(
			-- Select AUGBL, AUGDT and create new field by calculate total DMBTR from payment table
				SELECT CONCAT(B11E_BSAIK_AUGBL,B11E_BSAIK_AUGDT,ABS(SUM(B11E_BSAIK_DMBTR))) FROM B11_08_IT_PTP_PAY
				WHERE B11E_BSAIK_AUGBL<>''
				GROUP BY B11E_BSAIK_AUGBL,B11E_BSAIK_AUGDT

			)
			) AS A
		)AS B
ON C.B11C_BSAIK_AUGBL = B.B11C_BSAIK_AUGBL
AND C.B11C_BSAIK_AUGDT = B.B11C_BSAIK_AUGDT
AND  C.B11C_BSAIK_AUGBL <> ''
	


-- Step 5: Create table that LIFRN from B11_04_IT_PTP_APA table in BP06_02_IT_PAY_DUP table

EXEC SP_DROPTABLE 'BP06_03_IT_SUP_IN_DUP_INV'
SELECT *
INTO BP06_03_IT_SUP_IN_DUP_INV
FROM B11_04_IT_PTP_APA
WHERE B11B_BSAIK_LIFNR IN
(

	SELECT DISTINCT B11C_BSAIK_LIFNR FROM BP06_02_IT_PAY_DUP
)
 

-- Step 6: Create key to link AP talbe to duplicate INV table base on test field
-- Just get data from BP06_03_IT_SUP_IN_DUP_INV table 
-- and group field based on test case appear in duplicate INV table depend on duplicate test case
-- After get data, append all to one table

EXEC SP_DROPTABLE 'BP06_04_IT_SUP_IN_DUP_INV_TEST_CASE'

SELECT *
INTO BP06_04_IT_SUP_IN_DUP_INV_TEST_CASE
FROM (

-- Get data from BP06_04_TT_SUP_IN_DUP_INV table base on SUPPLIER/DOC DATE/DOC VALUE/EXTERNAL DOC NUMBER 
-- and duplicate test from duplicate INV table is 1
SELECT *, 
	CONCAT('LIFNR:',B11B_BSAIK_LIFNR, '_XBLNR:',B11B_BSAIK_XBLNR ,'_BLDAT:', B11B_BSAIK_BLDAT,'_WRBTR:',B11B_BSAIK_WRBTR) AS ZF_LINK_TEST_CASE,
	'Test 1' AS ZF_TEST_CASE
FROM BP06_03_IT_SUP_IN_DUP_INV 
WHERE CONCAT(B11B_BSAIK_LIFNR, B11B_BSAIK_XBLNR ,  B11B_BSAIK_BLDAT,B11B_BSAIK_WRBTR) IN
	(
		SELECT CONCAT(B11C_BSAIK_LIFNR,  B11C_BSAIK_XBLNR , B11C_BSAIK_BLDAT, B11C_BSAIK_WRBTR)
		FROM BP06_02_IT_PAY_DUP
		WHERE ZF_TEST_1 = 'YES'
	)
UNION
-- Get data from BP06_04_TT_SUP_IN_DUP_INV table base on DOC DATE/DOC VALUE/EXTERNAL DOC NUMBER 
-- and duplicate test from duplicate INV table is 2
SELECT *, 
	CONCAT('_XBLNR:', B11B_BSAIK_XBLNR , '_BLDAT:',B11B_BSAIK_BLDAT,'_WRBTR:',B11B_BSAIK_WRBTR) AS ZF_LINK_TEST_CASE,
	'Test 2' AS ZF_TEST_CASE
FROM BP06_03_IT_SUP_IN_DUP_INV 
WHERE CONCAT( B11B_BSAIK_XBLNR ,  B11B_BSAIK_BLDAT,B11B_BSAIK_WRBTR) IN
	(
		SELECT CONCAT( B11C_BSAIK_XBLNR , B11C_BSAIK_BLDAT, B11C_BSAIK_WRBTR)
		FROM BP06_02_IT_PAY_DUP
		WHERE ZF_TEST_2 = 'YES' AND ZF_TEST_1 = 'NO'
	)
UNION
-- Get data from BP06_04_TT_SUP_IN_DUP_INV table base on SUPPLIER/DOC VALUE/EXTERNAL DOC NUMBER 
-- and duplicate test from duplicate INV table is 3
SELECT *, 
	CONCAT('LIFNR:',B11B_BSAIK_LIFNR,'_XBLNR:', B11B_BSAIK_XBLNR,'_WRBTR:',B11B_BSAIK_WRBTR) AS ZF_LINK_TEST_CASE,
	'Test 3' AS ZF_TEST_CASE
FROM BP06_03_IT_SUP_IN_DUP_INV 
WHERE CONCAT(B11B_BSAIK_LIFNR, B11B_BSAIK_XBLNR,B11B_BSAIK_WRBTR) IN
	(
		SELECT CONCAT(B11C_BSAIK_LIFNR, B11C_BSAIK_XBLNR , B11C_BSAIK_WRBTR)
		FROM BP06_02_IT_PAY_DUP
		WHERE ZF_TEST_3 = 'YES' AND ZF_TEST_1 = 'NO'
	)
UNION
-- Get data from BP06_04_TT_SUP_IN_DUP_INV table base on SUPPLIER/DOC DATE/DOC VALUE/EXTERNAL DOC NUMBER 
-- and duplicate test from duplicate INV table is 4
SELECT *, 
	CONCAT('LIFNR:',B11B_BSAIK_LIFNR, '_BLDAT:', B11B_BSAIK_BLDAT,'_XBLNR:', B11B_BSAIK_XBLNR ) AS ZF_LINK_TEST_CASE,
	'Test 4' AS ZF_TEST_CASE
FROM BP06_03_IT_SUP_IN_DUP_INV 
WHERE CONCAT(B11B_BSAIK_LIFNR, B11B_BSAIK_XBLNR ,  B11B_BSAIK_BLDAT) IN
	(
		SELECT CONCAT(B11C_BSAIK_LIFNR,  B11C_BSAIK_XBLNR , B11C_BSAIK_BLDAT)
		FROM BP06_02_IT_PAY_DUP
		WHERE ZF_TEST_4 = 'YES' AND ZF_TEST_1 = 'NO'
	)
UNION
-- Get data from BP06_04_TT_SUP_IN_DUP_INV table base on SUPPLIER/DOC DATE/DOC VALUE/EXTERNAL DOC NUMBER 
-- and duplicate test from duplicate INV table is 5
SELECT *, 
	CONCAT('LIFNR:',B11B_BSAIK_LIFNR , '_BLDAT:', B11B_BSAIK_BLDAT,'_WRBTR:',B11B_BSAIK_WRBTR) AS ZF_LINK_TEST_CASE,
	'Test 5' AS ZF_TEST_CASE
FROM BP06_03_IT_SUP_IN_DUP_INV 
WHERE CONCAT(B11B_BSAIK_LIFNR ,  B11B_BSAIK_BLDAT,B11B_BSAIK_WRBTR) IN
	(
		SELECT CONCAT(B11C_BSAIK_LIFNR , B11C_BSAIK_BLDAT, B11C_BSAIK_WRBTR)
		FROM BP06_02_IT_PAY_DUP
		WHERE ZF_TEST_5 = 'YES' AND ZF_TEST_1 = 'NO'
	)
UNION
-- Get data from B39_04_TT_SUP_IN_DUP_INV table base on SUPPLIER NAME/DOC VALUE/EXTERNAL DOCUMENT NR
-- and duplicate test from duplicate INV table is 6
SELECT *, 
	CONCAT('NAME1:',B11B_LFA1_NAME1 , '_WRBTR:', B11B_BSAIK_WRBTR,'_XBLNR:',B11B_BSAIK_XBLNR) AS ZF_LINK_TEST_CASE,
	'Test 5' AS ZF_TEST_CASE
FROM BP06_03_IT_SUP_IN_DUP_INV 
WHERE CONCAT(B11B_LFA1_NAME1 ,  B11B_BSAIK_WRBTR,B11B_BSAIK_XBLNR) IN
	(
		SELECT CONCAT(B11C_LFA1_NAME1 , B11C_BSAIK_WRBTR, B11C_BSAIK_XBLNR)
		FROM BP06_02_IT_PAY_DUP
		WHERE ZF_TEST_6 = 'YES' AND ZF_TEST_1 = 'NO'
	)




) AS A


--Step 7/ Create a copy table of BP06_03_IT_SUP_IN_DUP_INV to join with it's self by AUGDT and AUGBL
EXEC SP_DROPTABLE 'BP06_05_IT_SUP_IN_DUP_INV_COPY'
SELECT * 
INTO BP06_05_IT_SUP_IN_DUP_INV_COPY
FROM BP06_03_IT_SUP_IN_DUP_INV


-- Step 8/ Create table for calculate KPI in Qlik (Total number of INV, value of INV)

EXEC SP_DROPTABLE 'BP06_06_IT_KPI'

SELECT 
	B11C_BSAIK_BUKRS,
	B11C_BSAIK_XBLNR,
	B11C_BSAIK_GJAHR,
	--B11C_BSAIK_USNAM,
	B11C_BSAIK_LIFNR,
	B11C_BSAIK_BLART,
	--B11C_BSAIK_RACCT,
	B11C_BSAIK_HKONT,
	BKPF_XSTOV,
	BKPF_STBLG,
	BKPF_STJAH,
	BKPF_USNAM,
	SUM(B11C_ZF_BSAIK_DMBTR_S) AS ZF_COMPAY_VALUE,
	SUM(B11C_ZF_BSAIK_DMBE2_S) AS ZF_GLOBAL_VALUE,
	SUM(B11C_ZF_BSAIK_DMBE3_S) AS ZF_CURR1_VALUE,
	SUM(B11C_ZF_BSAIK_DMBTR_S_CUC) AS ZF_COMPAY_VALUE_USD,

	COUNT(DISTINCT B11C_BSAIK_BUZEI+B11C_BSAIK_BELNR+B11C_BSAIK_GJAHR+B11C_BSAIK_BUKRS) AS ZF_TOTAL_INV
INTO BP06_06_IT_KPI
FROM B11_06_IT_PTP_INV
LEFT JOIN A_BKPF
ON		B11C_BSAIK_BUKRS = BKPF_BUKRS
	AND B11C_BSAIK_GJAHR = BKPF_GJAHR
	AND B11C_BSAIK_BELNR = BKPF_BELNR
GROUP BY	
	B11C_BSAIK_BUKRS,
	B11C_BSAIK_XBLNR,
	B11C_BSAIK_GJAHR,
	--B11C_BSAIK_USNAM,
	B11C_BSAIK_LIFNR,
	B11C_BSAIK_BLART,
	--B11C_BSAIK_RACCT,
	B11C_BSAIK_HKONT,
	BKPF_XSTOV		 ,
	BKPF_STBLG	     ,
	BKPF_STJAH       ,
	BKPF_USNAM
	


-- Step 9/ Create summary table (join with duplicate table to get duplicate number base on BUKRS+GJAHR+BELNR+BUZEI)
EXEC SP_DROPTABLE 'BP06_07_IT_SUMMARY_TABLE'

SELECT A.*
INTO BP06_07_IT_SUMMARY_TABLE
FROM (
	SELECT A.ZF_DUP_INDEX,A.B11B_BSAIK_AUGBL,B11B_ZF_FLAG_SUMMARY, A.B11B_BSAIK_AUGDT, SUM(A.B11B_ZF_BSAIK_DMBTR_S) AS TOTAL_VALUE  FROM (
		SELECT B.ZF_DUP_INDEX,
				B.ZF_SUP_INV_EQUAL_SUP_PAY,
				A.*
		FROM BP06_03_IT_SUP_IN_DUP_INV AS A
		LEFT JOIN BP06_02_IT_PAY_DUP AS B
		ON  A.B11B_BSAIK_BUKRS = B.B11C_BSAIK_BUKRS
		AND A.B11B_BSAIK_GJAHR = B.B11C_BSAIK_GJAHR
		AND A.B11B_BSAIK_BELNR = B.B11C_BSAIK_BELNR
		AND A.B11B_BSAIK_BUZEI = B.B11C_BSAIK_BUZEI
		AND B11B_BSAIK_AUGBL<>''
		)AS A
	GROUP BY A.ZF_DUP_INDEX,A.B11B_BSAIK_AUGBL, A.B11B_ZF_FLAG_SUMMARY, A.B11B_BSAIK_AUGDT
) AS A

/*Rename fields for Qlik*/
EXEC SP_UNNAME_FIELD 'B11C_', 'BP06_02_IT_PAY_DUP'
EXEC SP_UNNAME_FIELD 'B11B_', 'BP06_03_IT_SUP_IN_DUP_INV'
EXEC SP_UNNAME_FIELD 'B11B_', 'BP06_04_IT_SUP_IN_DUP_INV_TEST_CASE'
EXEC SP_UNNAME_FIELD 'B11B_', 'BP06_05_IT_SUP_IN_DUP_INV_COPY'
EXEC SP_UNNAME_FIELD 'B11C_', 'BP06_06_IT_KPI'
EXEC SP_UNNAME_FIELD 'B11B_', 'BP06_07_IT_SUMMARY_TABLE'
 
EXEC SP_RENAME_FIELD 'BP06_03_', 'BP06_03_IT_SUP_IN_DUP_INV'
EXEC SP_RENAME_FIELD 'BP06_04_', 'BP06_04_IT_SUP_IN_DUP_INV_TEST_CASE'
EXEC SP_RENAME_FIELD 'BP06_05_', 'BP06_05_IT_SUP_IN_DUP_INV_COPY'
EXEC SP_RENAME_FIELD 'BP06_06_', 'BP06_06_IT_KPI'
EXEC SP_RENAME_FIELD 'BP06_07_', 'BP06_07_IT_SUMMARY_TABLE'
EXEC SP_RENAME_FIELD 'BP06_02_', 'BP06_02_IT_PAY_DUP'
/*Remove temporary tables*/

EXEC SP_REMOVE_TABLES 'BP06_%[_]TT[_]%'

GO
