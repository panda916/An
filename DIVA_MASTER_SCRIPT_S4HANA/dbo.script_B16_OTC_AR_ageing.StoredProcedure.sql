USE [DIVA_MASTER_SCRIPT_S4HANA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--ALTER PROCEDURE [dbo].[qry_RULE_OTC-01-AR ageing]
CREATE PROCEDURE [dbo].[script_B16_OTC_AR_ageing]

WITH EXECUTE AS CALLER
AS
--DYNAMIC_SCRIPT_START
BEGIN

/*
	Title			: [qry_RULE_OTC-01-AR ageing]
	Description	:  
    
	--------------------------------------------------------------
	Update history
	--------------------------------------------------------------
	Date			    |	Who			|	Description
	23-05-2017				EG				Initial version
	30-09-2017				HT				Update and standardisation for SID
	05-08-2019				VL				Update with S4HANA logic
	24-03-2022				Thuan			Remove MANDT field in join
	16-08-2024				HL				Removed fields from BSEG and upate the logic of due date to use ACDOCA_NETDT.
*/

/* Initiate the log */  
--Create database log table if it does not exist
IF OBJECT_ID('LOG_SP_EXECUTION', 'U') IS NULL BEGIN CREATE TABLE [DBO].[LOG_SP_EXECUTION] ([DATABASE] NVARCHAR(MAX) NULL,[OBJECT] NVARCHAR(MAX) NULL,[OBJECT_TYPE] NVARCHAR(MAX) NULL,[USER] NVARCHAR(MAX) NULL,[DATE] DATE NULL,[TIME] TIME NULL,[DESCRIPTION] NVARCHAR(MAX) NULL,[TABLE] NVARCHAR(MAX),[ROWS] INT) END

--Log start of procedure
INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Procedure started',NULL,NULL


	/* Initialize parameters from globals table */
    DECLARE  
				@CURRENCY NVARCHAR(3)                 = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'currency')
				,@DATE1 NVARCHAR(MAX)                           = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'date1')
				,@DATE2 NVARCHAR(MAX)                           = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'date2')
				,@DOWNLOADDATE NVARCHAR(MAX)             = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'downloaddate')
				,@DATEFORMAT VARCHAR(3)             = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'dateformat')
				,@EXCHANGERATETYPE NVARCHAR(MAX)  = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'exchangeratetype')
				,@LANGUAGE1 NVARCHAR(3)                = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'language1')
				,@LANGUAGE2 NVARCHAR(3)                = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'language2')
				,@LIMIT_RECORDS INT                    = CAST((SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'LIMIT_RECORDS') AS INT)
				,@FISCAL_YEAR_FROM NVARCHAR(MAX)					= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'FISCAL_YEAR_FROM')
				,@FISCAL_YEAR_TO NVARCHAR(MAX)					= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'FISCAL_YEAR_TO')
                 SET DATEFORMAT @DATEFORMAT;
 
 
/*Test mode*/
SET ROWCOUNT @LIMIT_RECORDS
	--------------------------------------------------------------------------------------------------------------------------
	-- step 1: Create a temp table with all month ends between @date1 and @date2
	DECLARE @STARTDATE date = (SELECT CAST(@date1 AS date))
	DECLARE @ENDDATE date = (SELECT CAST(@date2 AS date))

	EXEC SP_DROPTABLE 'B16_00_TT_SNAPSHOT_DATE'
	CREATE TABLE B16_00_TT_SNAPSHOT_DATE (ZF_MNTH_END date)
	WHILE @STARTDATE <= @ENDDATE
	BEGIN 
		INSERT INTO B16_00_TT_SNAPSHOT_DATE 
		SELECT EOMONTH(@STARTDATE)

		SET @STARTDATE = DATEADD(mm, 1, @STARTDATE)
	END
	
	--step 2: Enrich with compay code, mandant and fiscal year variant
	EXEC SP_DROPTABLE 'B16_01_TT_SNAPSHOT_BUKRS'
	SELECT [T001_MANDT], [T001_BUKRS], [T001_PERIV], ZF_MNTH_END 
	INTO B16_01_TT_SNAPSHOT_BUKRS 
	FROM A_T001
	INNER JOIN AM_SCOPE ON A_T001.T001_BUKRS = AM_SCOPE.SCOPE_CMPNY_CODE
	LEFT JOIN B16_00_TT_SNAPSHOT_DATE ON 1 = 1

	--step 3: Join T009B to get fiscal year and posting period for each month end in scope
	EXEC SP_DROPTABLE 'B16_02_IT_SNAPSHOT_POSTING_PER'
	SELECT
		B16_01_TT_SNAPSHOT_BUKRS.[T001_BUKRS]
		,B00_T009B.T009B_PERIV
		,CASE [T009B_RELJR]
			WHEN '' THEN CAST(DATEPART(yyyy, ZF_MNTH_END) AS INT) + CAST([T009B_RELJR] as INT) 
			ELSE YEAR(ZF_MNTH_END) + CAST([T009B_RELJR] as INT) END AS ZF_BDATJ_RELJR_FY
		,[T009B_POPER] -- AS [Fiscal period]
		,ZF_MNTH_END -- AS [Snapshot date]
	INTO B16_02_IT_SNAPSHOT_POSTING_PER
	FROM
		B16_01_TT_SNAPSHOT_BUKRS
	LEFT JOIN B00_T009B ON
		B00_T009B.T009B_PERIV = B16_01_TT_SNAPSHOT_BUKRS.[T001_PERIV] AND
		B00_T009B.T009B_BUMON = DATEPART(mm, ZF_MNTH_END)
		-- should add join on year too
	ORDER BY
		[T001_BUKRS], ZF_MNTH_END ASC

	--step 4: link AR details to calculate ageing and determine clearing status as at each mont hend in scope
	EXEC SP_DROPTABLE 'B16_03_TT_AR_AGEING'

	SELECT
		B14_06_IT_ARE.B14_ACDOCA_RCLNT
		,B14_06_IT_ARE.B14_ACDOCA_RBUKRS 
		,B14_06_IT_ARE.B14_ACDOCA_GJAHR -- FISCAL YEAR
		,B14_06_IT_ARE.B14_ACDOCA_BELNR --[Document nr]
		,B14_06_IT_ARE.B14_ACDOCA_BUZEI --[Line item nr]
		,B14_06_IT_ARE.B14_ACDOCA_DOCLN --[Line item nr]
		,B14_06_IT_ARE.B14_ACDOCA_UMSKZ
		,B16_02_IT_SNAPSHOT_POSTING_PER.ZF_MNTH_END
		,B14_06_IT_ARE.B14_ACDOCA_AUGDT --[Clearing date]
		,B14_ACDOCA_BLART
		,B14_ACDOCA_BSCHL
		,CASE 
			WHEN B14_06_IT_ARE.B14_ACDOCA_BUDAT > B16_02_IT_SNAPSHOT_POSTING_PER.ZF_MNTH_END THEN 'N/A'
			WHEN B14_06_IT_ARE.B14_ACDOCA_AUGDT > B16_02_IT_SNAPSHOT_POSTING_PER.ZF_MNTH_END AND B14_06_IT_ARE.B14_ACDOCA_BUDAT <= B16_02_IT_SNAPSHOT_POSTING_PER.ZF_MNTH_END THEN 'Open'
			WHEN ISNULL(B14_06_IT_ARE.B14_ACDOCA_AUGDT, '') = '' AND B14_06_IT_ARE.B14_ACDOCA_BUDAT <= B16_02_IT_SNAPSHOT_POSTING_PER.ZF_MNTH_END THEN 'Open'
			ELSE 'Cleared'
		END AS ZF_BUDAT_AUGDT_CLR_STATUS
		,B14_06_IT_ARE.B14_ACDOCA_NETDT 
		,DATEDIFF(dd, B14_06_IT_ARE.B14_ACDOCA_NETDT, B16_02_IT_SNAPSHOT_POSTING_PER.ZF_MNTH_END) AS ZF_NETDT_AGE_DUE_DATE --[Z_Age (due date)]
		,B14_06_IT_ARE.B14_ACDOCA_BLDAT -- [Document date]
		,DATEDIFF(dd, B14_06_IT_ARE.B14_ACDOCA_BLDAT, B16_02_IT_SNAPSHOT_POSTING_PER.ZF_MNTH_END) AS ZF_BLDAT_AGE_DUE_DATE --[Z_Age (document date)]
		,B14_06_IT_ARE.B14_ACDOCA_BUDAT --[Posting date]
		,DATEDIFF(dd, B14_06_IT_ARE.B14_ACDOCA_BUDAT, B16_02_IT_SNAPSHOT_POSTING_PER.ZF_MNTH_END) AS ZF_BUDAT_AGE_DUE_DATE --[Z_Age (posting date)]

	INTO B16_03_TT_AR_AGEING
	FROM B14_06_IT_ARE
	LEFT JOIN B16_02_IT_SNAPSHOT_POSTING_PER
	ON  B14_06_IT_ARE.B14_ACDOCA_RBUKRS = B16_02_IT_SNAPSHOT_POSTING_PER.T001_BUKRS 
		
	----------------------------------------------------------------------------------------------------------------------------

	--step 5: create OTC AR AGEING CUBE

	EXEC SP_DROPTABLE 'B16_04_IT_OTC_AR_AGEING'

	--Enter main select statements below
	SELECT 
		B14_ACDOCA_RCLNT AS ACDOCA_RCLNT
	   ,B14_ACDOCA_RBUKRS AS ACDOCA_RBUKRS
	   ,B14_ACDOCA_GJAHR AS ACDOCA_GJAHR
	   ,B14_ACDOCA_BELNR AS ACDOCA_BELNR
	   ,B14_ACDOCA_BUZEI AS ACDOCA_BUZEI
	   ,B14_ACDOCA_DOCLN AS ACDOCA_DOCLN
	   ,B14_ACDOCA_BLART  AS ACDOCA_BLART
	   ,B14_ACDOCA_BSCHL AS ACDOCA_BSCHL
	   ,ZF_MNTH_END
	   ,B14_ACDOCA_UMSKZ AS ACDOCA_UMSKZ
	   ,B14_ACDOCA_AUGDT AS ACDOCA_AUGDT
	   ,ZF_BUDAT_AUGDT_CLR_STATUS
	   ,B14_ACDOCA_NETDT AS ACDOCA_NETDT 
	   ,ZF_NETDT_AGE_DUE_DATE
	   ,CASE 
			WHEN ZF_NETDT_AGE_DUE_DATE < -360 THEN '1. < -360'
			WHEN ZF_NETDT_AGE_DUE_DATE < -180 AND ZF_NETDT_AGE_DUE_DATE >= -360 THEN '2. >= -360'
			WHEN ZF_NETDT_AGE_DUE_DATE < -90 AND ZF_NETDT_AGE_DUE_DATE >= -180 THEN '3. >= -180'
			WHEN ZF_NETDT_AGE_DUE_DATE < -60 AND ZF_NETDT_AGE_DUE_DATE >= -90 THEN '4. >= -90'
			WHEN ZF_NETDT_AGE_DUE_DATE < -30 AND ZF_NETDT_AGE_DUE_DATE >= -60 THEN '5. >= -60' 
			WHEN ZF_NETDT_AGE_DUE_DATE < 0  AND ZF_NETDT_AGE_DUE_DATE >= -30 THEN '6. >= -30' 
			WHEN ZF_NETDT_AGE_DUE_DATE = 0 THEN '7. Current (= 0)' 
			WHEN ZF_NETDT_AGE_DUE_DATE > 0  AND ZF_NETDT_AGE_DUE_DATE <= 30 THEN '8. <= 30' 
			WHEN ZF_NETDT_AGE_DUE_DATE > 30 AND ZF_NETDT_AGE_DUE_DATE <= 60 THEN '9. <= 60' 
			WHEN ZF_NETDT_AGE_DUE_DATE > 60 AND ZF_NETDT_AGE_DUE_DATE <= 90 THEN '10. <= 90' 
			WHEN ZF_NETDT_AGE_DUE_DATE > 90 AND ZF_NETDT_AGE_DUE_DATE <= 180 THEN '11. <= 180' 
			WHEN ZF_NETDT_AGE_DUE_DATE > 180 AND ZF_NETDT_AGE_DUE_DATE <= 360 THEN '12. <= 360'
			WHEN ZF_NETDT_AGE_DUE_DATE > 360 THEN '13. > 360'
			ELSE '14. Unknown'
		END AS ZF_NETDT_DUE_DATE_AGE_BUCKET --[Z_Age bucket (due date)]
	   ,B14_ACDOCA_BLDAT AS ACDOCA_BLDAT
	   ,ZF_BLDAT_AGE_DUE_DATE
	   ,CASE 
			WHEN ZF_BLDAT_AGE_DUE_DATE < -360 THEN '1. < -360'
			WHEN ZF_BLDAT_AGE_DUE_DATE < -180 AND ZF_BLDAT_AGE_DUE_DATE >= -360 THEN '2. >= -360'
			WHEN ZF_BLDAT_AGE_DUE_DATE < -90 AND ZF_BLDAT_AGE_DUE_DATE >= -180 THEN '3. >= -180'
			WHEN ZF_BLDAT_AGE_DUE_DATE < -60 AND ZF_BLDAT_AGE_DUE_DATE >= -90 THEN '4. >= -90'
			WHEN ZF_BLDAT_AGE_DUE_DATE < -30 AND ZF_BLDAT_AGE_DUE_DATE >= -60 THEN '5. >= -60' 
			WHEN ZF_BLDAT_AGE_DUE_DATE < 0  AND ZF_BLDAT_AGE_DUE_DATE >= -30 THEN '6. >= -30' 
			WHEN ZF_BLDAT_AGE_DUE_DATE = 0 THEN '7. Current (= 0)' 
			WHEN ZF_BLDAT_AGE_DUE_DATE > 0  AND ZF_BLDAT_AGE_DUE_DATE <= 30 THEN '8. <= 30' 
			WHEN ZF_BLDAT_AGE_DUE_DATE > 30 AND ZF_BLDAT_AGE_DUE_DATE <= 60 THEN '9. <= 60' 
			WHEN ZF_BLDAT_AGE_DUE_DATE > 60 AND ZF_BLDAT_AGE_DUE_DATE <= 90 THEN '10. <= 90' 
			WHEN ZF_BLDAT_AGE_DUE_DATE > 90 AND ZF_BLDAT_AGE_DUE_DATE <= 180 THEN '11. <= 180' 
			WHEN ZF_BLDAT_AGE_DUE_DATE > 180 AND ZF_BLDAT_AGE_DUE_DATE <= 360 THEN '12. <= 360'
			WHEN ZF_BLDAT_AGE_DUE_DATE > 360 THEN '13. > 360'
			ELSE '14. Unknown'
		END AS ZF_BLDAT_AGE_BUCKET--[Z_Age bucket (document date)]
	   ,B14_ACDOCA_BUDAT AS ACDOCA_BUDAT
	   ,ZF_BUDAT_AGE_DUE_DATE
	   ,CASE 
			WHEN ZF_BUDAT_AGE_DUE_DATE < -360 THEN '1. < -360'
			WHEN ZF_BUDAT_AGE_DUE_DATE < -180 AND ZF_BUDAT_AGE_DUE_DATE >= -360 THEN '2. >= -360'
			WHEN ZF_BUDAT_AGE_DUE_DATE < -90 AND ZF_BUDAT_AGE_DUE_DATE >= -180 THEN '3. >= -180'
			WHEN ZF_BUDAT_AGE_DUE_DATE < -60 AND ZF_BUDAT_AGE_DUE_DATE >= -90 THEN '4. >= -90'
			WHEN ZF_BUDAT_AGE_DUE_DATE < -30 AND ZF_BUDAT_AGE_DUE_DATE >= -60 THEN '5. >= -60' 
			WHEN ZF_BUDAT_AGE_DUE_DATE < 0  AND ZF_BUDAT_AGE_DUE_DATE >= -30 THEN '6. >= -30' 
			WHEN ZF_BUDAT_AGE_DUE_DATE = 0 THEN '7. Current (= 0)' 
			WHEN ZF_BUDAT_AGE_DUE_DATE > 0  AND ZF_BUDAT_AGE_DUE_DATE <= 30 THEN '8. <= 30' 
			WHEN ZF_BUDAT_AGE_DUE_DATE > 30 AND ZF_BUDAT_AGE_DUE_DATE <= 60 THEN '9. <= 60' 
			WHEN ZF_BUDAT_AGE_DUE_DATE > 60 AND ZF_BUDAT_AGE_DUE_DATE <= 90 THEN '10. <= 90' 
			WHEN ZF_BUDAT_AGE_DUE_DATE > 90 AND ZF_BUDAT_AGE_DUE_DATE <= 180 THEN '11. <= 180' 
			WHEN ZF_BUDAT_AGE_DUE_DATE > 180 AND ZF_BUDAT_AGE_DUE_DATE <= 360 THEN '12. <= 360'
			WHEN ZF_BUDAT_AGE_DUE_DATE > 360 THEN '13. > 360'
			ELSE '14. Unknown'
		END AS ZF_BUDAT_AGE_BUCKET--[Z_Age bucket (posting date)]

	INTO B16_04_IT_OTC_AR_AGEING
	
	FROM B16_03_TT_AR_AGEING

	WHERE ZF_BUDAT_AUGDT_CLR_STATUS = 'Open' ;


EXEC sp_RENAME_FIELD 'B16_', 'B16_04_IT_OTC_AR_AGEING'
EXEC SP_REMOVE_TABLES '%_TT_%'



--Log end of procedure
INSERT INTO LOG_SP_EXECUTION ([DATABASE], [OBJECT], [OBJECT_TYPE], [USER], [DATE], [TIME], [DESCRIPTION], [TABLE], [ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(date,GETDATE()),CONVERT(time,GETDATE()),'Procedure finished',NULL,NULL

--Immediately following each cube select statement, copy the following to log the cube creation
--Note: make sure to update the two references to cube name in this code
INSERT INTO [_DatabaseLogTable] ([Database],[Object],[Object Type],[User],[Date],[Time],[Description],[Table],[Rows])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(date,GETDATE()),CONVERT(time,GETDATE()),'Cube completed','B16_04_IT_OTC_AR_AGEING',(SELECT COUNT(*) FROM B16_04_IT_OTC_AR_AGEING)



END

GO
