USE [DIVA_MASTER_SCRIPT_S4HANA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   PROC [dbo].[script_B22_SOD_MATRIX]
AS
--DYNAMIC_SCRIPT_START

/* Initiate the log */ 
--Create database log table if it does not exist
IF OBJECT_ID('_DatabaseLogTable', 'U') IS NULL BEGIN CREATE TABLE [dbo].[_DatabaseLogTable] ([Database] nvarchar(max) NULL,[Object] nvarchar(max) NULL,[Object Type] nvarchar(max) NULL,[User] nvarchar(max) NULL,[Date] date NULL,[Time] time NULL,[Description] nvarchar(max) NULL,[Table] nvarchar(max),[Rows] int) END

--Log start of procedure
INSERT INTO [dbo].[_DatabaseLogTable] ([Database],[Object],[Object Type],[User],[Date],[Time],[Description],[Table],[Rows])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(date,GETDATE()),CONVERT(time,GETDATE()),'Procedure started',NULL,NULL
 
--Test mode
SET ROWCOUNT 0

/*Change history comments*/
 
/*
       Title     [dbo].[script_DV02_SQL_B03_VS_B04_TB_VS_GL]           : [B22_SOD_MATRIX]
       Description			: 
    
       --------------------------------------------------------------
       Update history
       --------------------------------------------------------------
       Date                     |	Who                  |      Description
       27-03-2020					HT & TN					Update and standardisation for SID
       07-04-2020					CW						1st review 
       08-04-2020					HT						Update more detailed comments and review logics for User ROLE/Profile and Activity range 
	   23-09-2024				|	HL						Add fields from SAP USAGE
*/

-- DROP ALL TEMPORARY TABLE FIRST
EXEC SP_REMOVE_TABLES 'B22[_]%[_]TT%'
EXEC SP_REMOVE_TABLES 'B22A[_]%[_]TT%'

	IF EXISTS(SELECT * FROM SYS.all_columns
	WHERE name = 'USOBT_C_NAME')
	BEGIN
		EXEC SP_UNNAME_FIELD 'USOBT_C_', 'A_USOBT_C'
		EXEC SP_RENAME_FIELD'USOBT_', 'A_USOBT_C'

		EXEC SP_UNNAME_FIELD 'USOBX_C_', 'A_USOBX_C'
		EXEC SP_RENAME_FIELD 'USOBX_', 'A_USOBX_C'
	END


--CREATE AUTO MAPPING USER IDs from current database

    EXEC SP_DROPTABLE 'AM_CURRENT_USER_FROM_DATABASE'

    CREATE TABLE AM_CURRENT_USER_FROM_DATABASE(
        ZF_SOURCE_USNAM nvarchar(50),
        ZF_SOURCE_TABLE nvarchar(50)
    )

    DECLARE @SQLCMD NVARCHAR(1000) = 'INSERT INTO AM_CURRENT_USER_FROM_DATABASE
    '

    SELECT @SQLCMD = @SQLCMD + 'SELECT DISTINCT ' + A.name + ', ''' + B.name + ''' FROM ' + B.name  + ' union
    ' FROM SYS.columns A
    LEFT JOIN SYS.tables B ON A.object_id = B.object_id
    WHERE A.NAME LIKE '%[_]USNAM%'
    AND LEN(A.NAME) = 10
    AND B.name LIKE 'A[_]%'


    SET @SQLCMD = LEFT(@SQLCMD, LEN(@SQLCMD) - 8)
    PRINT @SQLCMD

    EXEC SP_EXECUTESQL @SQLCMD

------------------------------------------------------------PART1-------------------------------------------------------------------------------
RAISERROR('Part 1: prepare reference table', 10, 1)
--build up nescessary reference table for users, role, authorization value, rule, object and TCODE (step 1 - 9)
--normalize values in range for TCODE, Authorization value and activities (Step 14)

-- Step 1: Check if the user is active/ valid, etc. (Only select users who have been active since 2018 upwards)
	-- https://answers.sap.com/questions/7573093/values-of-field-uflag-in-table-usr02.html
	-- USR02_USTYP should start with A, as requested by Jesper
	SELECT DISTINCT USR02_BNAME 
	INTO B22_00_TT_USR02_BNAME_ACTIVE 
	FROM A_USR02
	--INNER JOIN AM_BNAME_SCOPE ON USR02_BNAME LIKE BNAME
	WHERE (USR02_USTYP LIKE 'A%') -- AND USR02_UFLAG = 0) AND USR02_TRDAT >= '2018-01-01'  --AND USR02_BNAME = 'SCAJJE00'
    AND EXISTS(SELECT * FROM AM_CURRENT_USER_FROM_DATABASE WHERE USR02_BNAME = ZF_SOURCE_USNAM)
    --AND (NOT USR02_BNAME LIKE 'CUT[_]%' AND NOT USR02_BNAME LIKE 'SAP%' AND NOT USR02_BNAME LIKE 'OSS%')

	ALTER TABLE B22_00_TT_USR02_BNAME_ACTIVE ALTER COLUMN USR02_BNAME VARCHAR(70)

-- Step 2: Obtain the profiles that the user has access to
	SELECT DISTINCT
		   B22_00_TT_USR02_BNAME_ACTIVE.USR02_BNAME,
		   A_UST04.UST04_PROFILE
	INTO B22_01_TT_UST04_BNAME_PROFN
	FROM B22_00_TT_USR02_BNAME_ACTIVE  -- Get profile from UST04 table
	LEFT JOIN A_UST04 ON B22_00_TT_USR02_BNAME_ACTIVE.USR02_BNAME = A_UST04.UST04_BNAME


-- Step 3: Create TSTC table with valid program TSTC_PGMNA should not be blank
	SELECT DISTINCT TSTC_TCODE INTO B22_04_TT_TSTC_VALID_PGM FROM A_TSTC 
	--INNER JOIN AM_TSTC_CINFO_MAPPING 
	--		ON dbo.REMOVE_LEADING_ZEROES(A_TSTC.TSTC_CINFO) = dbo.REMOVE_LEADING_ZEROES(AM_TSTC_CINFO_MAPPING.TSTC_CINFO) 
			
	WHERE ISNULL(TSTC_PGMNA, '') <> '' -- AND TSTC_CINFO_LOCK = 'N'
	CREATE INDEX TSTC_TCODE ON B22_04_TT_TSTC_VALID_PGM(TSTC_TCODE)

-- Step 3B: Create UST10S and UST10C table with valid Auth Objct

	SELECT * INTO B22_04B_TT_UST10S_VALID_AUTH FROM A_UST10S
	WHERE UST10S_AKTPS LIKE 'A%'
	--AND	(NOT EXISTS (SELECT 1 FROM A_USR12 WHERE UST10S_AUTH = USR12_AUTH 
	--											AND UST10S_OBJCT = USR12_OBJCT 
	--											AND USR12_AKTPS NOT LIKE 'A%')
	--	OR NOT EXISTS (SELECT 1 FROM A_USR13 WHERE UST10S_AUTH = USR13_AUTH 
	--												AND UST10S_OBJCT = USR13_OBJCT 
	--												AND USR13_AKTPS  NOT LIKE 'A%'))
	
-- Step 4A: If there are composite profiles, denormalize into the full list (only for those that are active)
	SELECT DISTINCT A.UST10C_PROFN, A.UST10C_SUBPROF 
	INTO B22_05_TT_UST10_PROFN_NORMALIZED
	FROM A_UST10C A
	UNION
	SELECT DISTINCT A.UST10C_PROFN, A.UST10C_PROFN
	FROM A_UST10C A

	WHILE EXISTS(SELECT A.UST10C_PROFN
					FROM B22_05_TT_UST10_PROFN_NORMALIZED A
					INNER JOIN A_UST10C B ON A.UST10C_SUBPROF = B.UST10C_PROFN AND UST10C_AKTPS LIKE 'A%'
					WHERE NOT EXISTS(SELECT * FROM B22_05_TT_UST10_PROFN_NORMALIZED C 
												WHERE A.UST10C_PROFN = C.UST10C_PROFN 
												AND C.UST10C_SUBPROF = B.UST10C_SUBPROF))
	BEGIN
		INSERT INTO B22_05_TT_UST10_PROFN_NORMALIZED
		SELECT DISTINCT A.UST10C_PROFN, B.UST10C_SUBPROF 
		FROM B22_05_TT_UST10_PROFN_NORMALIZED A
		INNER JOIN A_UST10C B ON A.UST10C_SUBPROF = B.UST10C_PROFN AND UST10C_AKTPS LIKE 'A%'
		WHERE NOT EXISTS(SELECT * FROM B22_05_TT_UST10_PROFN_NORMALIZED C 
									WHERE A.UST10C_PROFN = C.UST10C_PROFN 
									AND C.UST10C_SUBPROF = B.UST10C_SUBPROF)
	END
	
	-- Union both normalized profile list with existing single profile list in UST10S
	SELECT * 
	INTO B22_06A_TT_UST10_PROFN_FULL_LIST
	FROM B22_05_TT_UST10_PROFN_NORMALIZED
	--WHERE EXISTS (SELECT 1 FROM A_USR10 WHERE A_USR10.USR10_PROFN = UST10C_SUBPROF
	--												AND USR10_AKTPS LIKE 'A%')
	--		OR EXISTS (SELECT 1 FROM A_USR11 WHERE USR11_PROFN = UST10C_SUBPROF
	--													AND USR11_AKTPS LIKE 'A%')
	UNION
	SELECT DISTINCT UST10S_PROFN, UST10S_PROFN 
	FROM B22_04B_TT_UST10S_VALID_AUTH
	--WHERE NOT EXISTS(SELECT * FROM B22_05_TT_UST10_PROFN_NORMALIZED 
	--							WHERE UST10C_PROFN = UST10S_PROFN)
	--	AND ( NOT EXISTS (SELECT 1 FROM A_USR10 WHERE A_USR10.USR10_PROFN = UST10S_PROFN
	--												AND USR10_AKTPS NOT LIKE 'A%')
	--		OR NOT EXISTS (SELECT 1 FROM A_USR11 WHERE USR11_PROFN = UST10S_PROFN
	--													AND USR11_AKTPS NOT LIKE 'A%'))
	
-- Step 4B: denormalize/flatten structure of composite role into full list
	SELECT AGR_AGRS_AGR_NAME, AGR_AGRS_CHILD_AGR INTO B22_06B_TT_AGR_ROLE_NORMALIZED FROM A_AGR_AGRS
	UNION
	SELECT AGR_AGRS_AGR_NAME, AGR_AGRS_AGR_NAME FROM A_AGR_AGRS
	DECLARE @c INT = 1

	WHILE @c <> 0
	BEGIN
		INSERT INTO B22_06B_TT_AGR_ROLE_NORMALIZED
		SELECT DISTINCT 
			A.AGR_AGRS_AGR_NAME, 
			B.AGR_AGRS_CHILD_AGR 
		FROM B22_06B_TT_AGR_ROLE_NORMALIZED A
		INNER JOIN B22_06B_TT_AGR_ROLE_NORMALIZED B ON A.AGR_AGRS_CHILD_AGR = B.AGR_AGRS_AGR_NAME
		WHERE NOT EXISTS(SELECT * FROM B22_06B_TT_AGR_ROLE_NORMALIZED C 
							WHERE A.AGR_AGRS_AGR_NAME = C.AGR_AGRS_AGR_NAME 
							AND B.AGR_AGRS_CHILD_AGR = C.AGR_AGRS_CHILD_AGR)
		
		SET @c = (SELECT COUNT(*) FROM B22_06B_TT_AGR_ROLE_NORMALIZED A
						INNER JOIN B22_06B_TT_AGR_ROLE_NORMALIZED B ON A.AGR_AGRS_CHILD_AGR = B.AGR_AGRS_AGR_NAME
						WHERE NOT EXISTS(SELECT * FROM B22_06B_TT_AGR_ROLE_NORMALIZED C 
												WHERE A.AGR_AGRS_AGR_NAME = C.AGR_AGRS_AGR_NAME 
												AND B.AGR_AGRS_CHILD_AGR = C.AGR_AGRS_CHILD_AGR))
		
	END

-- Step 4C: Update missing roles from AGR_USERS to AGR_AGRS normalized table
	INSERT INTO B22_06B_TT_AGR_ROLE_NORMALIZED
	SELECT DISTINCT AGR_USERS_AGR_NAME, AGR_USERS_AGR_NAME FROM A_AGR_USERS
	WHERE 
	-- only update the mising role
	NOT EXISTS(SELECT * FROM B22_06B_TT_AGR_ROLE_NORMALIZED WHERE AGR_AGRS_AGR_NAME = AGR_USERS_AGR_NAME)


-- Step 7: Combine Authorization objects from Profile and Role
	--Get profile, objct, auth 
	--Get VON and BIS from UST12
	EXEC SP_DROPTABLE 'B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE'
	SELECT DISTINCT 
		A.USR02_BNAME,
		UST12_AUTH AS ZF_AGR_UST12_AUTH,
		UST12_OBJCT AS ZF_AGR_UST12_OBJCT,
		UST12_FIELD AS ZF_AGR_UST12_FIELD,
		UST12_VON AS ZF_AGR_UST12_VON, 
		UST12_BIS AS ZF_AGR_UST12_BIS,
		UST04_PROFILE AS ZF_AGR_UST12_PROFILE -- HL: Added from SAP USAGE 
	INTO B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
	FROM B22_01_TT_UST04_BNAME_PROFN AS A
	-- get the sub profiles for the user, keeping also all the parent profiles
	INNER JOIN B22_06A_TT_UST10_PROFN_FULL_LIST B 
			ON A.UST04_PROFILE = B.UST10C_PROFN
	-- get AUTH and OBJCT
	INNER JOIN B22_04B_TT_UST10S_VALID_AUTH ON B.UST10C_SUBPROF = UST10S_PROFN
	-- get the FIELD, VON and BIS
	INNER JOIN A_UST12 ON UST12_AUTH = UST10S_AUTH AND UST12_OBJCT = UST10S_OBJCT AND UST12_AKTPS LIKE 'A%'
	
	
	UNION

	--Get profile, objct, auth from ROLE table AGR_1251
	SELECT DISTINCT AGR_USERS_UNAME, AGR_1251_AUTH, AGR_1251_OBJECT, AGR_1251_FIELD, AGR_1251_LOW, AGR_1251_HIGH , '' AS ZF_PROFILE -- HL: Added , '' AS ZF_PROFILE from SAP UASGE
	FROM A_AGR_USERS
	-- Limit on active users
	INNER JOIN B22_00_TT_USR02_BNAME_ACTIVE 
					ON AGR_USERS_UNAME = USR02_BNAME
	-- Get the child role (left because maybe some parents without child or users without child roles)
	LEFT JOIN B22_06B_TT_AGR_ROLE_NORMALIZED 
					ON AGR_AGRS_AGR_NAME = AGR_USERS_AGR_NAME
	-- Using child or parent role, get the auth, object, field, low, high
	INNER JOIN A_AGR_1251 
					ON ISNULL(AGR_AGRS_CHILD_AGR ,AGR_USERS_AGR_NAME) = AGR_1251_AGR_NAME
	WHERE AGR_1251_DELETED <> 'X' 
	
	UNION
	
	--Get profile, objct, auth from Role table AGR_1016
	SELECT DISTINCT AGR_USERS_UNAME, UST12_AUTH, UST12_OBJCT, UST12_FIELD, UST12_VON, UST12_BIS, AGR_1016_PROFILE -- HL: Added AGR_1016_PROFILE from SAP USAGE
	FROM A_AGR_USERS
	-- Limit on active users
	INNER JOIN B22_00_TT_USR02_BNAME_ACTIVE 
					ON AGR_USERS_UNAME = USR02_BNAME
    -- Get the child role (left because maybe some parents without child or users without child roles)
	LEFT JOIN B22_06B_TT_AGR_ROLE_NORMALIZED 
					ON AGR_AGRS_AGR_NAME = AGR_USERS_AGR_NAME
	
	INNER JOIN A_AGR_1016 AA 
					ON AGR_1016_PSTATE like 'A%' 
					AND ISNULL(AGR_AGRS_CHILD_AGR ,AGR_USERS_AGR_NAME) = AA.AGR_1016_AGR_NAME
	INNER JOIN B22_06A_TT_UST10_PROFN_FULL_LIST 
					ON AA.AGR_1016_PROFILE = UST10C_PROFN
	INNER JOIN B22_04B_TT_UST10S_VALID_AUTH 
					ON UST10S_PROFN = UST10C_SUBPROF
	INNER JOIN A_UST12  
					ON UST12_AUTH = UST10S_AUTH AND UST12_OBJCT = UST10S_OBJCT AND UST12_AKTPS LIKE 'A%'
	
	UNION
	
	--Get profile, objct, auth from Role table AGR_PROF
	SELECT DISTINCT AGR_USERS_UNAME, UST12_AUTH, AU.UST12_OBJCT, AU.UST12_FIELD, AU.UST12_VON, AU.UST12_BIS, AGR_PROF_PROFILE -- HL: Added AGR_PROF_PROFILE from SAP USAGE
	FROM A_AGR_USERS
	INNER JOIN B22_00_TT_USR02_BNAME_ACTIVE 
					ON AGR_USERS_UNAME = USR02_BNAME
	LEFT JOIN B22_06B_TT_AGR_ROLE_NORMALIZED 
					ON AGR_AGRS_AGR_NAME = AGR_USERS_AGR_NAME
	INNER JOIN A_AGR_PROF AA 
					ON ISNULL(AGR_AGRS_CHILD_AGR ,AGR_USERS_AGR_NAME) = AA.AGR_PROF_AGR_NAME
	INNER JOIN B22_06A_TT_UST10_PROFN_FULL_LIST 
					ON AA.AGR_PROF_PROFILE = UST10C_PROFN
	INNER JOIN B22_04B_TT_UST10S_VALID_AUTH 
					ON UST10S_PROFN = UST10C_SUBPROF
	INNER JOIN A_UST12 AU 
					ON AU.UST12_AUTH = UST10S_AUTH AND AU.UST12_OBJCT = UST10S_OBJCT
	
	-- Export the user authorization rule table out for review purpose
	SELECT * INTO B22_09B_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE FROM B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE

	
	-- For SAP USAGE: Export the user authorization rule table
	EXEC SP_DROPTABLE 'B22_09_IT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE'
	SELECT * INTO B22_09_IT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE FROM B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE

	--Update the combined user auhorization object list, to convert the * symbol to % (SQL uses % as regular expression to re-present many characters instead of *)
	UPDATE B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
	SET ZF_AGR_UST12_VON = REPLACE(ZF_AGR_UST12_VON, '%', '[#]')

	UPDATE B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
	SET ZF_AGR_UST12_VON = REPLACE(ZF_AGR_UST12_VON, '*', '%'),
	ZF_AGR_UST12_BIS = REPLACE(ZF_AGR_UST12_BIS, '*', '%')

	--Update the combined user auhorization object list, we will ingore $ values because SAP also skips them in the initial authorization check.
	UPDATE B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
	SET ZF_AGR_UST12_VON = '',
	ZF_AGR_UST12_BIS = ''
	WHERE ZF_AGR_UST12_VON LIKE '$%'

	--Update the combined user auhorization object list, we will ingore ', '' values because SAP also skips them in the initial authorization check.
	UPDATE B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
	SET ZF_AGR_UST12_VON = '%',
	ZF_AGR_UST12_BIS = ''
	WHERE ZF_AGR_UST12_VON = '''' OR ZF_AGR_UST12_VON = ''''''

	--Remove the authorization object field with blank value to speed up the script.
	DELETE B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
	WHERE ZF_AGR_UST12_VON = ''

	ALTER TABLE B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE ALTER COLUMN USR02_BNAME VARCHAR(70)
	ALTER TABLE B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE ALTER COLUMN ZF_AGR_UST12_AUTH VARCHAR(70)
	ALTER TABLE B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE ALTER COLUMN ZF_AGR_UST12_OBJCT VARCHAR(70)
	ALTER TABLE B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE ALTER COLUMN ZF_AGR_UST12_FIELD VARCHAR(70)
	ALTER TABLE B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE ALTER COLUMN ZF_AGR_UST12_VON VARCHAR(70)
	ALTER TABLE B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE ALTER COLUMN ZF_AGR_UST12_BIS VARCHAR(70)

	CREATE CLUSTERED INDEX IDX ON B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE(USR02_BNAME, ZF_AGR_UST12_AUTH, ZF_AGR_UST12_OBJCT, ZF_AGR_UST12_FIELD)
	CREATE INDEX ZF_AGR_UST12_VON ON B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE(ZF_AGR_UST12_VON)
	
-- Step 8: obtain a list of user, object and values for TCODES, only for lines that have a wildcard or a range
	EXEC SP_DROPTABLE 'B22_10_TT_AGR_UST12_TCODE_RANGE_LIST'
	SELECT DISTINCT USR02_BNAME, ZF_AGR_UST12_OBJCT, ZF_AGR_UST12_VON, ZF_AGR_UST12_BIS 
	INTO B22_10_TT_AGR_UST12_TCODE_RANGE_LIST
	FROM B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
	WHERE (ZF_AGR_UST12_VON LIKE '%[%]%' OR ZF_AGR_UST12_BIS <> '') AND ZF_AGR_UST12_FIELD = 'TCD' AND ZF_AGR_UST12_OBJCT = 'S_TCODE'

-- Step 9: normalize the Authorization value TCODE High - Low range
	EXEC SP_DROPTABLE 'B22_11_TT_UST12_AGR_AUTH_OBJCT_FIELD_VALUE'
	SELECT DISTINCT USR02_BNAME, 
	ZF_AGR_UST12_AUTH,
	ZF_AGR_UST12_OBJCT, 
	ZF_AGR_UST12_FIELD, 
	ZF_AGR_UST12_VON, 
	ZF_AGR_UST12_BIS
	INTO B22_11_TT_UST12_AGR_AUTH_OBJCT_FIELD_VALUE
	FROM B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
	

	INSERT INTO B22_11_TT_UST12_AGR_AUTH_OBJCT_FIELD_VALUE
	SELECT DISTINCT 
	USR02_BNAME,
	'',
	ZF_AGR_UST12_OBJCT, 
	'TCD' ZF_AGR_UST12_FIELD, 
	REPLACE(TSTC_TCODE, '%', '[#]') ZF_AGR_UST12_VON,
	'' ZF_AGR_UST12_BIS
	FROM B22_10_TT_AGR_UST12_TCODE_RANGE_LIST A
	INNER JOIN B22_04_TT_TSTC_VALID_PGM AT 
						ON (ZF_AGR_UST12_VON = '%')
						OR (ZF_AGR_UST12_BIS = '' 
						AND AT.TSTC_TCODE LIKE A.ZF_AGR_UST12_VON)
						OR (ZF_AGR_UST12_BIS <> '' 
						AND AT.TSTC_TCODE BETWEEN REPLACE(ZF_AGR_UST12_VON, '%', '') AND REPLACE(ZF_AGR_UST12_BIS, '%', ''))
	WHERE NOT EXISTS(SELECT * FROM B22_11_TT_UST12_AGR_AUTH_OBJCT_FIELD_VALUE B 
								WHERE B.USR02_BNAME = A.USR02_BNAME
									AND B.ZF_AGR_UST12_OBJCT = A.ZF_AGR_UST12_OBJCT
									AND B.ZF_AGR_UST12_FIELD = 'TCD'
									AND B.ZF_AGR_UST12_VON = TSTC_TCODE)

------------------------------------------------------------PART2--------------------------------------------------------------------------------
-- Both TSTCA check and USOBT check will be done seperately. Results from two stages will be merged at the end.

--Step 10: Make a list of S_TCODE object lines from the user cube 

	EXEC SP_DROPTABLE 'B22_12_TT_USER_S_TCODE_LINES'
	SELECT * 
	INTO B22_12_TT_USER_S_TCODE_LINES
	FROM B22_11_TT_UST12_AGR_AUTH_OBJCT_FIELD_VALUE A
	WHERE ZF_AGR_UST12_OBJCT = 'S_TCODE'

-- Step 11: Perform a normal check and eliminate TCODE usage with insufficient Authorization object

	-- Step 11a: create user, TCODE list
		EXEC SP_DROPTABLE 'B22_12B_TT_BNAME_TCODE'
		SELECT DISTINCT USR02_BNAME, ZF_AGR_UST12_VON
		INTO B22_12B_TT_BNAME_TCODE
		FROM B22_12_TT_USER_S_TCODE_LINES
		WHERE ZF_AGR_UST12_FIELD = 'TCD'

	-- Step 11b: compare with check table, and remove the TCODEs that have insufficient requirements. (ignore Authorization ID for optimization)
		EXEC SP_DROPTABLE 'B22_13_TT_BNAME_TSTCA_TCODE_EXCL_LIST'
		SELECT DISTINCT B.USR02_BNAME, A.TSTCA_TCODE
		INTO B22_13_TT_BNAME_TSTCA_TCODE_EXCL_LIST
		FROM A_TSTCA A
			LEFT JOIN B22_12B_TT_BNAME_TCODE B ON A.TSTCA_TCODE = B.ZF_AGR_UST12_VON -- Only do check on users that have the TCODE
			LEFT JOIN B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE C ON B.USR02_BNAME = C.USR02_BNAME -- check the user has the required object, field, VON and BIS
																				AND A.TSTCA_OBJCT = C.ZF_AGR_UST12_OBJCT
																				AND A.TSTCA_FIELD = C.ZF_AGR_UST12_FIELD
																				AND ((C.ZF_AGR_UST12_VON = '%')
																					OR (ZF_AGR_UST12_BIS = '' AND A.TSTCA_VALUE LIKE C.ZF_AGR_UST12_VON)
																					OR (ZF_AGR_UST12_BIS <> '' AND A.TSTCA_VALUE BETWEEN REPLACE(C.ZF_AGR_UST12_VON, '%', '') AND REPLACE(ZF_AGR_UST12_BIS, '%', '')))
		WHERE TSTCA_VALUE <> '' AND C.ZF_AGR_UST12_FIELD IS NULL -- filter on those that don't have the required object, field, VON and BIS

	-- Step 11c: eliminate TCODE with insufficient object

		EXEC SP_DROPTABLE 'B22_13B_TT_BNAME_TCODE_TSTCA'
		SELECT A.* 
		INTO B22_13B_TT_BNAME_TCODE_TSTCA
		FROM B22_12B_TT_BNAME_TCODE A
		WHERE 
				NOT EXISTS(SELECT * FROM B22_13_TT_BNAME_TSTCA_TCODE_EXCL_LIST B 
											WHERE A.USR02_BNAME = B.USR02_BNAME 
											AND A.ZF_AGR_UST12_VON = B.TSTCA_TCODE)
				AND EXISTS(SELECT * FROM A_TSTCA WHERE TSTCA_TCODE = A.ZF_AGR_UST12_VON)
		CREATE INDEX USR02_BNAME ON B22_12B_TT_BNAME_TCODE(USR02_BNAME)

-- Step 12: Perform another check with Authorization ID and eliminate TCODE usage with insufficient Authorization object
	-- Step 12a: create a username, auth, object list
		EXEC SP_DROPTABLE 'B22_15_TT_BNAME_AUTH_OBJCT'
		SELECT DISTINCT USR02_BNAME, ZF_AGR_UST12_AUTH, ZF_AGR_UST12_OBJCT 
		INTO B22_15_TT_BNAME_AUTH_OBJCT
		FROM B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE

	-- Step 12b: Flag user+authorization+object combinations that are missing something from TSTCA
		EXEC SP_DROPTABLE 'B22_16_TT_BNAME_TCODE_AUTH_FULL_MAPPING'
		SELECT DISTINCT B.USR02_BNAME, A.TSTCA_TCODE, B1.ZF_AGR_UST12_AUTH, B1.ZF_AGR_UST12_OBJCT, C.ZF_AGR_UST12_FIELD, C.ZF_AGR_UST12_VON, C.ZF_AGR_UST12_BIS, A.TSTCA_VALUE
		INTO B22_16_TT_BNAME_TCODE_AUTH_FULL_MAPPING
		FROM A_TSTCA A
			INNER JOIN B22_13B_TT_BNAME_TCODE_TSTCA B ON A.TSTCA_TCODE = B.ZF_AGR_UST12_VON  -- Only do the check if user has the TCODE 
			INNER JOIN B22_15_TT_BNAME_AUTH_OBJCT B1 ON B1.USR02_BNAME = B.USR02_BNAME
													AND B1.ZF_AGR_UST12_OBJCT = A.TSTCA_OBJCT -- Get the authorizations that the user has for the object
			LEFT JOIN B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE C ON B1.USR02_BNAME = C.USR02_BNAME -- check that the user, authorization, object...
																				AND B1.ZF_AGR_UST12_AUTH = C.ZF_AGR_UST12_AUTH
																				AND B1.ZF_AGR_UST12_OBJCT = C.ZF_AGR_UST12_OBJCT -- has the required field, VON and BIS
																				AND A.TSTCA_FIELD = C.ZF_AGR_UST12_FIELD -- flag: 
																				-- if there are not all the required field, VON, BIS then C.ZF_AGR_UST12_FIELD will be NULL for that 
																				-- line
																				AND ((C.ZF_AGR_UST12_VON = '%')
																					OR (C.ZF_AGR_UST12_VON = TSTCA_VALUE)
																					OR (C.ZF_AGR_UST12_BIS = '' AND A.TSTCA_VALUE LIKE C.ZF_AGR_UST12_VON)
																					OR (C.ZF_AGR_UST12_BIS <> '' AND A.TSTCA_VALUE BETWEEN REPLACE(C.ZF_AGR_UST12_VON, '%', '') AND REPLACE(ZF_AGR_UST12_BIS, '%', '')))
		WHERE TSTCA_VALUE <> '' -- If TSTCA_VALUE is NULL then no check necessary - so no need to do the JOIN with TSTCA - so SQL will skip these lines in TSTCA for the join

	-- Step 12c: Eliminate the authorization + object combinations for hte user and TCODE, for which teh object was not found
	--           to be complete within the authorization in step 12b
		EXEC SP_DROPTABLE 'B22_17_TT_BNAME_TCODE_AUTH_FULL_MAPPING_VALID'
		SELECT DISTINCT USR02_BNAME, TSTCA_TCODE, ZF_AGR_UST12_OBJCT
		INTO B22_17_TT_BNAME_TCODE_AUTH_FULL_MAPPING_VALID
		FROM B22_16_TT_BNAME_TCODE_AUTH_FULL_MAPPING A
		---Exclude the auth ID with unmatched results, keep the users' BNAME, TCODE, AUTH & OBJCT combination that has the matched results only.
		WHERE NOT EXISTS(SELECT * FROM B22_16_TT_BNAME_TCODE_AUTH_FULL_MAPPING B WHERE B.USR02_BNAME = A.USR02_BNAME
																	AND B.TSTCA_TCODE = A.TSTCA_TCODE
																	AND B.ZF_AGR_UST12_AUTH = A.ZF_AGR_UST12_AUTH
																	AND B.ZF_AGR_UST12_OBJCT = A.ZF_AGR_UST12_OBJCT
																	AND B.ZF_AGR_UST12_FIELD IS NULL) -- eliminate those USER, AUTH, OBJ combinations from 12b for which a
																	                                  -- at least one line was missing from TSTCA
		

	-- After having eliminated some objects in step 12c, the TCODE might now be missing some objects (that it wasn't missing before)

	-- Step 12d (mirrors step 11a): make a list of User, TCODE, authorization, object
		--EXEC SP_DROPTABLE 'B22_17B_TT_BNAME_AUTH_OBJCT_LIST'
		--SELECT DISTINCT USR02_BNAME, TSTCA_TCODE, ZF_AGR_UST12_AUTH, ZF_AGR_UST12_OBJCT INTO B22_17B_TT_BNAME_AUTH_OBJCT_LIST FROM B22_17_TT_BNAME_TCODE_AUTH_FULL_MAPPING_VALID
		--CREATE CLUSTERED INDEX IDX ON B22_17B_TT_BNAME_AUTH_OBJCT_LIST(USR02_BNAME, TSTCA_TCODE, ZF_AGR_UST12_AUTH, ZF_AGR_UST12_OBJCT)
		--CREATE CLUSTERED INDEX IDX ON B22_17_TT_BNAME_TCODE_AUTH_FULL_MAPPING_VALID(USR02_BNAME, TSTCA_TCODE, ZF_AGR_UST12_OBJCT)

    -- Step 12e create a list of user, TCODEs for which the object, field and value (within an authorization) is no longer complete for the TCODE

		EXEC SP_DROPTABLE 'B22_19_TT_BNAME_TCODE_EXCL_LIST_BY_AUTH'
		SELECT DISTINCT B.USR02_BNAME, A.TSTCA_TCODE
		INTO B22_19_TT_BNAME_TCODE_EXCL_LIST_BY_AUTH
		FROM A_TSTCA A
			CROSS JOIN B22_00_TT_USR02_BNAME_ACTIVE B -- for each user make all combinations from TSTCA
			--LEFT JOIN B22_17B_TT_BNAME_AUTH_OBJCT_LIST B1 ON B1.USR02_BNAME = B.USR02_BNAME   -- for each user, tcode, object make all combinations from TSTCA
			--												AND B1.TSTCA_TCODE = A.TSTCA_TCODE
			--												AND A.TSTCA_OBJCT = B1.ZF_AGR_UST12_OBJCT
			LEFT JOIN B22_17_TT_BNAME_TCODE_AUTH_FULL_MAPPING_VALID C ON B.USR02_BNAME = C.USR02_BNAME -- Check for the user, tcode, authoriations, those that are missing an object
																		AND A.TSTCA_TCODE = C.TSTCA_TCODE
																		--AND C.ZF_AGR_UST12_AUTH = B1.ZF_AGR_UST12_AUTH
																		AND A.TSTCA_OBJCT = C.ZF_AGR_UST12_OBJCT

		WHERE A.TSTCA_VALUE <> '' AND C.ZF_AGR_UST12_OBJCT IS NULL -- taking those that were missing somehting so NULL in C

    -- Step 12f Remove Users+ TCODES for which the object was not complete within the authorization, or for which there
	--          there are not sufficient objects (due to the fact the object was not complete in the authorization)
	
	
	EXEC SP_DROPTABLE 'B22_20_TT_TSTCA_BNAME_TCODE_EXCL_AUTH'
		SELECT A.* 
		INTO B22_20_TT_TSTCA_BNAME_TCODE_EXCL_AUTH
		FROM B22_13B_TT_BNAME_TCODE_TSTCA A
		WHERE NOT EXISTS(SELECT * FROM B22_19_TT_BNAME_TCODE_EXCL_LIST_BY_AUTH B 
									WHERE A.USR02_BNAME = B.USR02_BNAME 
									AND A.ZF_AGR_UST12_VON = B.TSTCA_TCODE)
				AND A.ZF_AGR_UST12_VON <> ''




------------------------------------------------------------PART3--------------------------------------------------------------------------------
--Step 13-17: Eliminate user tocde with no relevant S_TCODE objects for USOBT

--Step 13: Create USOBX-USOBT requirement table
    -- For comparisons on individual values convert * to %
	-- For comparisons on range, remove the *
	-- Ignore lines where LOW is a * on its own or LOW is blank, as SAP will skip the check on this object
	EXEC SP_DROPTABLE 'B22_21_TT_USOBX_USOBT_CHECK_LIST'
	SELECT DISTINCT REPLACE(USOBT_NAME, '%', '[#]') USOBT_NAME, B.USOBT_OBJECT, B.USOBT_FIELD, REPLACE(USOBT_LOW, '*', '%') USOBT_LOW, REPLACE(USOBT_HIGH, '*', '%') USOBT_HIGH, REPLACE(USOBT_LOW, '*', '') ZF_USOBT_LOW_NWC,  REPLACE(USOBT_HIGH, '*', '') ZF_USOBT_HIGH_NWC
	INTO B22_21_TT_USOBX_USOBT_CHECK_LIST
	FROM A_USOBX_C A
	INNER JOIN A_USOBT_C B ON A.USOBX_NAME = B.USOBT_NAME
							AND A.USOBX_OBJECT = B.USOBT_OBJECT
	WHERE USOBX_OKFLAG IN ('X', 'Y') AND USOBT_TYPE = 'TR' AND USOBT_LOW <> '' AND USOBT_LOW <> '*'

	-- Remove required auth, objects that are always skipped the check
	DELETE B22_21_TT_USOBX_USOBT_CHECK_LIST
	WHERE (USOBT_LOW LIKE '$%' AND USOBT_FIELD <> 'TCD') OR USOBT_LOW = '''''' OR USOBT_LOW = '''' OR USOBT_LOW = ''' '''

-- Step 14: 
	-- Step 14a: Create objct authorization list
		EXEC SP_DROPTABLE 'B22_22_TT_BNAME_AUTH_OBJCT_LIST'
		SELECT DISTINCT USR02_BNAME, ZF_AGR_UST12_OBJCT, ZF_AGR_UST12_AUTH 
		INTO B22_22_TT_BNAME_AUTH_OBJCT_LIST
		FROM B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE

        ALTER TABLE B22_22_TT_BNAME_AUTH_OBJCT_LIST ALTER COLUMN USR02_BNAME NVARCHAR(50)
		CREATE INDEX IDX ON B22_22_TT_BNAME_AUTH_OBJCT_LIST(USR02_BNAME, ZF_AGR_UST12_OBJCT)
		CREATE INDEX ZF_AGR_UST12_AUTH ON B22_22_TT_BNAME_AUTH_OBJCT_LIST(ZF_AGR_UST12_AUTH)

	-- Step 14b:
		-- Create user, auth, objct, field, von & bis
		-- Von and bis field with no wildcard (*) because it will affect to SQL range and calculation performance
		EXEC SP_DROPTABLE 'B22_23_TT_UST10S_AGR_AUTH_OBJCT_AUTH_FIELD_VALUE'
		SELECT DISTINCT *, REPLACE(ZF_AGR_UST12_VON, '%', '') ZF_AGR_UST12_VON_NWC, REPLACE(ZF_AGR_UST12_BIS, '%', '') ZF_AGR_UST12_BIS_NWC
		INTO B22_23_TT_UST10S_AGR_AUTH_OBJCT_AUTH_FIELD_VALUE
		FROM B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
		CREATE CLUSTERED INDEX IDX ON B22_23_TT_UST10S_AGR_AUTH_OBJCT_AUTH_FIELD_VALUE(USR02_BNAME, ZF_AGR_UST12_AUTH, ZF_AGR_UST12_OBJCT, ZF_AGR_UST12_FIELD)
		CREATE INDEX ZF_AGR_UST12_VON ON B22_23_TT_UST10S_AGR_AUTH_OBJCT_AUTH_FIELD_VALUE(ZF_AGR_UST12_VON)
		-- Create user, objct, field, von & bis
		-- Von and bis field with no wildcard (*) because it will affect to SQL range and calculation performance
		EXEC SP_DROPTABLE 'B22_24_TT_UST10S_AGR_BNAME_OBJCT_FIELD_VALUE'
		SELECT DISTINCT USR02_BNAME, ZF_AGR_UST12_OBJCT, ZF_AGR_UST12_FIELD, ZF_AGR_UST12_VON, ZF_AGR_UST12_BIS ,REPLACE(ZF_AGR_UST12_VON, '%', '') ZF_AGR_UST12_VON_NWC, REPLACE(ZF_AGR_UST12_BIS, '%', '') ZF_AGR_UST12_BIS_NWC
		INTO B22_24_TT_UST10S_AGR_BNAME_OBJCT_FIELD_VALUE
		FROM B22_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
		CREATE CLUSTERED INDEX IDX ON B22_24_TT_UST10S_AGR_BNAME_OBJCT_FIELD_VALUE(USR02_BNAME, ZF_AGR_UST12_OBJCT, ZF_AGR_UST12_FIELD)

	-- Step 14c: Create an exclusion TCODE list for TCODE with insufficient auth object from users
		EXEC SP_DROPTABLE 'B22_24B_TT_BNAME_TCODE_USOBT_EXCL_LIST'
		SELECT DISTINCT B.USR02_BNAME, A.USOBT_NAME
		INTO B22_24B_TT_BNAME_TCODE_USOBT_EXCL_LIST
		FROM B22_21_TT_USOBX_USOBT_CHECK_LIST A
		CROSS JOIN B22_00_TT_USR02_BNAME_ACTIVE B
		LEFT JOIN B22_12B_TT_BNAME_TCODE C ON C.USR02_BNAME = B.USR02_BNAME
															AND C.ZF_AGR_UST12_VON = A.USOBT_NAME
		LEFT JOIN B22_24_TT_UST10S_AGR_BNAME_OBJCT_FIELD_VALUE D ON D.USR02_BNAME = C.USR02_BNAME
															AND D.ZF_AGR_UST12_OBJCT = A.USOBT_OBJECT
															AND D.ZF_AGR_UST12_FIELD = A.USOBT_FIELD
															AND (
																-- pass if LOW field equal to VON (direct match
																D.ZF_AGR_UST12_VON = USOBT_LOW
																-- pass if LOW field from USOBT like user VON value pattern (F* or *F will be resolved here)
																OR ( USOBT_LOW LIKE D.ZF_AGR_UST12_VON)
																-- pass if user VON field like LOW field from USOBT pattern
																OR ( D.ZF_AGR_UST12_VON LIKE USOBT_LOW)
																-- pass if USOBT_LOW between VON and Bis value (user range covers USOBT LOW value)
																OR (D.ZF_AGR_UST12_BIS <> '' AND ZF_USOBT_LOW_NWC BETWEEN D.ZF_AGR_UST12_VON_NWC AND D.ZF_AGR_UST12_BIS_NWC)
																-- pass if user VON value is between USOBT LOW & HIGH value
																OR (USOBT_HIGH <> '' AND D.ZF_AGR_UST12_VON_NWC BETWEEN ZF_USOBT_LOW_NWC AND ZF_USOBT_HIGH_NWC)
																-- pass if both user & USOBT table have BIS & HIGH value and their range lie accross each other
																OR (USOBT_HIGH <> '' AND D.ZF_AGR_UST12_BIS <> '' AND ZF_AGR_UST12_VON_NWC <= ZF_USOBT_HIGH_NWC AND ZF_AGR_UST12_BIS_NWC >= ZF_USOBT_LOW_NWC))
		WHERE B.USR02_BNAME <> '' AND D.ZF_AGR_UST12_VON IS NULL

	-- Step 14d: Exclude the TCODE with insufficient auth object from users
		
		SELECT DISTINCT USOBT_NAME INTO B22_24C_TT_USOBT_TCODE_LIST FROM A_USOBT_C
		CREATE INDEX USOBT_NAME_IDX ON  B22_24C_TT_USOBT_TCODE_LIST(USOBT_NAME)

		EXEC SP_DROPTABLE 'B22_25_TT_BNAME_TCODE_STCODE_OBJCT_USOBT_CHECKED'
	
		SELECT DISTINCT A.* 
		INTO B22_25_TT_BNAME_TCODE_STCODE_OBJCT_USOBT_CHECKED
		FROM B22_12B_TT_BNAME_TCODE A --User TCODE list in step 2
		WHERE	-- check if the user + TCODE combination is not in the exclusion list
				(NOT EXISTS(SELECT * FROM B22_24B_TT_BNAME_TCODE_USOBT_EXCL_LIST B 
									WHERE A.USR02_BNAME = B.USR02_BNAME AND A.ZF_AGR_UST12_VON = B.USOBT_NAME))
				-- check if the TCODE is in USOBT scope
				AND EXISTS(SELECT * FROM B22_24C_TT_USOBT_TCODE_LIST WHERE USOBT_NAME = A.ZF_AGR_UST12_VON)

		EXEC SP_DROPTABLE 'B22_21B_TT_USOBX_USOBT_TCODE_LIST'
		SELECT DISTINCT USOBT_NAME INTO B22_21B_TT_USOBX_USOBT_TCODE_LIST FROM B22_21_TT_USOBX_USOBT_CHECK_LIST
		CREATE CLUSTERED INDEX IDX ON B22_25_TT_BNAME_TCODE_STCODE_OBJCT_USOBT_CHECKED(USR02_BNAME, ZF_AGR_UST12_VON)


-- Step 15: prepare reference tables for Loop
	-- Create an empty output table to store results
	CREATE TABLE [dbo].B22_30_TT_USOBT_BNAME_TCODE_EXCL_LIST_BY_AUTH(
		[USR02_BNAME] [varchar](70) NULL,
		[USOBT_NAME] [nvarchar](30) NULL
	) ON [PRIMARY]
	DECLARE @SQLMSG NVARCHAR(MAX) = ''
	-- Copy the scope user ID active table to another temp table

	SELECT * INTO B22_00B_TT_USR02_BNAME_ACTIVE FROM B22_00_TT_USR02_BNAME_ACTIVE

-- Step 16a-f: Start a loop to process 10 users each cycle to prevent SQL tempdb to overgrowth
	SET NOCOUNT ON
	WHILE EXISTS(SELECT * FROM B22_00B_TT_USR02_BNAME_ACTIVE)
	BEGIN
		--Step 16a: select 10 users from the user list
		EXEC SP_DROPTABLE 'B22_00C_TT_USR02_BNAME_ACTIVE'
		--SELECT TOP 50 * INTO B22_00C_TT_USR02_BNAME_ACTIVE FROM B22_00B_TT_USR02_BNAME_ACTIVE
		SELECT TOP 100 * INTO B22_00C_TT_USR02_BNAME_ACTIVE FROM B22_00B_TT_USR02_BNAME_ACTIVE
		--Step 16b: exclude the selected users from previous step
		DELETE B22_00B_TT_USR02_BNAME_ACTIVE
		FROM B22_00B_TT_USR02_BNAME_ACTIVE A
		INNER JOIN B22_00C_TT_USR02_BNAME_ACTIVE B ON A.USR02_BNAME = B.USR02_BNAME

		--Step 16c: from USOBT-USOBX table, check each TCODE's objects with the user auth object list
		EXEC SP_DROPTABLE 'B22_27_TT_BNAME_AUTH_FULL_MAPPING_USOBT'
		SELECT B.USR02_BNAME, A.USOBT_NAME, D.ZF_AGR_UST12_AUTH, D.ZF_AGR_UST12_OBJCT, E.ZF_AGR_UST12_FIELD, E.ZF_AGR_UST12_VON, E.ZF_AGR_UST12_BIS, USOBT_LOW
		INTO B22_27_TT_BNAME_AUTH_FULL_MAPPING_USOBT
		FROM B22_21_TT_USOBX_USOBT_CHECK_LIST A
		CROSS JOIN B22_00C_TT_USR02_BNAME_ACTIVE B
		INNER JOIN B22_25_TT_BNAME_TCODE_STCODE_OBJCT_USOBT_CHECKED C ON C.USR02_BNAME = B.USR02_BNAME
															AND C.ZF_AGR_UST12_VON = A.USOBT_NAME  -- limit to those that have access to the TCODE
		INNER JOIN B22_22_TT_BNAME_AUTH_OBJCT_LIST D ON D.USR02_BNAME = C.USR02_BNAME 
													AND D.ZF_AGR_UST12_OBJCT = A.USOBT_OBJECT  -- get the authorization per user, object
		LEFT JOIN B22_23_TT_UST10S_AGR_AUTH_OBJCT_AUTH_FIELD_VALUE E ON E.USR02_BNAME = C.USR02_BNAME
																	AND E.ZF_AGR_UST12_AUTH = D.ZF_AGR_UST12_AUTH
																	AND E.ZF_AGR_UST12_OBJCT = A.USOBT_OBJECT
																	AND E.ZF_AGR_UST12_FIELD = A.USOBT_FIELD
																	AND (-- pass if LOW field equal to VON (direct match)
																		E.ZF_AGR_UST12_VON = USOBT_LOW
																	-- pass if LOW field from USOBT like user VON value pattern (F* or *F will be resolved here)
																	OR ( USOBT_LOW LIKE E.ZF_AGR_UST12_VON)
																	-- pass if user VON field like LOW field from USOBT pattern
																	OR (E.ZF_AGR_UST12_VON LIKE USOBT_LOW)
																	-- pass if USOBT_LOW between VON and Bis value (user range covers USOBT LOW value)
																	OR (E.ZF_AGR_UST12_BIS <> '' AND ZF_USOBT_LOW_NWC BETWEEN E.ZF_AGR_UST12_VON_NWC AND E.ZF_AGR_UST12_BIS_NWC)
																	-- pass if user VON value is between USOBT LOW & HIGH value
																	OR (USOBT_HIGH <> '' AND E.ZF_AGR_UST12_VON_NWC BETWEEN ZF_USOBT_LOW_NWC AND ZF_USOBT_HIGH_NWC)
																	-- pass if both user & USOBT table have BIS & HIGH value and their range lie accross each other
																	OR (USOBT_HIGH <> '' AND E.ZF_AGR_UST12_BIS <> '' AND ZF_AGR_UST12_VON_NWC <= ZF_USOBT_HIGH_NWC AND ZF_AGR_UST12_BIS_NWC >= ZF_USOBT_LOW_NWC))

		--Step 16d: Exclude the auth ID with unmatched results, keep the users' BNAME, TCODE, AUTH & OBJCT combination that has the matched results only.
		EXEC SP_DROPTABLE 'B22_28_TT_BNAME_AUTH_FULL_MAPPING_USOBT_VALID'
		SELECT DISTINCT USR02_BNAME, USOBT_NAME, ZF_AGR_UST12_OBJCT
		INTO B22_28_TT_BNAME_AUTH_FULL_MAPPING_USOBT_VALID
		FROM B22_27_TT_BNAME_AUTH_FULL_MAPPING_USOBT A
		WHERE NOT EXISTS(SELECT * FROM B22_27_TT_BNAME_AUTH_FULL_MAPPING_USOBT B WHERE B.USR02_BNAME = A.USR02_BNAME
																	AND B.USOBT_NAME = A.USOBT_NAME
																	AND B.ZF_AGR_UST12_AUTH = A.ZF_AGR_UST12_AUTH
																	AND B.ZF_AGR_UST12_OBJCT = A.ZF_AGR_UST12_OBJCT
																	AND B.ZF_AGR_UST12_FIELD IS NULL)

		ALTER TABLE B22_28_TT_BNAME_AUTH_FULL_MAPPING_USOBT_VALID ALTER COLUMN USOBT_NAME VARCHAR(70)
		CREATE CLUSTERED INDEX IDX ON B22_28_TT_BNAME_AUTH_FULL_MAPPING_USOBT_VALID(USR02_BNAME, USOBT_NAME, ZF_AGR_UST12_OBJCT)

		--Step 16e: Create new valid user, TCODE, Auth, object list
		--EXEC SP_DROPTABLE 'B22_29_TT_BNAME_AUTH_OBJCT_LIST'
		--SELECT DISTINCT USR02_BNAME, USOBT_NAME, ZF_AGR_UST12_AUTH, ZF_AGR_UST12_OBJCT INTO B22_29_TT_BNAME_AUTH_OBJCT_LIST FROM B22_28_TT_BNAME_AUTH_FULL_MAPPING_USOBT_VALID
		--CREATE CLUSTERED INDEX IDX ON B22_29_TT_BNAME_AUTH_OBJCT_LIST(USR02_BNAME, USOBT_NAME, ZF_AGR_UST12_OBJCT)
		--CREATE INDEX ZF_AGR_UST12_AUTH ON B22_29_TT_BNAME_AUTH_OBJCT_LIST(ZF_AGR_UST12_AUTH)

		--Step 16f: Exclude the TCODE with insufficient Auth object from users' auth tables
		EXEC SP_DROPTABLE 'B22_21B_TT_USOBX_USOBT_TCODE_OBJ_CHECK_LIST'
		SELECT DISTINCT USOBT_NAME, USOBT_OBJECT
		INTO B22_21B_TT_USOBX_USOBT_TCODE_OBJ_CHECK_LIST
		FROM B22_21_TT_USOBX_USOBT_CHECK_LIST
		ALTER TABLE B22_21B_TT_USOBX_USOBT_TCODE_OBJ_CHECK_LIST ALTER COLUMN USOBT_NAME VARCHAR(70)
		ALTER TABLE B22_21B_TT_USOBX_USOBT_TCODE_OBJ_CHECK_LIST ALTER COLUMN USOBT_OBJECT VARCHAR(70)
		CREATE INDEX USOBT ON B22_21B_TT_USOBX_USOBT_TCODE_OBJ_CHECK_LIST(USOBT_NAME)
		CREATE INDEX OBJCT ON B22_21B_TT_USOBX_USOBT_TCODE_OBJ_CHECK_LIST(USOBT_OBJECT)

		INSERT INTO B22_30_TT_USOBT_BNAME_TCODE_EXCL_LIST_BY_AUTH
		SELECT DISTINCT B.USR02_BNAME, A.USOBT_NAME
		FROM B22_21B_TT_USOBX_USOBT_TCODE_LIST A
		CROSS JOIN B22_00C_TT_USR02_BNAME_ACTIVE B
		WHERE EXISTS(SELECT * FROM B22_21B_TT_USOBX_USOBT_TCODE_OBJ_CHECK_LIST B1
								LEFT JOIN B22_28_TT_BNAME_AUTH_FULL_MAPPING_USOBT_VALID E ON E.USR02_BNAME = B.USR02_BNAME
																					AND E.USOBT_NAME = B1.USOBT_NAME
																					AND E.ZF_AGR_UST12_OBJCT = B1.USOBT_OBJECT
						WHERE B1.USOBT_NAME = A.USOBT_NAME AND E.ZF_AGR_UST12_OBJCT IS NULL)


		SET @SQLMSG = CAST((SELECT COUNT(*) FROM B22_00B_TT_USR02_BNAME_ACTIVE) AS NVARCHAR(50)) + ' record(s) left'
		SET NOCOUNT ON
		RAISERROR (@SQLMSG, 10, 1)
		SET NOCOUNT OFF
	END
	SET NOCOUNT OFF

-- Step 17: from above results, exclude the user TCODE with insufficient authorization objects.
	EXEC SP_DROPTABLE 'B22_31_TT_USOBT_BNAME_TCODE_EXCL_AUTH'
	SELECT A.*
	INTO B22_31_TT_USOBT_BNAME_TCODE_EXCL_AUTH
	FROM B22_25_TT_BNAME_TCODE_STCODE_OBJCT_USOBT_CHECKED A
	WHERE NOT EXISTS(SELECT * FROM B22_30_TT_USOBT_BNAME_TCODE_EXCL_LIST_BY_AUTH B WHERE B.USR02_BNAME = A.USR02_BNAME AND B.USOBT_NAME = A.ZF_AGR_UST12_VON)

-- Step 18: combine results from TSTCA & USOBT parts
	EXEC SP_DROPTABLE 'B22A_32_TT_BNAME_TCODE_ACCESS'
	SELECT DISTINCT A.USR02_BNAME USR02_BNAME, A.ZF_AGR_UST12_VON ZF_AGR_UST12_VON, IIF(B1.ZF_AGR_UST12_VON IS NOT NULL, 'X', '') DISPLAY, IIF(C1.ZF_AGR_UST12_VON IS NOT NULL, 'X', '') FULL_ACCESS
	INTO B22A_32_TT_BNAME_TCODE_ACCESS
	FROM B22_12B_TT_BNAME_TCODE A
	-- joining with TSTCA TCODE valid list
	LEFT JOIN B22_20_TT_TSTCA_BNAME_TCODE_EXCL_AUTH B1 ON 
											A.USR02_BNAME = B1.USR02_BNAME 
											AND A.ZF_AGR_UST12_VON = B1.ZF_AGR_UST12_VON
	-- joining with USOBT TCODE valid list
	LEFT JOIN B22_31_TT_USOBT_BNAME_TCODE_EXCL_AUTH C1 ON 
											A.USR02_BNAME = C1.USR02_BNAME 
											AND A.ZF_AGR_UST12_VON = C1.ZF_AGR_UST12_VON
	WHERE
	-- get the TCODE that are not from exclusion list
	B1.ZF_AGR_UST12_VON IS NOT NULL 
	OR C1.ZF_AGR_UST12_VON IS NOT NULL
	-- or not exists in both TSTCA & USOBT scope
	OR (NOT EXISTS(SELECT * FROM A_USOBT_C WHERE USOBT_NAME = A.ZF_AGR_UST12_VON)
			AND NOT EXISTS(SELECT * FROM A_TSTCA WHERE TSTCA_TCODE = A.ZF_AGR_UST12_VON))

-- Step 19: update roles to the current output cube
	-- get role information from AGR_USERS, AGR_AGRS normalized and AGR_1251 tables
	EXEC SP_RENAME_FIELD 'B22A_', 'B22A_32_TT_BNAME_TCODE_ACCESS'
	EXEC SP_DROPTABLE 'B22_33_TT_AGR_ROLE_MAPPING'
		SELECT DISTINCT AGR_USERS_UNAME, AGR_AGRS_CHILD_AGR, AGR_1251_OBJECT, AGR_1251_LOW, AGR_1251_HIGH
		INTO B22_33_TT_AGR_ROLE_MAPPING
		FROM A_AGR_USERS
		INNER JOIN B22_00_TT_USR02_BNAME_ACTIVE ON USR02_BNAME = AGR_USERS_UNAME
		LEFT JOIN B22_06B_TT_AGR_ROLE_NORMALIZED ON AGR_AGRS_AGR_NAME = AGR_USERS_AGR_NAME
		INNER JOIN A_AGR_1251 ON AGR_1251_DELETED <> 'X' AND AGR_1251_OBJECT = 'S_TCODE' AND AGR_AGRS_CHILD_AGR = AGR_1251_AGR_NAME
		
		
		ALTER TABLE B22_33_TT_AGR_ROLE_MAPPING ALTER COLUMN AGR_USERS_UNAME NVARCHAR(70)
		ALTER TABLE B22_33_TT_AGR_ROLE_MAPPING ALTER COLUMN AGR_1251_OBJECT VARCHAR(70)
		ALTER TABLE B22_33_TT_AGR_ROLE_MAPPING ALTER COLUMN AGR_1251_LOW VARCHAR(70)
		CREATE CLUSTERED INDEX IDX ON B22_33_TT_AGR_ROLE_MAPPING(AGR_USERS_UNAME, AGR_1251_LOW)
		EXEC SP_DROPTABLE 'B22_25_TT_AGR_TCODE_RANGE_LIST_ROLE'
		-- Step 17B: obtain the Role - TCODE range list
		SELECT DISTINCT AGR_USERS_UNAME, REPLACE(AGR_1251_LOW, '*', '%') AGR_1251_LOW, AGR_1251_HIGH, AGR_AGRS_CHILD_AGR
		INTO B22_25_TT_AGR_TCODE_RANGE_LIST_ROLE
		FROM B22_33_TT_AGR_ROLE_MAPPING
		WHERE (AGR_1251_LOW LIKE '%*%' OR AGR_1251_HIGH <> '')

	-- normalize TCODE with roles information
		INSERT INTO B22_33_TT_AGR_ROLE_MAPPING
		SELECT DISTINCT AGR_USERS_UNAME, AGR_AGRS_CHILD_AGR, '' AGR_1251_OBJECT, TSTC_TCODE AGR_1251_LOW, '' AGR_1251_HIGH
		FROM B22_25_TT_AGR_TCODE_RANGE_LIST_ROLE A
		INNER JOIN A_TSTC AT ON (AGR_1251_LOW = '%') 
													OR (AGR_1251_HIGH = '' AND AT.TSTC_TCODE LIKE AGR_1251_LOW)
													OR (AGR_1251_HIGH <> '' AND AT.TSTC_TCODE BETWEEN REPLACE(AGR_1251_LOW, '%', '') AND AGR_1251_HIGH)
		WHERE NOT EXISTS(SELECT * FROM B22_33_TT_AGR_ROLE_MAPPING B WHERE B.AGR_USERS_UNAME = A.AGR_USERS_UNAME AND TSTC_TCODE = B.AGR_1251_LOW)


		CREATE INDEX AGR_USERS_UNAME ON B22_33_TT_AGR_ROLE_MAPPING(AGR_USERS_UNAME)
		CREATE INDEX AGR_1251_OBJECT ON B22_33_TT_AGR_ROLE_MAPPING(AGR_1251_OBJECT)
		CREATE INDEX AGR_1251_LOW ON B22_33_TT_AGR_ROLE_MAPPING(AGR_1251_LOW)

-- Step 20: combine outputs from step 18 & step 19 to final table

	EXEC SP_DROPTABLE 'B22A_34_IT_BNAME_TCODE_ACCESS'
	SELECT DISTINCT
	A.B22A_USR02_BNAME,
	B.AGR_AGRS_CHILD_AGR B22A_AGR_USERS_AGR_NAME,
	REPLACE(B22A_ZF_AGR_UST12_VON, '[#]', '%') B22A_ZF_AGR_UST12_VON,
	TSTCT_TTEXT B22A_TSTCT_TTEXT,
	B22A_DISPLAY,
	B22A_FULL_ACCESS
	INTO B22A_34_IT_BNAME_TCODE_ACCESS
	FROM B22A_32_TT_BNAME_TCODE_ACCESS A
	LEFT JOIN B22_33_TT_AGR_ROLE_MAPPING B ON A.B22A_USR02_BNAME = B.AGR_USERS_UNAME 
													AND A.B22A_ZF_AGR_UST12_VON = B.AGR_1251_LOW
	LEFT JOIN A_TSTCT ON TSTCT_SPRSL = 'E' AND dbo.REMOVE_LEADING_ZEROES(TSTCT_TCODE) = dbo.REMOVE_LEADING_ZEROES(A.B22A_ZF_AGR_UST12_VON)
	WHERE NOT A.B22A_ZF_AGR_UST12_VON LIKE '%[%]%'

---- Step 21: extra steps to compare with SUIM report in SOLA & JP region
--	-- for JP report, delete current SUIM data for Jesper and update new testing results
--	IF DB_NAME() LIKE '%JP%'
--	BEGIN
--		DELETE AM_SUIM_TEST_RESULTS
--		WHERE TEST_RESULT = 'Appear only in DIVA sql'

--		DELETE AM_SUIM_RESULTS
--		WHERE BNAME = 'SCAJJE00'

--		INSERT INTO AM_SUIM_RESULTS
--		SELECT DISTINCT BNAME, TCODE FROM AM_SUIM_TEST_RESULTS
--	END

--	--perform a full outer join with SUIM reports for full view of matched and missing TCODEs
--	IF DB_NAME() LIKE '%JP%' OR DB_NAME() LIKE '%SOLA%'
--	BEGIN
--		EXEC SP_DROPTABLE 'B22B_35_IT_BNAME_TCODE_DIVA_SUIM_COMPARE'
--		SELECT
--		ISNULL(A.B22A_USR02_BNAME, B.BNAME) B22B_USR02_BNAME,
--		ISNULL(A.B22A_ZF_AGR_UST12_VON, B.TCODE) B22B_ZF_AGR_UST12_VON,
--		IIF(B.TCODE IS NOT NULL, 'X', '') B22B_SUIM,

--		IIF(A.B22A_ZF_AGR_UST12_VON IS NOT NULL, 'X', '') B22B_DIVA,
--		B22A_DISPLAY B22B_DISPLAY,
--		B22A_FULL_ACCESS B22B_FULL_ACCESS,
--		TSTCT_TTEXT,
--		IIF(TSTC_TCODE IS NOT NULL, 'X', '') EXIST_IN_TSTC,
--		IIF(EXISTS(SELECT * FROM A_USOBT_C WHERE REPLACE(USOBT_NAME, '%', '[#]') = TSTCT_TCODE), 'X', '') EXISTS_IN_USOBT,
--		IIF(EXISTS(SELECT * FROM A_TSTCA WHERE TSTCA_TCODE = TSTCT_TCODE), 'X', '') EXISTS_IN_TSTCA
--		INTO B22B_35_IT_BNAME_TCODE_DIVA_SUIM_COMPARE
--		FROM (SELECT * FROM B22A_34_IT_BNAME_TCODE_ACCESS WHERE EXISTS(SELECT * FROM AM_SUIM_RESULTS C WHERE B22A_USR02_BNAME = BNAME)) A
--		FULL OUTER JOIN AM_SUIM_RESULTS B ON A.B22A_USR02_BNAME = B.BNAME
--									AND A.B22A_ZF_AGR_UST12_VON = B.TCODE
--		LEFT JOIN A_TSTCT C ON ISNULL(A.B22A_ZF_AGR_UST12_VON, B.TCODE) = TSTCT_TCODE AND TSTCT_SPRSL = 'EN'
--		LEFT JOIN A_TSTC D ON D.TSTC_TCODE = TSTCT_TCODE
	
--		INSERT INTO AM_SUIM_TEST_RESULTS
--		SELECT DISTINCT B22A_USR02_BNAME, B22A_ZF_AGR_UST12_VON, 'Appear only in DIVA sql' FROM B22A_34_IT_BNAME_TCODE_ACCESS A
--		WHERE B22A_USR02_BNAME = 'SCAJJE00' AND NOT EXISTS(SELECT * FROM AM_SUIM_TEST_RESULTS B WHERE B.BNAME = A.B22A_USR02_BNAME AND B.TCODE = A.B22A_ZF_AGR_UST12_VON)
--	END


------------------------------------------------------------PART4--------------------------------------------------------------------------------

-- Step 22: Create AM Tcode mapping details, based on Deloite SOD function matrix
	EXEC SP_DROPTABLE 'AM_TCODE_MATRIX_FULL'
	SELECT 
		ATM.TCODE TCODE_1, ATM2.TCODE TCODE_2, ISNULL(ATM3.TCODE, '') TCODE_3, ISNULL(ATM4.TCODE, '') TCODE_4, 
		ATF.DETAIL_RISK_DESCRIPTION,
		ATF.BP_PROC, ATF.SUB_BP, 
		ATF.RISK_CLASSIFICATION,
		ATF.RISK_ID,
		ATF.FUNC_1,
		ATF.FUNC_2,
		ATF.FUNC_3,
		ATF.FUNC_4
	INTO AM_TCODE_MATRIX_FULL
	FROM DIVA_MASTER_SCRIPT..AM_FUNCTION_MAPPING_SIMPLE ATF
	INNER JOIN DIVA_MASTER_SCRIPT..AM_TCODE_MAPPING ATM ON ATM.FUNC_ID = ATF.FUNC_1
	INNER JOIN DIVA_MASTER_SCRIPT..AM_TCODE_MAPPING ATM2 ON ATM2.FUNC_ID = ATF.FUNC_2 AND ATM.TCODE <> ATM2.TCODE
	LEFT JOIN DIVA_MASTER_SCRIPT..AM_TCODE_MAPPING ATM3 ON ATM3.FUNC_ID = ATF.FUNC_3 AND ATM2.TCODE <> ATM3.TCODE AND ATM.TCODE <> ATM3.TCODE
	LEFT JOIN DIVA_MASTER_SCRIPT..AM_TCODE_MAPPING ATM4 ON ATM4.FUNC_ID = ATF.FUNC_4 AND ATM3.TCODE <> ATM4.TCODE AND ATM2.TCODE <> ATM4.TCODE AND ATM.TCODE <> ATM4.TCODE

--Step 23: Create output table for active SOD TCODE and rename the table.
	SELECT DISTINCT * INTO B22_36_TT_BNAME_TCODE_ACCESS FROM B22A_34_IT_BNAME_TCODE_ACCESS
	CREATE CLUSTERED INDEX IDX ON B22_36_TT_BNAME_TCODE_ACCESS(B22A_USR02_BNAME, B22A_ZF_AGR_UST12_VON)
--Step 24: Create SOD table based on DELOITE RULE book
	-- Delete TCODE that are not in SOD matrix, to improve the performance
	DELETE B22_36_TT_BNAME_TCODE_ACCESS
	WHERE 
	NOT EXISTS(SELECT * FROM AM_TCODE_MATRIX_FULL WHERE B22A_ZF_AGR_UST12_VON = TCODE_1
														OR B22A_ZF_AGR_UST12_VON = TCODE_2
														OR B22A_ZF_AGR_UST12_VON = TCODE_3
														OR B22A_ZF_AGR_UST12_VON = TCODE_4)


--Step 25: output the current active TCODE for SOD list
	EXEC SP_DROPTABLE 'B22B_37_IT_USER_ACTIVE_TCODE_SOD'
	SELECT DISTINCT * 
	INTO B22B_37_IT_USER_ACTIVE_TCODE_SOD
	FROM B22_36_TT_BNAME_TCODE_ACCESS
	EXEC SP_RENAME_FIELD 'B22B_', 'B22B_37_IT_USER_ACTIVE_TCODE_SOD'

	--Create active username with role list
	EXEC SP_DROPTABLE 'B22_38_TT_BNAME_ACTIVE_LIST'
	SELECT DISTINCT B22A_USR02_BNAME, B22A_AGR_USERS_AGR_NAME
	INTO B22_38_TT_BNAME_ACTIVE_LIST
	FROM B22_36_TT_BNAME_TCODE_ACCESS

--Step 26: Create SOD matrix table
	EXEC SP_DROPTABLE 'B22C_40_IT_SOD_MATRIX'
	SELECT DISTINCT BTBAL.USR02_BNAME,
	AM_TCODE_MATRIX_FULL.*,
	AT1.TSTCT_TTEXT TSTCT_TTEXT_TCODE1,
	AT2.TSTCT_TTEXT TSTCT_TTEXT_TCODE2,
	AT3.TSTCT_TTEXT TSTCT_TTEXT_TCODE3,
	AT4.TSTCT_TTEXT TSTCT_TTEXT_TCODE4,
	B1.B22A_AGR_USERS_AGR_NAME ROLE_1,
	B2.B22A_AGR_USERS_AGR_NAME ROLE_2,
	B3.B22A_AGR_USERS_AGR_NAME ROLE_3,
	B4.B22A_AGR_USERS_AGR_NAME ROLE_4
	INTO B22C_40_IT_SOD_MATRIX
	FROM B22_00_TT_USR02_BNAME_ACTIVE BTBAL	
	INNER JOIN AM_TCODE_MATRIX_FULL 
	ON (EXISTS(SELECT * FROM B22_36_TT_BNAME_TCODE_ACCESS BTBVAL 
				WHERE BTBVAL.B22A_USR02_BNAME = BTBAL.USR02_BNAME AND TCODE_1 = BTBVAL.B22A_ZF_AGR_UST12_VON))
	AND (EXISTS(SELECT * FROM B22_36_TT_BNAME_TCODE_ACCESS BTBVAL 
				WHERE BTBVAL.B22A_USR02_BNAME = BTBAL.USR02_BNAME AND TCODE_2 = BTBVAL.B22A_ZF_AGR_UST12_VON))
	AND (TCODE_3 = '' OR EXISTS(SELECT * FROM B22_36_TT_BNAME_TCODE_ACCESS BTBVAL 
				WHERE BTBVAL.B22A_USR02_BNAME = BTBAL.USR02_BNAME AND TCODE_3 = BTBVAL.B22A_ZF_AGR_UST12_VON))
	AND (TCODE_4 = '' OR EXISTS(SELECT * FROM B22_36_TT_BNAME_TCODE_ACCESS BTBVAL 
					WHERE BTBVAL.B22A_USR02_BNAME = BTBAL.USR02_BNAME AND TCODE_4 = BTBVAL.B22A_ZF_AGR_UST12_VON))
	LEFT JOIN A_TSTCT AT1 ON AT1.TSTCT_SPRSL = 'EN' AND AT1.TSTCT_TCODE = TCODE_1
	LEFT JOIN A_TSTCT AT2 ON AT2.TSTCT_SPRSL = 'EN' AND AT2.TSTCT_TCODE = TCODE_2
	LEFT JOIN A_TSTCT AT3 ON AT3.TSTCT_SPRSL = 'EN' AND AT3.TSTCT_TCODE = TCODE_3
	LEFT JOIN A_TSTCT AT4 ON AT4.TSTCT_SPRSL = 'EN' AND AT4.TSTCT_TCODE = TCODE_4
	LEFT JOIN B22_36_TT_BNAME_TCODE_ACCESS B1 ON
			BTBAL.USR02_BNAME = B1.B22A_USR02_BNAME AND B1.B22A_ZF_AGR_UST12_VON = TCODE_1
	LEFT JOIN B22_36_TT_BNAME_TCODE_ACCESS B2 ON
			BTBAL.USR02_BNAME = B2.B22A_USR02_BNAME AND B2.B22A_ZF_AGR_UST12_VON = TCODE_2
	LEFT JOIN B22_36_TT_BNAME_TCODE_ACCESS B3 ON
			BTBAL.USR02_BNAME = B3.B22A_USR02_BNAME AND B3.B22A_ZF_AGR_UST12_VON = TCODE_3
	LEFT JOIN B22_36_TT_BNAME_TCODE_ACCESS B4 ON
			BTBAL.USR02_BNAME = B4.B22A_USR02_BNAME AND B4.B22A_ZF_AGR_UST12_VON = TCODE_4
-- Drop temporary tables
--EXEC SP_REMOVE_TABLES 'B22[_]%[_]TT%'

EXEC SP_RENAME_FIELD 'B22C_', 'B22C_40_IT_SOD_MATRIX'

---- Create table for exporting into ACL Project 
EXEC SP_REMOVE_TABLES 'A_B22_35A_JAP_US_RL_TCD_REG'
SELECT 
	'JP' AS B22A_REGION,
	B22A_USR02_BNAME AS B22A_USR02_BNAME,
	'' AS B22A_UST10S_AUTH,
	'S_TCODE' AS B22A_UST10S_OBJCT,
	B22A_AGR_USERS_AGR_NAME AS B22A_AGR_USERS_AGR_NAME,
	'TCD' AS B22A_UST12_FIELD,
	B22A_ZF_AGR_UST12_VON AS B22A_UST12_VON,
	'' AS B22A_UST12_BIS,
B22A_TSTCT_TTEXT AS B22A_TSTCT_TTEXT
INTO A_B22_35A_JAP_US_RL_TCD_REG
FROM B22A_34_IT_BNAME_TCODE_ACCESS


--Export the mapping process for TSTCA and USOBT for review purpose
EXEC SP_DROPTABLE 'B22D_41_IT_BNAME_AUTH_FULL_MAPPING_TSTCA_USOBT_VALID'
SELECT DISTINCT A.*, 'USOBT'  AS SOURCE_TABLE
INTO B22D_41_IT_BNAME_AUTH_FULL_MAPPING_TSTCA_USOBT_VALID
FROM B22_27_TT_BNAME_AUTH_FULL_MAPPING_USOBT A
WHERE NOT EXISTS(SELECT * FROM B22_27_TT_BNAME_AUTH_FULL_MAPPING_USOBT B WHERE B.USR02_BNAME = A.USR02_BNAME
															AND B.USOBT_NAME = A.USOBT_NAME
															AND B.ZF_AGR_UST12_AUTH = A.ZF_AGR_UST12_AUTH
															AND B.ZF_AGR_UST12_OBJCT = A.ZF_AGR_UST12_OBJCT
															AND B.ZF_AGR_UST12_FIELD IS NULL)
UNION ALL
SELECT A.USR02_BNAME, A.TSTCA_TCODE, A.ZF_AGR_UST12_AUTH, A.ZF_AGR_UST12_OBJCT, A.ZF_AGR_UST12_FIELD, A.ZF_AGR_UST12_VON, A.ZF_AGR_UST12_BIS, A.TSTCA_VALUE, 'TSTCA'  AS SOURCE_TABLE
FROM B22_16_TT_BNAME_TCODE_AUTH_FULL_MAPPING A
		---Exclude the auth ID with unmatched results, keep the users' BNAME, TCODE, AUTH & OBJCT combination that has the matched results only.
		WHERE NOT EXISTS(SELECT * FROM B22_16_TT_BNAME_TCODE_AUTH_FULL_MAPPING B WHERE B.USR02_BNAME = A.USR02_BNAME
																	AND B.TSTCA_TCODE = A.TSTCA_TCODE
																	AND B.ZF_AGR_UST12_AUTH = A.ZF_AGR_UST12_AUTH
																	AND B.ZF_AGR_UST12_OBJCT = A.ZF_AGR_UST12_OBJCT
																	AND B.ZF_AGR_UST12_FIELD IS NULL) -- eliminate those USER, AUTH, OBJ combinations from 12b for which a
																	                                  -- at least one line was missing from TSTCA

EXEC SP_RENAME_FIELD 'B22D_', 'B22D_41_IT_BNAME_AUTH_FULL_MAPPING_TSTCA_USOBT_VALID'


--EXEC SP_DROPTABLE 'B22_42_IT_BNAME_TCODE_AUTH_FULL_MAPPING_VALID'
--		SELECT DISTINCT A.*
--		INTO B22_42_IT_BNAME_TCODE_AUTH_FULL_MAPPING_VALID
--		FROM B22_16_TT_BNAME_TCODE_AUTH_FULL_MAPPING A
--		---Exclude the auth ID with unmatched results, keep the users' BNAME, TCODE, AUTH & OBJCT combination that has the matched results only.
--		WHERE NOT EXISTS(SELECT * FROM B22_16_TT_BNAME_TCODE_AUTH_FULL_MAPPING B WHERE B.USR02_BNAME = A.USR02_BNAME
--																	AND B.TSTCA_TCODE = A.TSTCA_TCODE
--																	AND B.ZF_AGR_UST12_AUTH = A.ZF_AGR_UST12_AUTH
--																	AND B.ZF_AGR_UST12_OBJCT = A.ZF_AGR_UST12_OBJCT
--																	AND B.ZF_AGR_UST12_FIELD IS NULL) -- eliminate those USER, AUTH, OBJ combinations from 12b for which a
--																	                                  -- at least one line was missing from TSTCA

--EXEC SP_RENAME_FIELD 'B22E_', 'B22_42_IT_BNAME_TCODE_AUTH_FULL_MAPPING_VALID'






 ----------------------------------------------------------PART5--------------------------------------------------------------------------------
 --create SOD with extra requirement for TSTCA_VALUE & USOBT_LOW, USOBT_HIGH conflict
 -- Step 27: Combine the value condition of two check tables TSTCA & USOBT into one table
 EXEC SP_DROPTABLE 'B22_43_TT_USOBT_TSTCA_TCODE_VAR_COND'
 SELECT DISTINCT USOBT_NAME,
					USOBT_TYPE,
					USOBT_OBJECT,
					USOBT_FIELD,
					USOBT_LOW,
					USOBT_HIGH,
					USOBT_MODIFIER,
					USOBT_MODDATE,
					USOBT_MODTIME,
					USOBT_MODIFIED,
 'USOBT' AS SOURCE_TABLE INTO B22_43_TT_USOBT_TSTCA_TCODE_VAR_COND FROM A_USOBT_C
 WHERE USOBT_FIELD = 'BUKRS' AND USOBT_LOW <> '' --limiting to FIELD = BUKRS as required
 UNION
 SELECT DISTINCT TSTCA_TCODE, '', TSTCA_OBJCT, TSTCA_FIELD, TSTCA_VALUE, '', '', '', '', '', 'TSTCA' AS SOURCE_TABLE FROM A_TSTCA
 WHERE TSTCA_FIELD LIKE 'BUKRS' AND TSTCA_VALUE <> '' --limiting to FIELD = BUKRS as required
 SELECT TOP 1 * FROM B22_43_TT_USOBT_TSTCA_TCODE_VAR_COND
 CREATE CLUSTERED INDEX IDX ON B22_43_TT_USOBT_TSTCA_TCODE_VAR_COND(USOBT_NAME, USOBT_LOW)


 -- Step 28: From the original SOD matrix table, list all the possible conflicts that are with values (BUKRS), by joining with the above table
 EXEC SP_DROPTABLE 'B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT'
 SELECT DISTINCT
 B22C_USR02_BNAME, 
 B22C_TCODE_1, 
 B22C_TCODE_2,
 B22C_TCODE_3,
 B22C_TCODE_4,
 B1.USOBT_OBJECT USOBT_OBJECT_1,
 B1.USOBT_FIELD USOBT_FIELD_1,
 B1.USOBT_LOW USOBT_LOW_1,
 B2.USOBT_OBJECT USOBT_OBJECT_2,
 B2.USOBT_FIELD USOBT_FIELD_2,
 B2.USOBT_LOW USOBT_LOW_2,
 B3.USOBT_OBJECT USOBT_OBJECT_3,
 B3.USOBT_FIELD USOBT_FIELD_3,
 B3.USOBT_LOW USOBT_LOW_3,
 B4.USOBT_OBJECT USOBT_OBJECT_4,
 B4.USOBT_FIELD USOBT_FIELD_4,
 B4.USOBT_LOW USOBT_LOW_4
 INTO B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT
 FROM B22C_40_IT_SOD_MATRIX A
 -- perform left join with above USOBT_TSTCA condition
 LEFT JOIN B22_43_TT_USOBT_TSTCA_TCODE_VAR_COND B1 ON A.B22C_TCODE_1 = B1.USOBT_NAME
 LEFT JOIN B22_43_TT_USOBT_TSTCA_TCODE_VAR_COND B2 ON A.B22C_TCODE_2 = B2.USOBT_NAME AND B1.USOBT_LOW = B2.USOBT_LOW
 LEFT JOIN B22_43_TT_USOBT_TSTCA_TCODE_VAR_COND B3 ON A.B22C_TCODE_3 = B3.USOBT_NAME AND (B3.USOBT_LOW = B2.USOBT_LOW OR B3.USOBT_LOW = B1.USOBT_LOW)
 LEFT JOIN B22_43_TT_USOBT_TSTCA_TCODE_VAR_COND B4 ON A.B22C_TCODE_4 = B4.USOBT_NAME AND (B4.USOBT_LOW = B2.USOBT_LOW OR B4.USOBT_LOW = B1.USOBT_LOW OR B4.USOBT_LOW = B3.USOBT_LOW)

 --condition for value conflict, at least 2 TCODE conflicts are not null

 WHERE ISNUMERIC(ISNULL(B1.USOBT_NAME + 'a', '1'))
 		+ ISNUMERIC(ISNULL(B2.USOBT_NAME + 'a', '1'))
 		+ ISNUMERIC(ISNULL(B3.USOBT_NAME + 'a', '1'))
 		+ ISNUMERIC(ISNULL(B4.USOBT_NAME + 'a', '1')) < 3


 -- Step 29a-b: Create a list of value conflicts per user's TCODEs
 -- Step 29a: get valid user ID, TCODE name, auth ID and object from both USOBT & TSTCA
 EXEC SP_DROPTABLE 'B22_45A_TT_TT_BNAME_TCODE_AUTH_OBJCT'
 SELECT DISTINCT USR02_BNAME, USOBT_NAME, ZF_AGR_UST12_AUTH, ZF_AGR_UST12_OBJCT
 INTO B22_45A_TT_TT_BNAME_TCODE_AUTH_OBJCT
 		FROM B22_27_TT_BNAME_AUTH_FULL_MAPPING_USOBT A
 		WHERE NOT EXISTS(SELECT * FROM B22_27_TT_BNAME_AUTH_FULL_MAPPING_USOBT B WHERE B.USR02_BNAME = A.USR02_BNAME
 																	AND B.USOBT_NAME = A.USOBT_NAME
 																	AND B.ZF_AGR_UST12_AUTH = A.ZF_AGR_UST12_AUTH
 																	AND B.ZF_AGR_UST12_OBJCT = A.ZF_AGR_UST12_OBJCT
 																	AND B.ZF_AGR_UST12_FIELD IS NULL)
 UNION
 SELECT DISTINCT USR02_BNAME, TSTCA_TCODE, ZF_AGR_UST12_AUTH, ZF_AGR_UST12_OBJCT
 		FROM B22_16_TT_BNAME_TCODE_AUTH_FULL_MAPPING A
 		---Exclude the auth ID with unmatched results, keep the users' BNAME, TCODE, AUTH & OBJCT combination that has the matched results only.
 		WHERE NOT EXISTS(SELECT * FROM B22_16_TT_BNAME_TCODE_AUTH_FULL_MAPPING B WHERE B.USR02_BNAME = A.USR02_BNAME
 																	AND B.TSTCA_TCODE = A.TSTCA_TCODE
 																	AND B.ZF_AGR_UST12_AUTH = A.ZF_AGR_UST12_AUTH
 																	AND B.ZF_AGR_UST12_OBJCT = A.ZF_AGR_UST12_OBJCT
 																	AND B.ZF_AGR_UST12_FIELD IS NULL)

 CREATE CLUSTERED INDEX IDX ON B22_45A_TT_TT_BNAME_TCODE_AUTH_OBJCT(USR02_BNAME, ZF_AGR_UST12_AUTH, ZF_AGR_UST12_OBJCT)

 -- Step 29b: filter the UST10S_AGR user authorization object table with field = 'BUKRS'
 -- Inner join with the valid user auth object per TCODE table above to reduce the number of record combination
 EXEC SP_DROPTABLE 'B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE'
 SELECT DISTINCT A.USR02_BNAME, A.ZF_AGR_UST12_AUTH, A.ZF_AGR_UST12_OBJCT, A.ZF_AGR_UST12_FIELD, A.ZF_AGR_UST12_VON, A.ZF_AGR_UST12_BIS, A.ZF_AGR_UST12_VON_NWC, A.ZF_AGR_UST12_BIS_NWC, B.USOBT_NAME, B.SOURCE_TABLE
 INTO B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE
 FROM B22_23_TT_UST10S_AGR_AUTH_OBJCT_AUTH_FIELD_VALUE A
 	INNER JOIN B22_43_TT_USOBT_TSTCA_TCODE_VAR_COND B ON A.ZF_AGR_UST12_OBJCT = B.USOBT_OBJECT
 WHERE A.ZF_AGR_UST12_FIELD = 'BUKRS'

 CREATE CLUSTERED INDEX IDX ON B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE(USR02_BNAME, USOBT_NAME, ZF_AGR_UST12_OBJCT, ZF_AGR_UST12_FIELD, SOURCE_TABLE)


 -- Step 30: Compare users' actual assigned value by joining the SOD value conflicts with the new mapping table. There are 6 scenarios
 -- TCODE 1 conflicts with TCODE 2
 -- TCODE 1 conflicts with TCODE 3
 -- TCODE 1 conflicts with TCODE 4
 -- TCODE 2 conflicts with TCODE 3
 -- TCODE 2 conflicts with TCODE 4
 -- TCODE 3 conflicts with TCODE 4

 	EXEC SP_DROPTABLE 'B22D_45_IT_BNAME_AUTH_FULL_MAPPING_USOBT_TSTCA_VALID'
 	SELECT * 
 	INTO B22D_45_IT_BNAME_AUTH_FULL_MAPPING_USOBT_TSTCA_VALID
 	FROM B22D_41_IT_BNAME_AUTH_FULL_MAPPING_TSTCA_USOBT_VALID
 	UNION
 	--1st case: TCODE 1 <> TCODE 2 by value
 	SELECT DISTINCT A.B22C_USR02_BNAME, A.B22C_TCODE_1, B1.ZF_AGR_UST12_AUTH, B1.ZF_AGR_UST12_OBJCT, B1.ZF_AGR_UST12_FIELD, B1.ZF_AGR_UST12_VON, B1.ZF_AGR_UST12_BIS, A.USOBT_LOW_1, B1.SOURCE_TABLE
 	FROM B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT A
 	LEFT JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B1 ON A.B22C_USR02_BNAME = B1.USR02_BNAME
 																	AND A.B22C_TCODE_1 = B1.USOBT_NAME
 																	AND A.USOBT_OBJECT_1 = B1.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_1 = B1.ZF_AGR_UST12_FIELD
 	INNER JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B2 ON A.B22C_USR02_BNAME = B2.USR02_BNAME
 																	AND A.B22C_TCODE_2 = B2.USOBT_NAME
 																	AND A.USOBT_OBJECT_2 = B2.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_2 = B2.ZF_AGR_UST12_FIELD
 																	AND B1.SOURCE_TABLE = B2.SOURCE_TABLE
 																	AND (-- pass if LOW field equal to VON (direct match)
 																			B1.ZF_AGR_UST12_VON = B2.ZF_AGR_UST12_VON
 																		-- pass if LOW field from USOBT like user VON value pattern (F* or *F will be resolved here)
 																		OR (B2.ZF_AGR_UST12_BIS = '' AND B2.ZF_AGR_UST12_VON LIKE B1.ZF_AGR_UST12_VON)
 																		-- pass if user VON field like LOW field from USOBT pattern
 																		OR (B1.ZF_AGR_UST12_BIS = '' AND B1.ZF_AGR_UST12_VON LIKE B2.ZF_AGR_UST12_VON)
 																		-- pass if B2.ZF_AGR_UST12_VON between VON and Bis value (user range covers USOBT LOW value)
 																		OR (B1.ZF_AGR_UST12_BIS <> '' AND B2.ZF_AGR_UST12_VON_NWC BETWEEN B1.ZF_AGR_UST12_VON_NWC AND B1.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if user VON value is between USOBT LOW & HIGH value
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC BETWEEN B2.ZF_AGR_UST12_VON_NWC AND B2.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if both user & USOBT table have BIS & HIGH value and their range lie accross each other
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC <= B2.ZF_AGR_UST12_BIS_NWC AND B1.ZF_AGR_UST12_BIS_NWC >= B2.ZF_AGR_UST12_VON_NWC))

 	UNION

 	SELECT DISTINCT A.B22C_USR02_BNAME, A.B22C_TCODE_2, B2.ZF_AGR_UST12_AUTH, B2.ZF_AGR_UST12_OBJCT, B2.ZF_AGR_UST12_FIELD, B2.ZF_AGR_UST12_VON, B2.ZF_AGR_UST12_BIS, A.USOBT_LOW_2, B1.SOURCE_TABLE
 	FROM B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT A
 	LEFT JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B1 ON A.B22C_USR02_BNAME = B1.USR02_BNAME
 																	AND A.B22C_TCODE_1 = B1.USOBT_NAME 
 																	AND A.USOBT_OBJECT_1 = B1.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_1 = B1.ZF_AGR_UST12_FIELD
 	INNER JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B2 ON A.B22C_USR02_BNAME = B2.USR02_BNAME
 																	AND A.B22C_TCODE_2 = B2.USOBT_NAME
 																	AND A.USOBT_OBJECT_2 = B2.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_2 = B2.ZF_AGR_UST12_FIELD
 																	AND B1.SOURCE_TABLE = B2.SOURCE_TABLE
 																	AND (-- pass if LOW field equal to VON (direct match)
 																			B1.ZF_AGR_UST12_VON = B2.ZF_AGR_UST12_VON
 																		-- pass if LOW field from USOBT like user VON value pattern (F* or *F will be resolved here)
 																		OR (B2.ZF_AGR_UST12_BIS = '' AND B2.ZF_AGR_UST12_VON LIKE B1.ZF_AGR_UST12_VON)
 																		-- pass if user VON field like LOW field from USOBT pattern
 																		OR (B1.ZF_AGR_UST12_BIS = '' AND B1.ZF_AGR_UST12_VON LIKE B2.ZF_AGR_UST12_VON)
 																		-- pass if B2.ZF_AGR_UST12_VON between VON and Bis value (user range covers USOBT LOW value)
 																		OR (B1.ZF_AGR_UST12_BIS <> '' AND B2.ZF_AGR_UST12_VON_NWC BETWEEN B1.ZF_AGR_UST12_VON_NWC AND B1.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if user VON value is between USOBT LOW & HIGH value
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC BETWEEN B2.ZF_AGR_UST12_VON_NWC AND B2.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if both user & USOBT table have BIS & HIGH value and their range lie accross each other
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC <= B2.ZF_AGR_UST12_BIS_NWC AND B1.ZF_AGR_UST12_BIS_NWC >= B2.ZF_AGR_UST12_VON_NWC))

 	UNION

 	--2nd case: TCODE 1 <> TCODE 3 by value
 	SELECT DISTINCT A.B22C_USR02_BNAME, A.B22C_TCODE_1, B1.ZF_AGR_UST12_AUTH, B1.ZF_AGR_UST12_OBJCT, B1.ZF_AGR_UST12_FIELD, B1.ZF_AGR_UST12_VON, B1.ZF_AGR_UST12_BIS, A.USOBT_LOW_1, B1.SOURCE_TABLE
 	FROM B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT A
 	LEFT JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B1 ON A.B22C_USR02_BNAME = B1.USR02_BNAME
 																	AND A.B22C_TCODE_1 = B1.USOBT_NAME
 																	AND A.USOBT_OBJECT_1 = B1.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_1 = B1.ZF_AGR_UST12_FIELD
 	INNER JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B2 ON A.B22C_USR02_BNAME = B2.USR02_BNAME
 																	AND A.B22C_TCODE_3 = B2.USOBT_NAME
 																	AND A.USOBT_OBJECT_3 = B2.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_3 = B2.ZF_AGR_UST12_FIELD
 																	AND B1.SOURCE_TABLE = B2.SOURCE_TABLE
 																	AND (-- pass if LOW field equal to VON (direct match)
 																			B1.ZF_AGR_UST12_VON = B2.ZF_AGR_UST12_VON
 																		-- pass if LOW field from USOBT like user VON value pattern (F* or *F will be resolved here)
 																		OR (B2.ZF_AGR_UST12_BIS = '' AND B2.ZF_AGR_UST12_VON LIKE B1.ZF_AGR_UST12_VON)
 																		-- pass if user VON field like LOW field from USOBT pattern
 																		OR (B1.ZF_AGR_UST12_BIS = '' AND B1.ZF_AGR_UST12_VON LIKE B2.ZF_AGR_UST12_VON)
 																		-- pass if B2.ZF_AGR_UST12_VON between VON and Bis value (user range covers USOBT LOW value)
 																		OR (B1.ZF_AGR_UST12_BIS <> '' AND B2.ZF_AGR_UST12_VON_NWC BETWEEN B1.ZF_AGR_UST12_VON_NWC AND B1.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if user VON value is between USOBT LOW & HIGH value
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC BETWEEN B2.ZF_AGR_UST12_VON_NWC AND B2.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if both user & USOBT table have BIS & HIGH value and their range lie accross each other
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC <= B2.ZF_AGR_UST12_BIS_NWC AND B1.ZF_AGR_UST12_BIS_NWC >= B2.ZF_AGR_UST12_VON_NWC))

 	UNION

 	SELECT DISTINCT A.B22C_USR02_BNAME, A.B22C_TCODE_3, B2.ZF_AGR_UST12_AUTH, B2.ZF_AGR_UST12_OBJCT, B2.ZF_AGR_UST12_FIELD, B2.ZF_AGR_UST12_VON, B2.ZF_AGR_UST12_BIS, A.USOBT_LOW_2, B1.SOURCE_TABLE
 	FROM B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT A
 	LEFT JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B1 ON A.B22C_USR02_BNAME = B1.USR02_BNAME
 																	AND A.B22C_TCODE_1 = B1.USOBT_NAME
 																	AND A.USOBT_OBJECT_1 = B1.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_1 = B1.ZF_AGR_UST12_FIELD
 	INNER JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B2 ON A.B22C_USR02_BNAME = B2.USR02_BNAME
 																	AND A.B22C_TCODE_3 = B2.USOBT_NAME
 																	AND A.USOBT_OBJECT_3 = B2.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_3 = B2.ZF_AGR_UST12_FIELD
 																	AND B1.SOURCE_TABLE = B2.SOURCE_TABLE
 																	AND (-- pass if LOW field equal to VON (direct match)
 																			B1.ZF_AGR_UST12_VON = B2.ZF_AGR_UST12_VON
 																		-- pass if LOW field from USOBT like user VON value pattern (F* or *F will be resolved here)
 																		OR (B2.ZF_AGR_UST12_BIS = '' AND B2.ZF_AGR_UST12_VON LIKE B1.ZF_AGR_UST12_VON)
 																		-- pass if user VON field like LOW field from USOBT pattern
 																		OR (B1.ZF_AGR_UST12_BIS = '' AND B1.ZF_AGR_UST12_VON LIKE B2.ZF_AGR_UST12_VON)
 																		-- pass if B2.ZF_AGR_UST12_VON between VON and Bis value (user range covers USOBT LOW value)
 																		OR (B1.ZF_AGR_UST12_BIS <> '' AND B2.ZF_AGR_UST12_VON_NWC BETWEEN B1.ZF_AGR_UST12_VON_NWC AND B1.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if user VON value is between USOBT LOW & HIGH value
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC BETWEEN B2.ZF_AGR_UST12_VON_NWC AND B2.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if both user & USOBT table have BIS & HIGH value and their range lie accross each other
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC <= B2.ZF_AGR_UST12_BIS_NWC AND B1.ZF_AGR_UST12_BIS_NWC >= B2.ZF_AGR_UST12_VON_NWC))

 	UNION
 	--3 case: TCODE 1 <> TCODE 4 by value
 	SELECT DISTINCT A.B22C_USR02_BNAME, A.B22C_TCODE_1, B1.ZF_AGR_UST12_AUTH, B1.ZF_AGR_UST12_OBJCT, B1.ZF_AGR_UST12_FIELD, B1.ZF_AGR_UST12_VON, B1.ZF_AGR_UST12_BIS, A.USOBT_LOW_1, B1.SOURCE_TABLE
 	FROM B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT A
 	LEFT JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B1 ON A.B22C_USR02_BNAME = B1.USR02_BNAME
 																	AND A.B22C_TCODE_1 = B1.USOBT_NAME
 																	AND A.USOBT_OBJECT_1 = B1.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_1 = B1.ZF_AGR_UST12_FIELD
 	INNER JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B2 ON A.B22C_USR02_BNAME = B2.USR02_BNAME
 																	AND A.B22C_TCODE_4 = B2.USOBT_NAME
 																	AND A.USOBT_OBJECT_4 = B2.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_4 = B2.ZF_AGR_UST12_FIELD
 																	AND B1.SOURCE_TABLE = B2.SOURCE_TABLE
 																	AND (-- pass if LOW field equal to VON (direct match)
 																			B1.ZF_AGR_UST12_VON = B2.ZF_AGR_UST12_VON
 																		-- pass if LOW field from USOBT like user VON value pattern (F* or *F will be resolved here)
 																		OR (B2.ZF_AGR_UST12_BIS = '' AND B2.ZF_AGR_UST12_VON LIKE B1.ZF_AGR_UST12_VON)
 																		-- pass if user VON field like LOW field from USOBT pattern
 																		OR (B1.ZF_AGR_UST12_BIS = '' AND B1.ZF_AGR_UST12_VON LIKE B2.ZF_AGR_UST12_VON)
 																		-- pass if B2.ZF_AGR_UST12_VON between VON and Bis value (user range covers USOBT LOW value)
 																		OR (B1.ZF_AGR_UST12_BIS <> '' AND B2.ZF_AGR_UST12_VON_NWC BETWEEN B1.ZF_AGR_UST12_VON_NWC AND B1.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if user VON value is between USOBT LOW & HIGH value
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC BETWEEN B2.ZF_AGR_UST12_VON_NWC AND B2.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if both user & USOBT table have BIS & HIGH value and their range lie accross each other
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC <= B2.ZF_AGR_UST12_BIS_NWC AND B1.ZF_AGR_UST12_BIS_NWC >= B2.ZF_AGR_UST12_VON_NWC))

 	UNION

 	SELECT DISTINCT A.B22C_USR02_BNAME, A.B22C_TCODE_4, B2.ZF_AGR_UST12_AUTH, B2.ZF_AGR_UST12_OBJCT, B2.ZF_AGR_UST12_FIELD, B2.ZF_AGR_UST12_VON, B2.ZF_AGR_UST12_BIS, A.USOBT_LOW_2, B1.SOURCE_TABLE
 	FROM B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT A
 	LEFT JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B1 ON A.B22C_USR02_BNAME = B1.USR02_BNAME
 																	AND A.B22C_TCODE_1 = B1.USOBT_NAME
 																	AND A.USOBT_OBJECT_1 = B1.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_1 = B1.ZF_AGR_UST12_FIELD
 	INNER JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B2 ON A.B22C_USR02_BNAME = B2.USR02_BNAME
 																	AND A.B22C_TCODE_4 = B2.USOBT_NAME
 																	AND A.USOBT_OBJECT_4 = B2.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_4 = B2.ZF_AGR_UST12_FIELD
 																	AND B1.SOURCE_TABLE = B2.SOURCE_TABLE
 																	AND (-- pass if LOW field equal to VON (direct match)
 																			B1.ZF_AGR_UST12_VON = B2.ZF_AGR_UST12_VON
 																		-- pass if LOW field from USOBT like user VON value pattern (F* or *F will be resolved here)
 																		OR (B2.ZF_AGR_UST12_BIS = '' AND B2.ZF_AGR_UST12_VON LIKE B1.ZF_AGR_UST12_VON)
 																		-- pass if user VON field like LOW field from USOBT pattern
 																		OR (B1.ZF_AGR_UST12_BIS = '' AND B1.ZF_AGR_UST12_VON LIKE B2.ZF_AGR_UST12_VON)
 																		-- pass if B2.ZF_AGR_UST12_VON between VON and Bis value (user range covers USOBT LOW value)
 																		OR (B1.ZF_AGR_UST12_BIS <> '' AND B2.ZF_AGR_UST12_VON_NWC BETWEEN B1.ZF_AGR_UST12_VON_NWC AND B1.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if user VON value is between USOBT LOW & HIGH value
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC BETWEEN B2.ZF_AGR_UST12_VON_NWC AND B2.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if both user & USOBT table have BIS & HIGH value and their range lie accross each other
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC <= B2.ZF_AGR_UST12_BIS_NWC AND B1.ZF_AGR_UST12_BIS_NWC >= B2.ZF_AGR_UST12_VON_NWC))
 	UNION
 	--4 case: TCODE 2 <> TCODE 3 by value
 	SELECT DISTINCT A.B22C_USR02_BNAME, A.B22C_TCODE_2, B1.ZF_AGR_UST12_AUTH, B1.ZF_AGR_UST12_OBJCT, B1.ZF_AGR_UST12_FIELD, B1.ZF_AGR_UST12_VON, B1.ZF_AGR_UST12_BIS, A.USOBT_LOW_1, B1.SOURCE_TABLE
 	FROM B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT A
 	LEFT JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B1 ON A.B22C_USR02_BNAME = B1.USR02_BNAME
 																	AND A.B22C_TCODE_2 = B1.USOBT_NAME
 																	AND A.USOBT_OBJECT_2 = B1.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_2 = B1.ZF_AGR_UST12_FIELD
 	INNER JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B2 ON A.B22C_USR02_BNAME = B2.USR02_BNAME
 																	AND A.B22C_TCODE_3 = B2.USOBT_NAME
 																	AND A.USOBT_OBJECT_3 = B2.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_3 = B2.ZF_AGR_UST12_FIELD
 																	AND B1.SOURCE_TABLE = B2.SOURCE_TABLE
 																	AND (-- pass if LOW field equal to VON (direct match)
 																			B1.ZF_AGR_UST12_VON = B2.ZF_AGR_UST12_VON
 																		-- pass if LOW field from USOBT like user VON value pattern (F* or *F will be resolved here)
 																		OR (B2.ZF_AGR_UST12_BIS = '' AND B2.ZF_AGR_UST12_VON LIKE B1.ZF_AGR_UST12_VON)
 																		-- pass if user VON field like LOW field from USOBT pattern
 																		OR (B1.ZF_AGR_UST12_BIS = '' AND B1.ZF_AGR_UST12_VON LIKE B2.ZF_AGR_UST12_VON)
 																		-- pass if B2.ZF_AGR_UST12_VON between VON and Bis value (user range covers USOBT LOW value)
 																		OR (B1.ZF_AGR_UST12_BIS <> '' AND B2.ZF_AGR_UST12_VON_NWC BETWEEN B1.ZF_AGR_UST12_VON_NWC AND B1.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if user VON value is between USOBT LOW & HIGH value
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC BETWEEN B2.ZF_AGR_UST12_VON_NWC AND B2.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if both user & USOBT table have BIS & HIGH value and their range lie accross each other
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC <= B2.ZF_AGR_UST12_BIS_NWC AND B1.ZF_AGR_UST12_BIS_NWC >= B2.ZF_AGR_UST12_VON_NWC))

 	UNION

 	SELECT DISTINCT A.B22C_USR02_BNAME, A.B22C_TCODE_3, B2.ZF_AGR_UST12_AUTH, B2.ZF_AGR_UST12_OBJCT, B2.ZF_AGR_UST12_FIELD, B2.ZF_AGR_UST12_VON, B2.ZF_AGR_UST12_BIS, A.USOBT_LOW_2, B1.SOURCE_TABLE
 	FROM B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT A
 	LEFT JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B1 ON A.B22C_USR02_BNAME = B1.USR02_BNAME
 																	AND A.B22C_TCODE_2 = B1.USOBT_NAME
 																	AND A.USOBT_OBJECT_2 = B1.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_2 = B1.ZF_AGR_UST12_FIELD
 	INNER JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B2 ON A.B22C_USR02_BNAME = B2.USR02_BNAME
 																	AND A.B22C_TCODE_3 = B2.USOBT_NAME
 																	AND A.USOBT_OBJECT_3 = B2.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_3 = B2.ZF_AGR_UST12_FIELD
 																	AND B1.SOURCE_TABLE = B2.SOURCE_TABLE
 																	AND (-- pass if LOW field equal to VON (direct match)
 																			B1.ZF_AGR_UST12_VON = B2.ZF_AGR_UST12_VON
 																		-- pass if LOW field from USOBT like user VON value pattern (F* or *F will be resolved here)
 																		OR (B2.ZF_AGR_UST12_BIS = '' AND B2.ZF_AGR_UST12_VON LIKE B1.ZF_AGR_UST12_VON)
 																		-- pass if user VON field like LOW field from USOBT pattern
 																		OR (B1.ZF_AGR_UST12_BIS = '' AND B1.ZF_AGR_UST12_VON LIKE B2.ZF_AGR_UST12_VON)
 																		-- pass if B2.ZF_AGR_UST12_VON between VON and Bis value (user range covers USOBT LOW value)
 																		OR (B1.ZF_AGR_UST12_BIS <> '' AND B2.ZF_AGR_UST12_VON_NWC BETWEEN B1.ZF_AGR_UST12_VON_NWC AND B1.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if user VON value is between USOBT LOW & HIGH value
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC BETWEEN B2.ZF_AGR_UST12_VON_NWC AND B2.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if both user & USOBT table have BIS & HIGH value and their range lie accross each other
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC <= B2.ZF_AGR_UST12_BIS_NWC AND B1.ZF_AGR_UST12_BIS_NWC >= B2.ZF_AGR_UST12_VON_NWC))
 	UNION
 	--5 case: TCODE 2 <> TCODE 4 by value
 	SELECT DISTINCT A.B22C_USR02_BNAME, A.B22C_TCODE_2, B1.ZF_AGR_UST12_AUTH, B1.ZF_AGR_UST12_OBJCT, B1.ZF_AGR_UST12_FIELD, B1.ZF_AGR_UST12_VON, B1.ZF_AGR_UST12_BIS, A.USOBT_LOW_1, B1.SOURCE_TABLE
 	FROM B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT A
 	LEFT JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B1 ON A.B22C_USR02_BNAME = B1.USR02_BNAME
 																	AND A.B22C_TCODE_2 = B1.USOBT_NAME
 																	AND A.USOBT_OBJECT_2 = B1.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_2 = B1.ZF_AGR_UST12_FIELD
 	INNER JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B2 ON A.B22C_USR02_BNAME = B2.USR02_BNAME
 																	AND A.B22C_TCODE_4 = B2.USOBT_NAME
 																	AND A.USOBT_OBJECT_4 = B2.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_4 = B2.ZF_AGR_UST12_FIELD
 																	AND B1.SOURCE_TABLE = B2.SOURCE_TABLE
 																	AND (-- pass if LOW field equal to VON (direct match)
 																			B1.ZF_AGR_UST12_VON = B2.ZF_AGR_UST12_VON
 																		-- pass if LOW field from USOBT like user VON value pattern (F* or *F will be resolved here)
 																		OR (B2.ZF_AGR_UST12_BIS = '' AND B2.ZF_AGR_UST12_VON LIKE B1.ZF_AGR_UST12_VON)
 																		-- pass if user VON field like LOW field from USOBT pattern
 																		OR (B1.ZF_AGR_UST12_BIS = '' AND B1.ZF_AGR_UST12_VON LIKE B2.ZF_AGR_UST12_VON)
 																		-- pass if B2.ZF_AGR_UST12_VON between VON and Bis value (user range covers USOBT LOW value)
 																		OR (B1.ZF_AGR_UST12_BIS <> '' AND B2.ZF_AGR_UST12_VON_NWC BETWEEN B1.ZF_AGR_UST12_VON_NWC AND B1.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if user VON value is between USOBT LOW & HIGH value
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC BETWEEN B2.ZF_AGR_UST12_VON_NWC AND B2.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if both user & USOBT table have BIS & HIGH value and their range lie accross each other
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC <= B2.ZF_AGR_UST12_BIS_NWC AND B1.ZF_AGR_UST12_BIS_NWC >= B2.ZF_AGR_UST12_VON_NWC))

 	UNION

 	SELECT DISTINCT A.B22C_USR02_BNAME, A.B22C_TCODE_4, B2.ZF_AGR_UST12_AUTH, B2.ZF_AGR_UST12_OBJCT, B2.ZF_AGR_UST12_FIELD, B2.ZF_AGR_UST12_VON, B2.ZF_AGR_UST12_BIS, A.USOBT_LOW_2, B1.SOURCE_TABLE
 	FROM B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT A
 	LEFT JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B1 ON A.B22C_USR02_BNAME = B1.USR02_BNAME
 																	AND A.B22C_TCODE_2 = B1.USOBT_NAME
 																	AND A.USOBT_OBJECT_2 = B1.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_2 = B1.ZF_AGR_UST12_FIELD
 	INNER JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B2 ON A.B22C_USR02_BNAME = B2.USR02_BNAME
 																	AND A.B22C_TCODE_4 = B2.USOBT_NAME
 																	AND A.USOBT_OBJECT_4 = B2.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_4 = B2.ZF_AGR_UST12_FIELD
 																	AND B1.SOURCE_TABLE = B2.SOURCE_TABLE
 																	AND (-- pass if LOW field equal to VON (direct match)
 																			B1.ZF_AGR_UST12_VON = B2.ZF_AGR_UST12_VON
 																		-- pass if LOW field from USOBT like user VON value pattern (F* or *F will be resolved here)
 																		OR (B2.ZF_AGR_UST12_BIS = '' AND B2.ZF_AGR_UST12_VON LIKE B1.ZF_AGR_UST12_VON)
 																		-- pass if user VON field like LOW field from USOBT pattern
 																		OR (B1.ZF_AGR_UST12_BIS = '' AND B1.ZF_AGR_UST12_VON LIKE B2.ZF_AGR_UST12_VON)
 																		-- pass if B2.ZF_AGR_UST12_VON between VON and Bis value (user range covers USOBT LOW value)
 																		OR (B1.ZF_AGR_UST12_BIS <> '' AND B2.ZF_AGR_UST12_VON_NWC BETWEEN B1.ZF_AGR_UST12_VON_NWC AND B1.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if user VON value is between USOBT LOW & HIGH value
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC BETWEEN B2.ZF_AGR_UST12_VON_NWC AND B2.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if both user & USOBT table have BIS & HIGH value and their range lie accross each other
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC <= B2.ZF_AGR_UST12_BIS_NWC AND B1.ZF_AGR_UST12_BIS_NWC >= B2.ZF_AGR_UST12_VON_NWC))
 	UNION

 	--6 case: TCODE 3 <> TCODE 4 by value
 	SELECT DISTINCT A.B22C_USR02_BNAME, A.B22C_TCODE_3, B1.ZF_AGR_UST12_AUTH, B1.ZF_AGR_UST12_OBJCT, B1.ZF_AGR_UST12_FIELD, B1.ZF_AGR_UST12_VON, B1.ZF_AGR_UST12_BIS, A.USOBT_LOW_1, B1.SOURCE_TABLE
 	FROM B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT A
 	LEFT JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B1 ON A.B22C_USR02_BNAME = B1.USR02_BNAME
 																	AND A.B22C_TCODE_3 = B1.USOBT_NAME
 																	AND A.USOBT_OBJECT_3 = B1.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_3 = B1.ZF_AGR_UST12_FIELD
 	INNER JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B2 ON A.B22C_USR02_BNAME = B2.USR02_BNAME
 																	AND A.B22C_TCODE_4 = B2.USOBT_NAME
 																	AND A.USOBT_OBJECT_4 = B2.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_4 = B2.ZF_AGR_UST12_FIELD
 																	AND B1.SOURCE_TABLE = B2.SOURCE_TABLE
 																	AND (-- pass if LOW field equal to VON (direct match)
 																			B1.ZF_AGR_UST12_VON = B2.ZF_AGR_UST12_VON
 																		-- pass if LOW field from USOBT like user VON value pattern (F* or *F will be resolved here)
 																		OR (B2.ZF_AGR_UST12_BIS = '' AND B2.ZF_AGR_UST12_VON LIKE B1.ZF_AGR_UST12_VON)
 																		-- pass if user VON field like LOW field from USOBT pattern
 																		OR (B1.ZF_AGR_UST12_BIS = '' AND B1.ZF_AGR_UST12_VON LIKE B2.ZF_AGR_UST12_VON)
 																		-- pass if B2.ZF_AGR_UST12_VON between VON and Bis value (user range covers USOBT LOW value)
 																		OR (B1.ZF_AGR_UST12_BIS <> '' AND B2.ZF_AGR_UST12_VON_NWC BETWEEN B1.ZF_AGR_UST12_VON_NWC AND B1.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if user VON value is between USOBT LOW & HIGH value
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC BETWEEN B2.ZF_AGR_UST12_VON_NWC AND B2.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if both user & USOBT table have BIS & HIGH value and their range lie accross each other
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC <= B2.ZF_AGR_UST12_BIS_NWC AND B1.ZF_AGR_UST12_BIS_NWC >= B2.ZF_AGR_UST12_VON_NWC))

 	UNION

 	SELECT DISTINCT A.B22C_USR02_BNAME, A.B22C_TCODE_4, B2.ZF_AGR_UST12_AUTH, B2.ZF_AGR_UST12_OBJCT, B2.ZF_AGR_UST12_FIELD, B2.ZF_AGR_UST12_VON, B2.ZF_AGR_UST12_BIS, A.USOBT_LOW_2, B1.SOURCE_TABLE
 	FROM B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT A
 	LEFT JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B1 ON A.B22C_USR02_BNAME = B1.USR02_BNAME
 																	AND A.B22C_TCODE_3 = B1.USOBT_NAME
 																	AND A.USOBT_OBJECT_3 = B1.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_3 = B1.ZF_AGR_UST12_FIELD
 	INNER JOIN B22_45B_TT_UST10S_AGR_USER_TCODE_AUTH_OBJCT_AUTH_FIELD_VALUE B2 ON A.B22C_USR02_BNAME = B2.USR02_BNAME
 																	AND A.B22C_TCODE_4 = B2.USOBT_NAME
 																	AND A.USOBT_OBJECT_4 = B2.ZF_AGR_UST12_OBJCT
 																	AND A.USOBT_FIELD_4 = B2.ZF_AGR_UST12_FIELD
 																	AND B1.SOURCE_TABLE = B2.SOURCE_TABLE
 																	AND (-- pass if LOW field equal to VON (direct match)
 																			B1.ZF_AGR_UST12_VON = B2.ZF_AGR_UST12_VON
 																		-- pass if LOW field from USOBT like user VON value pattern (F* or *F will be resolved here)
 																		OR (B2.ZF_AGR_UST12_BIS = '' AND B2.ZF_AGR_UST12_VON LIKE B1.ZF_AGR_UST12_VON)
 																		-- pass if user VON field like LOW field from USOBT pattern
 																		OR (B1.ZF_AGR_UST12_BIS = '' AND B1.ZF_AGR_UST12_VON LIKE B2.ZF_AGR_UST12_VON)
 																		-- pass if B2.ZF_AGR_UST12_VON between VON and Bis value (user range covers USOBT LOW value)
 																		OR (B1.ZF_AGR_UST12_BIS <> '' AND B2.ZF_AGR_UST12_VON_NWC BETWEEN B1.ZF_AGR_UST12_VON_NWC AND B1.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if user VON value is between USOBT LOW & HIGH value
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC BETWEEN B2.ZF_AGR_UST12_VON_NWC AND B2.ZF_AGR_UST12_BIS_NWC)
 																		-- pass if both user & USOBT table have BIS & HIGH value and their range lie accross each other
 																		OR (B2.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_BIS <> '' AND B1.ZF_AGR_UST12_VON_NWC <= B2.ZF_AGR_UST12_BIS_NWC AND B1.ZF_AGR_UST12_BIS_NWC >= B2.ZF_AGR_UST12_VON_NWC))


-- -- Step 31: gather value conflicts that relate to BUKRS for the summary table
 EXEC SP_DROPTABLE 'B22_46_IT_BNAME_TCODE_VALUE_CONFLICT'
 SELECT DISTINCT B22D_USR02_BNAME, B22D_USOBT_NAME, B22D_ZF_AGR_UST12_VON
 INTO B22_46_IT_BNAME_TCODE_VALUE_CONFLICT
 FROM B22D_45_IT_BNAME_AUTH_FULL_MAPPING_USOBT_TSTCA_VALID
 WHERE B22D_USOBT_LOW = '$BUKRS'


 ALTER TABLE B22_46_IT_BNAME_TCODE_VALUE_CONFLICT ALTER COLUMN B22D_USOBT_NAME NVARCHAR(50)
 CREATE CLUSTERED INDEX IDX ON B22_46_IT_BNAME_TCODE_VALUE_CONFLICT(B22D_USR02_BNAME, B22D_USOBT_NAME)

 -- Step 33: Create the summary table to improve the dashboard performance.
 EXEC SP_DROPTABLE 'B22C_47_IT_SOD_CONFLICT'
 SELECT A.*,
 IIF(EXISTS(SELECT * FROM B22_46_IT_BNAME_TCODE_VALUE_CONFLICT B
 				WHERE A.B22C_USR02_BNAME = B.B22D_USR02_BNAME AND A.B22C_TCODE_1 = B.B22D_USOBT_NAME)
 	AND (EXISTS(SELECT * FROM B22_46_IT_BNAME_TCODE_VALUE_CONFLICT B
 				WHERE A.B22C_USR02_BNAME = B.B22D_USR02_BNAME AND A.B22C_TCODE_2 = B.B22D_USOBT_NAME)
 		OR EXISTS(SELECT * FROM B22_46_IT_BNAME_TCODE_VALUE_CONFLICT B
 				WHERE A.B22C_USR02_BNAME = B.B22D_USR02_BNAME AND A.B22C_TCODE_3 = B.B22D_USOBT_NAME)
 		OR EXISTS(SELECT * FROM B22_46_IT_BNAME_TCODE_VALUE_CONFLICT B
 				WHERE A.B22C_USR02_BNAME = B.B22D_USR02_BNAME AND A.B22C_TCODE_4 = B.B22D_USOBT_NAME)), 'X', '') B22C_VALUE_CONFLICTS,
 dbo.GROUP_CONCAT_D(DISTINCT B1.B22D_ZF_AGR_UST12_VON, ', ') B22C_TCODE_1_CONFLICT_VALUE,
 dbo.GROUP_CONCAT_D(DISTINCT B2.B22D_ZF_AGR_UST12_VON, ', ') B22C_TCODE_2_CONFLICT_VALUE,
 dbo.GROUP_CONCAT_D(DISTINCT B3.B22D_ZF_AGR_UST12_VON, ', ') B22C_TCODE_3_CONFLICT_VALUE,
 dbo.GROUP_CONCAT_D(DISTINCT B4.B22D_ZF_AGR_UST12_VON, ', ') B22C_TCODE_4_CONFLICT_VALUE
 INTO B22C_47_IT_SOD_CONFLICT
 FROM B22C_40_IT_SOD_MATRIX A
 LEFT JOIN B22_46_IT_BNAME_TCODE_VALUE_CONFLICT B1 ON A.B22C_USR02_BNAME = B1.B22D_USR02_BNAME AND A.B22C_TCODE_1 = B1.B22D_USOBT_NAME
 LEFT JOIN B22_46_IT_BNAME_TCODE_VALUE_CONFLICT B2 ON A.B22C_USR02_BNAME = B2.B22D_USR02_BNAME AND A.B22C_TCODE_2 = B2.B22D_USOBT_NAME
 LEFT JOIN B22_46_IT_BNAME_TCODE_VALUE_CONFLICT B3 ON A.B22C_USR02_BNAME = B3.B22D_USR02_BNAME AND A.B22C_TCODE_3 = B3.B22D_USOBT_NAME
 LEFT JOIN B22_46_IT_BNAME_TCODE_VALUE_CONFLICT B4 ON A.B22C_USR02_BNAME = B4.B22D_USR02_BNAME AND A.B22C_TCODE_4 = B4.B22D_USOBT_NAME
 GROUP BY B22C_USR02_BNAME, B22C_TCODE_1, B22C_TCODE_2, B22C_TCODE_3, B22C_TCODE_4, B22C_DETAIL_RISK_DESCRIPTION, B22C_BP_PROC, B22C_SUB_BP, B22C_RISK_CLASSIFICATION, B22C_RISK_ID, B22C_FUNC_1, B22C_FUNC_2, B22C_FUNC_3, B22C_FUNC_4, B22C_TSTCT_TTEXT_TCODE1, B22C_TSTCT_TTEXT_TCODE2, B22C_TSTCT_TTEXT_TCODE3, B22C_TSTCT_TTEXT_TCODE4, B22C_ROLE_1, B22C_ROLE_2, B22C_ROLE_3, B22C_ROLE_4


 -- Step 32: Create the key mapping table to link SOD tables with the TSTCA/USOBT check table on user access dashboard
 EXEC SP_DROPTABLE 'B22F_48B_IT_SOD_KEY_MAP'

 ALTER TABLE B22D_45_IT_BNAME_AUTH_FULL_MAPPING_USOBT_TSTCA_VALID ALTER COLUMN B22D_USOBT_LOW NVARCHAR(50)
 CREATE INDEX B22D_USR02_BNAME on B22D_45_IT_BNAME_AUTH_FULL_MAPPING_USOBT_TSTCA_VALID(B22D_USR02_BNAME)
 CREATE INDEX B22D_USOBT_NAME on B22D_45_IT_BNAME_AUTH_FULL_MAPPING_USOBT_TSTCA_VALID(B22D_USOBT_NAME)
 CREATE INDEX B22D_USOBT_LOW on B22D_45_IT_BNAME_AUTH_FULL_MAPPING_USOBT_TSTCA_VALID(B22D_USOBT_LOW)

 ALTER TABLE B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT ALTER COLUMN B22C_USR02_BNAME NVARCHAR(50)
 ALTER TABLE B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT ALTER COLUMN B22C_TCODE_1 NVARCHAR(50)
 ALTER TABLE B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT ALTER COLUMN B22C_TCODE_2 NVARCHAR(50)
 ALTER TABLE B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT ALTER COLUMN B22C_TCODE_3 NVARCHAR(50)
 ALTER TABLE B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT ALTER COLUMN B22C_TCODE_4 NVARCHAR(50)
 CREATE CLUSTERED INDEX USOBT_TSTCA_VALUE_CONFLICT_IDX ON B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT(B22C_USR02_BNAME, B22C_TCODE_1, B22C_TCODE_2, B22C_TCODE_3, B22C_TCODE_4)


 SELECT DISTINCT A.B22C_USR02_BNAME B22F_USR02_BNAME, A.B22C_TCODE_1 B22F_TCODE_1, B22C_ROLE_1 B22F_ROLE_1,
 IIF(B22D_USOBT_LOW IS NOT NULL, 'Y',
 IIF(C.B22C_USR02_BNAME IS NOT NULL, 'N', 'Company code not required for conflict')) B22F_USOBT_LOW,
 (A.B22C_USR02_BNAME + A.B22C_TCODE_1 + A.B22C_TCODE_2 + A.B22C_TCODE_3 + A.B22C_TCODE_4) B22F_SOD_KEY
 INTO B22F_48B_IT_SOD_KEY_MAP
 FROM B22C_40_IT_SOD_MATRIX A
 LEFT JOIN B22D_45_IT_BNAME_AUTH_FULL_MAPPING_USOBT_TSTCA_VALID B ON B22D_USOBT_LOW LIKE '$%' AND B22C_USR02_BNAME = B22D_USR02_BNAME AND B22C_TCODE_1 = B22D_USOBT_NAME
 LEFT JOIN B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT C ON A.B22C_USR02_BNAME = C.B22C_USR02_BNAME 
 																AND A.B22C_TCODE_1 = C.B22C_TCODE_1
 																AND A.B22C_TCODE_2 = C.B22C_TCODE_2
 																AND A.B22C_TCODE_3 = C.B22C_TCODE_3
 																AND A.B22C_TCODE_4 = C.B22C_TCODE_4
 UNION
 SELECT DISTINCT A.B22C_USR02_BNAME, A.B22C_TCODE_2, B22C_ROLE_2,
 IIF(B22D_USOBT_LOW IS NOT NULL, 'Y',
 IIF(C.B22C_USR02_BNAME IS NOT NULL, 'N', 'Company code not required for conflict')) B22F_USOBT_LOW,
 (A.B22C_USR02_BNAME + A.B22C_TCODE_1 + A.B22C_TCODE_2 + A.B22C_TCODE_3 + A.B22C_TCODE_4) 

 FROM B22C_40_IT_SOD_MATRIX A
 LEFT JOIN B22D_45_IT_BNAME_AUTH_FULL_MAPPING_USOBT_TSTCA_VALID B ON B22D_USOBT_LOW LIKE '$%' AND B22C_USR02_BNAME = B22D_USR02_BNAME AND B22C_TCODE_2 = B22D_USOBT_NAME
 LEFT JOIN B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT C ON A.B22C_USR02_BNAME = C.B22C_USR02_BNAME 
 																AND A.B22C_TCODE_1 = C.B22C_TCODE_1
 																AND A.B22C_TCODE_2 = C.B22C_TCODE_2
 																AND A.B22C_TCODE_3 = C.B22C_TCODE_3
 																AND A.B22C_TCODE_4 = C.B22C_TCODE_4
 UNION
 SELECT DISTINCT A.B22C_USR02_BNAME, A.B22C_TCODE_3, B22C_ROLE_3,
 IIF(B22D_USOBT_LOW IS NOT NULL, 'Y',
 IIF(C.B22C_USR02_BNAME IS NOT NULL, 'N', 'Company code not required for conflict')) B22F_USOBT_LOW,
 (A.B22C_USR02_BNAME + A.B22C_TCODE_1 + A.B22C_TCODE_2 + A.B22C_TCODE_3 + A.B22C_TCODE_4) 
 FROM B22C_40_IT_SOD_MATRIX A
 LEFT JOIN B22D_45_IT_BNAME_AUTH_FULL_MAPPING_USOBT_TSTCA_VALID B ON B22D_USOBT_LOW LIKE '$%' AND B22C_USR02_BNAME = B22D_USR02_BNAME AND B22C_TCODE_3 = B22D_USOBT_NAME
 LEFT JOIN B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT C ON A.B22C_USR02_BNAME = C.B22C_USR02_BNAME 
 																AND A.B22C_TCODE_1 = C.B22C_TCODE_1
 																AND A.B22C_TCODE_2 = C.B22C_TCODE_2
 																AND A.B22C_TCODE_3 = C.B22C_TCODE_3
 																AND A.B22C_TCODE_4 = C.B22C_TCODE_4
 WHERE A.B22C_TCODE_3 <> ''
 UNION
 SELECT DISTINCT A.B22C_USR02_BNAME, A.B22C_TCODE_4, B22C_ROLE_4,
 IIF(B22D_USOBT_LOW IS NOT NULL, 'Y',
 IIF(C.B22C_USR02_BNAME IS NOT NULL, 'N', 'Company code not required for conflict')) B22F_USOBT_LOW,
 (A.B22C_USR02_BNAME + A.B22C_TCODE_1 + A.B22C_TCODE_2 + A.B22C_TCODE_3 + A.B22C_TCODE_4) 
 FROM B22C_40_IT_SOD_MATRIX A
 LEFT JOIN B22D_45_IT_BNAME_AUTH_FULL_MAPPING_USOBT_TSTCA_VALID B ON B22D_USOBT_LOW LIKE '$%' AND B22C_USR02_BNAME = B22D_USR02_BNAME AND B22C_TCODE_4 = B22D_USOBT_NAME
 LEFT JOIN B22_44_TT_SOD_MATRIX_WITH_USOBT_TSTCA_VALUE_CONFLICT C ON A.B22C_USR02_BNAME = C.B22C_USR02_BNAME 
 																AND A.B22C_TCODE_1 = C.B22C_TCODE_1
 																AND A.B22C_TCODE_2 = C.B22C_TCODE_2
 																AND A.B22C_TCODE_3 = C.B22C_TCODE_3
 																AND A.B22C_TCODE_4 = C.B22C_TCODE_4
 WHERE A.B22C_TCODE_4 <> ''




 -- Step 33: Update the flag again for 
 --				cases that has no conflict values found
 --              or only one value is found within a conflicts between 2, 3 or 4 TCODEs
 UPDATE B22F_48B_IT_SOD_KEY_MAP
 SET B22F_USOBT_LOW = 'Company code not required for conflict'
 FROM B22F_48B_IT_SOD_KEY_MAP A
 LEFT JOIN B22C_47_IT_SOD_CONFLICT B ON A.B22F_SOD_KEY = B.B22C_USR02_BNAME + B.B22C_TCODE_1 + B.B22C_TCODE_2 + B.B22C_TCODE_3 + B.B22C_TCODE_4
 WHERE ISNUMERIC(ISNULL(B.B22C_TCODE_1_CONFLICT_VALUE + 'a', '1'))
 		+ ISNUMERIC(ISNULL(B.B22C_TCODE_2_CONFLICT_VALUE + 'a', '1'))
 		+ ISNUMERIC(ISNULL(B.B22C_TCODE_3_CONFLICT_VALUE + 'a', '1'))
 		+ ISNUMERIC(ISNULL(B.B22C_TCODE_4_CONFLICT_VALUE + 'a', '1')) > 2



 -- Step 34: Create combined USOBT/TSTCA check list
 EXEC SP_DROPTABLE 'B22G_45_IT_USOBT_TSTCA_CHECK_LIST'
 SELECT DISTINCT USOBT_NAME USOBT_NAME, USOBT_OBJECT, USOBT_FIELD, USOBT_LOW, USOBT_HIGH, 'USOBT' AS SOURCE_TABLE
 INTO B22G_45_IT_USOBT_TSTCA_CHECK_LIST
 FROM A_USOBT_C
 WHERE USOBT_LOW NOT IN ('', '''', '*', ''' ''') AND (NOT USOBT_LOW LIKE '$%' OR (USOBT_FIELD = 'BUKRS'))
 UNION
 SELECT DISTINCT TSTCA_TCODE, TSTCA_OBJCT, TSTCA_FIELD, TSTCA_VALUE, '', 'TSTCA' AS SOURCE_TABLE FROM A_TSTCA
 WHERE TSTCA_VALUE NOT IN ('', '''', '*', ''' ''') AND (NOT TSTCA_VALUE LIKE '$%' OR (TSTCA_FIELD = 'BUKRS'))

 EXEC SP_RENAME_FIELD 'B22G_ZF_TSTCA_', 'B22G_45_IT_USOBT_TSTCA_CHECK_LIST'





-- EXEC SP_DROPTABLE 'B22_48_TT_BUSINESS_ROLE_SIMPLE_LIST'
-- SELECT DISTINCT BUSINESS_ROLE, SUBSTRING(Derived_role_Enabler_role, 6, 18) TECHNICAL_ROLE 
-- INTO B22_48_TT_BUSINESS_ROLE_SIMPLE_LIST
-- FROM AM_BUSINESS_ROLE
-- UNION
-- SELECT DISTINCT BUSINESS_ROLE, SUBSTRING(SIEJ_SINGLE_ROLES_TECHNAME, 6, 18) from AM_RTPM_FULL


-- EXEC SP_DROPTABLE 'B22_49_TT_ROLE_LIST'
-- SELECT DISTINCT B22A_USR02_BNAME, B22A_AGR_USERS_AGR_NAME INTO B22_49_TT_ROLE_LIST 
-- FROM B22A_34_IT_BNAME_TCODE_ACCESS

-- EXEC SP_DROPTABLE 'B22_50_IT_BUSINESS_ROLE_DETAIL'
-- SELECT A.B22A_AGR_USERS_AGR_NAME B22G_AGR_USERS_AGR_NAME,B.TECHNICAL_ROLE B22G_ZF_TECHNICAL_ROLE,B.Business_Role B22G_BUSINESS_ROLE
-- INTO B22_50_IT_BUSINESS_ROLE_DETAIL
-- FROM B22_49_TT_ROLE_LIST A
-- LEFT JOIN (SELECT DISTINCT Business_Role, LEFT(RIGHT(Derived_role_Enabler_role, LEN(Derived_role_Enabler_role) - CHARINDEX('_',Derived_role_Enabler_role)), 18) TECHNICAL_ROLE FROM AM_BUSINESS_ROLE) B
-- ON A.B22A_AGR_USERS_AGR_NAME LIKE '%' +  B.TECHNICAL_ROLE + '%'

-- EXEC SP_DROPTABLE 'B22_50_IT_USER_BUSINESS_ROLE'
-- SELECT DISTINCT B22A_USR02_BNAME B22H_USR02_BNAME, 
-- B22A_AGR_USERS_AGR_NAME B22H_AGR_USERS_AGR_NAME, 
-- IIF(CHARINDEX(' - ', BUSINESS_ROLE) > 0, LEFT(BUSINESS_ROLE, CHARINDEX(' - ', BUSINESS_ROLE)), BUSINESS_ROLE) B22H_BUSINESS_ROLE, 
-- B.TECHNICAL_ROLE B22H_ZF_TECHNICAL_ROLE_ORIGINAL

-- INTO B22_50_IT_USER_BUSINESS_ROLE
-- FROM B22_49_TT_ROLE_LIST A

-- LEFT JOIN  B22_48_TT_BUSINESS_ROLE_SIMPLE_LIST B 
--     ON A.B22A_AGR_USERS_AGR_NAME LIKE '%' + B.TECHNICAL_ROLE + '%' 
--     AND B.TECHNICAL_ROLE <> ''
-- WHERE 
--         (SELECT COUNT(DISTINCT D.TECHNICAL_ROLE) FROM B22_48_TT_BUSINESS_ROLE_SIMPLE_LIST D  
--         WHERE D.Business_Role = B.Business_Role)
--         - (SELECT COUNT(DISTINCT D.TECHNICAL_ROLE) FROM B22_49_TT_ROLE_LIST C 
--         INNER JOIN  B22_48_TT_BUSINESS_ROLE_SIMPLE_LIST D ON C.B22A_AGR_USERS_AGR_NAME LIKE '%' + B.TECHNICAL_ROLE + '%'
--         WHERE C.B22A_USR02_BNAME = A.B22A_USR02_BNAME AND D.Business_Role = B.Business_Role)  < 2


EXEC SP_DROPTABLE 'B22F_49_IT_SOD_USER_ACCESS_KEY_MAP'
SELECT DISTINCT B22C_USR02_BNAME B22F_USR02_BNAME, B22C_TCODE_1 B22F_TCODE, B22C_USR02_BNAME + B22C_TCODE_1 + B22C_TCODE_2 + B22C_TCODE_3 + B22C_TCODE_4 B22F_SOD_KEY, 'No' as ZF_TCODE_REQUIRE_BUKRS_FLAG
INTO B22F_49_IT_SOD_USER_ACCESS_KEY_MAP
FROM B22C_40_IT_SOD_MATRIX
UNION
SELECT DISTINCT B22C_USR02_BNAME, B22C_TCODE_2, B22C_USR02_BNAME + B22C_TCODE_1 + B22C_TCODE_2 + B22C_TCODE_3 + B22C_TCODE_4 B22F_SOD_KEY , 'No' as ZF_TCODE_REQUIRE_BUKRS_FLAG
FROM B22C_40_IT_SOD_MATRIX
UNION
SELECT DISTINCT B22C_USR02_BNAME, B22C_TCODE_3, B22C_USR02_BNAME + B22C_TCODE_1 + B22C_TCODE_2 + B22C_TCODE_3 + B22C_TCODE_4 B22F_SOD_KEY , 'No' as ZF_TCODE_REQUIRE_BUKRS_FLAG
FROM B22C_40_IT_SOD_MATRIX
WHERE ISNULL(B22C_TCODE_3, '') <> ''
UNION
SELECT DISTINCT B22C_USR02_BNAME, B22C_TCODE_4, B22C_USR02_BNAME + B22C_TCODE_1 + B22C_TCODE_2 + B22C_TCODE_3 + B22C_TCODE_4 B22F_SOD_KEY , 'No' as ZF_TCODE_REQUIRE_BUKRS_FLAG
FROM B22C_40_IT_SOD_MATRIX
WHERE ISNULL(B22C_TCODE_4, '') <> ''

ALTER TABLE B22F_49_IT_SOD_USER_ACCESS_KEY_MAP ALTER COLUMN ZF_TCODE_REQUIRE_BUKRS_FLAG VARCHAR(3);


UPDATE B22F_49_IT_SOD_USER_ACCESS_KEY_MAP
SET ZF_TCODE_REQUIRE_BUKRS_FLAG = 'Yes'
FROM B22F_49_IT_SOD_USER_ACCESS_KEY_MAP
WHERE B22F_TCODE IN (

SELECT DISTINCT USOBT_NAME FROM A_USOBT_C
WHERE USOBT_FIELD = 'BUKRS'
AND (USOBT_HIGH LIKE '%$%' OR USOBT_LOW LIKE '%$%')
)

-- Drop all temporary table
EXEC SP_REMOVE_TABLES'%_TT_%'


GO
