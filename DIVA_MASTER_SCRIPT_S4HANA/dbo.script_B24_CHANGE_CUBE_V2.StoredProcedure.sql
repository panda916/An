USE [DIVA_MASTER_SCRIPT_S4HANA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[script_B24_CHANGE_CUBE_V2]
AS
-- =============================================
-- Author:		Khoi
-- Create date: <Create Date,,>
-- Description:	Create the change document cubes
--Each Objectclas might have many change document cube
--List of cubes:
--		Objectclas is EINKBELEG:
--				PO approval
--				PO price change
--				PO creation date change
--				PO amount change
--				Release strategy Change
--		Objectclas is INCOMINGINVOICE:
--				Invoice approval
--				Release invoice required
--				Invoice quantity changes
--		Objectclas is IBAN:
--				IBAN change
--		Objectclas is KRED(changes To suppliers):
--				Change to release group
--				Supplier is blocked
--				Supplier payment terms
--		Objectclas is BELEG:
--				Change to payment method
--				Change to payment block
--		Objectclas is SACH (changes to Chart Of Accounts)
--		Objectclas is DEBI (Change to customer)
-- 24-03-2022	 Thuan	 Remove MANDT field in join
-- 26-09-2024	Tan	 --	Add cube CDPOS IBAN and KRED for finding Flip-Flop cases
--					 -- Step 1.8. Add Bank changes with payment in REGUH for PM
--					 -- Step 2: Create new cube for CDPOS IBAN and CDPOS KRED related to bank changes
--					 -- Step 3: Create new cube for finding cases and time of flip-flop

--DYNAMIC_SCRIPT_START
/* Initiate the log */  
--Create database log table if it does not exist
IF OBJECT_ID('_DatabaseLogTable', 'U') IS NULL BEGIN CREATE TABLE [dbo].[_DatabaseLogTable] ([Database] nvarchar(max) NULL,[Object] nvarchar(max) NULL,[Object Type] nvarchar(max) NULL,[User] nvarchar(max) NULL,[Date] date NULL,[Time] time NULL,[Description] nvarchar(max) NULL,[Table] nvarchar(max),[Rows] int) END

--Log start of procedure
INSERT INTO [dbo].[_DatabaseLogTable] ([Database],[Object],[Object Type],[User],[Date],[Time],[Description],[Table],[Rows])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(date,GETDATE()),CONVERT(time,GETDATE()),'Procedure started',NULL,NULL

/* Initialize parameters from globals table */

     DECLARE 	 
			 @currency nvarchar(max)			= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'currency')
			,@date1 nvarchar(max)				= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'date1')
			,@date2 nvarchar(max)				= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'date2')
			,@downloaddate nvarchar(max)		= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'downloaddate')
			,@exchangeratetype nvarchar(max)	= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'exchangeratetype')
			,@language1 nvarchar(max)			= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'language1')
			,@language2 nvarchar(max)			= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'language2')
			,@year nvarchar(max)				= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'year')
			,@id nvarchar(max)					= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'id')
			,@ZV_LIMIT nvarchar(max)		    = (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'ZV_LIMIT')
			,@errormsg NVARCHAR(MAX)
			
DECLARE @dateformat varchar(3)
SET @dateformat   = (SELECT dbo.get_param('dateformat'))
SET DATEFORMAT @dateformat;

BEGIN

EXEC SP_REMOVE_TABLES 'B24_%'
EXEC SP_REMOVE_TABLES 'TEMP1%'

--Step 1.1 EINKBELEG
--STep 1.1.1 Join CDPOS and CDHDR, add change description and get only neccesary changes
	EXEC SP_DROPTABLE 'B24_01_TT_CDHDR_CDPOS_EINKBELEG'
	SELECT DISTINCT A_CDHDR.*,A_CDPOS.*,
	CASE 
	WHEN CDPOS_TABNAME='EKKO' AND CDPOS_FNAME='FRGZU' AND CDHDR_CHANGE_IND='U' THEN '4_PO_APPROVALS'
--	WHEN CDPOS_TABNAME='EKPO' AND CDPOS_FNAME='NETPR' AND CDHDR_CHANGE_IND='U' THEN '6_PO_PRICE_CHANGE'
	WHEN CDPOS_TABNAME='EKPO' AND  CDPOS_FNAME='NETWR' AND CDHDR_CHANGE_IND='U' THEN '5_CHANGE_TO_PO_AMOUNT'
	WHEN CDPOS_FNAME='FRGSX' or  CDPOS_FNAME='FRGGR' AND CDHDR_CHANGE_IND='U' THEN '16_CHANGE_TO_RELEASE_STRATEGY'
	 END AS ZF_CHANGE_DESC,
	CASE 
	WHEN CDPOS_TABNAME='EKKO' AND CDPOS_FNAME='FRGZU' AND CDHDR_CHANGE_IND='U' THEN 4
--	WHEN CDPOS_TABNAME='EKPO' AND CDPOS_FNAME='NETPR' AND CDHDR_CHANGE_IND='U' THEN 6
	WHEN CDPOS_TABNAME='EKPO' AND CDPOS_FNAME='NETWR' AND CDHDR_CHANGE_IND='U' THEN 5
	WHEN CDPOS_FNAME='FRGSX' or  CDPOS_FNAME='FRGGR' AND CDHDR_CHANGE_IND='U' THEN 16
	 END AS ZF_STAGE
	INTO B24_01_TT_CDHDR_CDPOS_EINKBELEG
	FROM A_CDHDR 
	INNER JOIN A_CDPOS
	ON	CDHDR_OBJECTCLAS=CDPOS_OBJECTCLAS AND
		CDHDR_OBJECTID=CDPOS_OBJECTID AND
		CDHDR_CHANGENR=CDPOS_CHANGENR
	WHERE CDHDR_OBJECTCLAS='EINKBELEG'
		AND CDPOS_TABNAME IN ('EKKO','EKPO')
		AND CDPOS_FNAME IN ('FRGZU',
		--'NETPR',
		'NETWR','FRGSX','FRGGR') 
		AND CDHDR_CHANGE_IND='U'

--Step 1.1.2 Add other information	
	EXEC SP_DROPTABLE B24_02A_TT_CDHDR_CDPOS_EINKBELEG
		SELECT B24_01_TT_CDHDR_CDPOS_EINKBELEG.*,
		V_USERNAME_NAME_TEXT,	
	DDFTX_SCRTEXT_L,	--field name
	DD02T_DDTEXT		--table name
	INTO B24_02A_TT_CDHDR_CDPOS_EINKBELEG
	FROM B24_01_TT_CDHDR_CDPOS_EINKBELEG
	LEFT JOIN A_V_USERNAME
	ON CDHDR_USERNAME=V_USERNAME_BNAME
	LEFT JOIN B00_DD02T_ENGLISH ON 
		CDPOS_TABNAME = B00_DD02T_ENGLISH.DD02T_TABNAME
	LEFT JOIN B00_DDFTX_ENGLISH ON 
         CDPOS_TABNAME = B00_DDFTX_ENGLISH.DDFTX_TABNAME
        AND CDPOS_FNAME = B00_DDFTX_ENGLISH.DDFTX_FIELDNAME


--Step 1.1.3 GET the list of PO price change
	EXEC SP_DROPTABLE 'TEMP1'
	SELECT DISTINCT A_CDHDR.*,A_CDPOS.*,
	CASE 
	WHEN CDPOS_TABNAME='EKPO' AND CDPOS_FNAME='NETPR' AND CDHDR_CHANGE_IND='U' THEN '6_PO_PRICE_CHANGE'
	 END AS ZF_CHANGE_DESC,
	CASE 
	WHEN CDPOS_TABNAME='EKPO' AND  CDPOS_FNAME='NETPR' AND CDHDR_CHANGE_IND='U' THEN 6
	 END AS ZF_STAGE
	INTO TEMP1
	FROM A_CDHDR 
	INNER JOIN A_CDPOS
	ON	CDHDR_OBJECTCLAS=CDPOS_OBJECTCLAS AND
		CDHDR_OBJECTID=CDPOS_OBJECTID AND
		CDHDR_CHANGENR=CDPOS_CHANGENR
	WHERE CDHDR_OBJECTCLAS='EINKBELEG'
		AND CDPOS_TABNAME IN ('EKPO')
		AND CDPOS_FNAME IN ('NETPR')
		AND CDHDR_CHANGE_IND='U'
--STep 1.1.4 Add other information
	EXEC SP_DROPTABLE B24_02A_IT_CDHDR_CDPOS_PO_PRICE
		SELECT TEMP1.*,
		V_USERNAME_NAME_TEXT,	
	DDFTX_SCRTEXT_L,	--field name
	DD02T_DDTEXT		--table name
	INTO B24_02A_IT_CDHDR_CDPOS_PO_PRICE
	FROM TEMP1
	LEFT JOIN A_V_USERNAME
	ON CDHDR_USERNAME=V_USERNAME_BNAME
	LEFT JOIN B00_DD02T_ENGLISH ON 
		CDPOS_TABNAME = B00_DD02T_ENGLISH.DD02T_TABNAME
	LEFT JOIN B00_DDFTX_ENGLISH ON 
         CDPOS_TABNAME = B00_DDFTX_ENGLISH.DDFTX_TABNAME
        AND CDPOS_FNAME = B00_DDFTX_ENGLISH.DDFTX_FIELDNAME
--Step 1.1.5 Add the row number
		EXEC SP_DROPTABLE TEMP2_ADD_ROWNNUM

		SELECT B24_02A_IT_CDHDR_CDPOS_PO_PRICE.*,
		ROW_NUMBER() OVER(	
					PARTITION BY CDHDR_OBJECTID,CDHDR_USERNAME,CDPOS_TABKEY,CDPOS_FNAME,CDHDR_UDATE 
					ORDER BY CDHDR_UDATE,CDHDR_UTIME
				 ) AS ROW_NUM
		INTO TEMP2_ADD_ROWNNUM
		FROM B24_02A_IT_CDHDR_CDPOS_PO_PRICE
--Step 1.1.6 Get the latest change in the date
EXEC SP_DROPTABLE TEMP3_LATEST_VALUE

SELECT DISTINCT A.*,B.CDPOS_VALUE_NEW ,B.CDPOS_TABKEY,B.CDPOS_UNIT_NEW,B.CDPOS_CUKY_NEW
INTO TEMP3_LATEST_VALUE
FROM 
(	SELECT DISTINCT CDHDR_OBJECTID,CDHDR_USERNAME,CDHDR_UDATE,MAX(ROW_NUM) AS ROW_NUM
	FROM TEMP2_ADD_ROWNNUM
	GROUP BY CDHDR_OBJECTID,CDHDR_UDATE,CDHDR_USERNAME
) AS A
JOIN TEMP2_ADD_ROWNNUM AS B
ON A.CDHDR_OBJECTID=B.CDHDR_OBJECTID 
	AND A.CDHDR_UDATE=B.CDHDR_UDATE
	AND A.CDHDR_USERNAME=B.CDHDR_USERNAME
	AND A.ROW_NUM=B.ROW_NUM
--STep 1.1.7 Get the first change
EXEC SP_DROPTABLE TEMP4_FIRST_VALUE

SELECT DISTINCT * INTO TEMP4_FIRST_VALUE FROM TEMP2_ADD_ROWNNUM
WHERE ROW_NUM=1
----Step 1.1.8 Add first and last change in a date,
EXEC SP_DROPTABLE TEMP5_FIRST_LAST

SELECT A.CDHDR_MANDANT,
A.CDHDR_OBJECTCLAS,
A.CDHDR_OBJECTID,
'' AS CDHDR_CHANGENR,
A.CDHDR_USERNAME,
A.CDHDR_UDATE,
A.CDHDR_UTIME,
A.CDHDR_TCODE,
A.CDHDR_PLANCHNGNR,
A.CDHDR_ACT_CHNGNO,
A.CDHDR_WAS_PLANND,
A.CDHDR_CHANGE_IND,
A.CDHDR_LANGU,
A.CDHDR_VERSION,
A.CDPOS_MANDANT,
A.CDPOS_OBJECTCLAS,
A.CDPOS_OBJECTID,
A.CDPOS_CHANGENR,
A.CDPOS_TABNAME,
A.CDPOS_TABKEY,
A.CDPOS_FNAME,
A.CDPOS_CHNGIND,
A.CDPOS_TEXT_CASE,
A.CDPOS_UNIT_OLD,
B.CDPOS_UNIT_NEW,
A.CDPOS_CUKY_OLD,
B.CDPOS_CUKY_NEW,
B.CDPOS_VALUE_NEW,
A.CDPOS_VALUE_OLD,
A.ZF_CHANGE_DESC,
A.ZF_STAGE,
A.V_USERNAME_NAME_TEXT,
A.DDFTX_SCRTEXT_L,
A.DD02T_DDTEXT
INTO TEMP5_FIRST_LAST
FROM TEMP4_FIRST_VALUE AS A
JOIN TEMP3_LATEST_VALUE AS B 
	ON A.CDHDR_OBJECTID=B.CDHDR_OBJECTID
		AND A.CDHDR_UDATE=B.CDHDR_UDATE 
		AND A.CDPOS_TABKEY=B.CDPOS_TABKEY
		AND A.CDHDR_USERNAME=B.CDHDR_USERNAME

--Step 1.1.9 Appedn back to the main EINKBELEG table
EXEC SP_DROPTABLE 'B24_02_IT_CDHDR_CDPOS_EINKBELEG'

SELECT * 
INTO B24_02_IT_CDHDR_CDPOS_EINKBELEG
FROM B24_02A_TT_CDHDR_CDPOS_EINKBELEG
UNION 
SELECT * FROM TEMP5_FIRST_LAST


EXEC SP_REMOVE_TABLES 'TEMP%'

--STEP 1.2 INCOMINGINVOICE
--Step 1.2.1 Join CDPOS and CDHDR, add change description and get only neccesary changes
	EXEC SP_DROPTABLE 'B24_03_TT_CDHDR_CDPOS_INCOMINGINVOICE'
	SELECT DISTINCT A_CDHDR.*,A_CDPOS.*,
	CASE 
		WHEN CDPOS_FNAME='FRGKZ' AND CDHDR_CHANGE_IND='U' THEN '10_RELEASE_OF_INVOICE_REQUIRED'
		WHEN CDPOS_FNAME='WRBTR' AND CDHDR_CHANGE_IND='U' THEN '9_CHANGE_TO_MM_INVOICE_VALUE'
	 END AS ZF_CHANGE_DESC,
	CASE
		WHEN CDPOS_FNAME='FRGKZ' AND CDHDR_CHANGE_IND='U' THEN 10
		WHEN CDPOS_FNAME='WRBTR' AND CDHDR_CHANGE_IND='U' THEN 9
		END AS ZF_STAGE
	INTO B24_03_TT_CDHDR_CDPOS_INCOMINGINVOICE
	FROM A_CDHDR 
	INNER JOIN A_CDPOS
	ON	CDHDR_OBJECTCLAS=CDPOS_OBJECTCLAS AND
		CDHDR_OBJECTID=CDPOS_OBJECTID AND
		CDHDR_CHANGENR=CDPOS_CHANGENR
	WHERE CDHDR_OBJECTCLAS='INCOMINGINVOICE'
		AND CDPOS_FNAME IN ('FRGKZ','WRBTR') 
		AND CDPOS_TABNAME IN ('RSEG','RBKP')
		AND CDHDR_CHANGE_IND='U'
--Step 1.2.2 Add other information	
	EXEC SP_DROPTABLE 'B24_04_IT_CDHDR_CDPOS_INCOMINGINVOICE'

		SELECT B24_03_TT_CDHDR_CDPOS_INCOMINGINVOICE.*,
		V_USERNAME_NAME_TEXT,	
	DDFTX_SCRTEXT_L,	--field name
	DD02T_DDTEXT		--table name
	INTO B24_04_IT_CDHDR_CDPOS_INCOMINGINVOICE
	FROM B24_03_TT_CDHDR_CDPOS_INCOMINGINVOICE
	LEFT JOIN A_V_USERNAME
	ON CDHDR_USERNAME=V_USERNAME_BNAME
	LEFT JOIN B00_DD02T_ENGLISH ON 
		CDPOS_TABNAME = B00_DD02T_ENGLISH.DD02T_TABNAME
	LEFT JOIN B00_DDFTX_ENGLISH ON 
         CDPOS_TABNAME = B00_DDFTX_ENGLISH.DDFTX_TABNAME
        AND CDPOS_FNAME = B00_DDFTX_ENGLISH.DDFTX_FIELDNAME

-- Step 1.3  CDHDR_OBJECTCLAS='IBAN'
--Step 1.3.1 Join CDPOS and CDHDR, add change description and get only neccesary changes
	EXEC SP_DROPTABLE 'B24_05_TT_CDHDR_CDPOS_IBAN'
	SELECT DISTINCT A_CDHDR.*,A_CDPOS.*,
	'3_CHANGE_TO_IBAN' ZF_CHANGE_DESC,
	3 AS ZF_STAGE
	INTO B24_05_TT_CDHDR_CDPOS_IBAN
	FROM A_CDHDR 
	INNER JOIN A_CDPOS
	ON	CDHDR_OBJECTCLAS=CDPOS_OBJECTCLAS AND
		CDHDR_OBJECTID=CDPOS_OBJECTID AND
		CDHDR_CHANGENR=CDPOS_CHANGENR
	WHERE CDHDR_OBJECTCLAS='IBAN'


--Step 1.3.2 Add other information	
	EXEC SP_DROPTABLE B24_06_IT_CDHDR_CDPOS_IBAN

		 SELECT B24_05_TT_CDHDR_CDPOS_IBAN.*,
		 LFBK_LIFNR,
	V_USERNAME_NAME_TEXT,	
	DDFTX_SCRTEXT_L,	--field name
	DD02T_DDTEXT		--table name
	INTO B24_06_IT_CDHDR_CDPOS_IBAN
	FROM B24_05_TT_CDHDR_CDPOS_IBAN
	LEFT JOIN A_V_USERNAME
	ON CDHDR_USERNAME=V_USERNAME_BNAME
	LEFT JOIN B00_DD02T_ENGLISH ON 
		CDPOS_TABNAME = B00_DD02T_ENGLISH.DD02T_TABNAME
	LEFT JOIN B00_DDFTX_ENGLISH ON 
         CDPOS_TABNAME = B00_DDFTX_ENGLISH.DDFTX_TABNAME
        AND CDPOS_FNAME = B00_DDFTX_ENGLISH.DDFTX_FIELDNAME
	LEFT JOIN A_LFBK  
		ON  REPLACE(CDHDR_OBJECTID,' ','') LIKE '%'+CONCAT(LFBK_BANKS,LFBK_BANKL,LFBK_BANKN,LFBK_BKONT)+'%'

-- Step 1.4 CDHDR_OBJECTCLAS='Kred'
--Step 1.4.1 Join CDPOS and CDHDR, add change description and get only neccesary changes
	EXEC SP_DROPTABLE 'TEMP1'
	SELECT DISTINCT A_CDHDR.*,A_CDPOS.*,
	CASE
		WHEN CDPOS_TABNAME='LFA1' AND CDPOS_FNAME IN ('LOEVM','SPERR','SPERM','SPERZ') AND CDHDR_CHANGE_IND='U' THEN '11_SUPPLIER_IS_BLOCKED'
		WHEN CDPOS_TABNAME='LFB1' AND CDPOS_FNAME IN ('LOEVM','SPERR','ZAHLS') AND CDHDR_CHANGE_IND='U' THEN '11_SUPPLIER_IS_BLOCKED'
		WHEN CDPOS_TABNAME='LFB1' AND CDPOS_FNAME='ZTERM' AND CDHDR_CHANGE_IND='U' THEN '12_SUPPLIER_PAYMENT_TERMS'
		WHEN CDPOS_TABNAME='LFB1' AND CDPOS_FNAME='FRGRP' AND CDHDR_CHANGE_IND='U' THEN '15_CHANGE_TO_RELEASE_GROUP'
		END AS 
		ZF_CHANGE_DESC,
	CASE
		WHEN CDPOS_TABNAME='LFA1' AND CDPOS_FNAME IN ('LOEVM','SPERR','SPERM','SPERZ') AND CDHDR_CHANGE_IND='U' THEN 11
		WHEN CDPOS_TABNAME='LFB1' AND CDPOS_FNAME IN ('LOEVM','SPERR','ZAHLS') AND CDHDR_CHANGE_IND='U' THEN 11
		WHEN CDPOS_TABNAME='LFB1' AND CDPOS_FNAME='ZTERM' AND CDHDR_CHANGE_IND='U' THEN 12
		WHEN CDPOS_TABNAME='LFB1' AND CDPOS_FNAME='FRGRP' AND CDHDR_CHANGE_IND='U' THEN 15
		END AS 
		ZF_STAGE
	INTO TEMP1
	FROM A_CDHDR 
	INNER JOIN A_CDPOS
	ON	CDHDR_OBJECTCLAS=CDPOS_OBJECTCLAS AND
		CDHDR_OBJECTID=CDPOS_OBJECTID AND
		CDHDR_CHANGENR=CDPOS_CHANGENR
	WHERE CDHDR_OBJECTCLAS='KRED'
	AND CDPOS_TABNAME IN ('LFA1','LFB1') 
	AND CDPOS_FNAME IN ('LOEVM','SPERR','SPERM','SPERZ','ZAHLS','ZTERM','FRGRP')
	AND CDHDR_CHANGE_IND='U'
--Limit down the number of change, get only the necessary company code
	EXEC SP_DROPTABLE 'B24_07_TT_CDHDR_CDPOS_KRED'
	SELECT * 
	INTO B24_07_TT_CDHDR_CDPOS_KRED
	FROM TEMP1
	WHERE CDPOS_TABKEY NOT IN
	(
		SELECT  CDPOS_TABKEY FROM
		TEMP1
		WHERE CDPOS_TABNAME='LFB1' AND RIGHT(CDPOS_TABKEY,4) NOT IN 
		(
			SELECT COMPANY_CODE FROM AM_COMPANY_CODE
		)
	)
--Step 1.4.2 Add other information	
EXEC SP_DROPTABLE B24_08_IT_CDHDR_CDPOS_KRED

		SELECT B24_07_TT_CDHDR_CDPOS_KRED.*,
				V_USERNAME_NAME_TEXT,	
			DDFTX_SCRTEXT_L,	--field name
			DD02T_DDTEXT		--table name
			INTO B24_08_IT_CDHDR_CDPOS_KRED
			FROM B24_07_TT_CDHDR_CDPOS_KRED
	LEFT JOIN A_V_USERNAME
	ON CDHDR_USERNAME=V_USERNAME_BNAME
	LEFT JOIN B00_DD02T_ENGLISH ON 
		CDPOS_TABNAME = B00_DD02T_ENGLISH.DD02T_TABNAME
	LEFT JOIN B00_DDFTX_ENGLISH ON 
         CDPOS_TABNAME = B00_DDFTX_ENGLISH.DDFTX_TABNAME
        AND CDPOS_FNAME = B00_DDFTX_ENGLISH.DDFTX_FIELDNAME
--Step 1.5 BELEG
--Step 1.5.1  Join CDPOS and CDHDR, add change description and get only neccesary changes
EXEC SP_DROPTABLE B24_09_TT_CDHDR_CDPOS_BELEG 

	SELECT DISTINCT A_CDHDR.*,A_CDPOS.*,
	CASE
		WHEN CDPOS_FNAME = 'ZLSCH' AND CDHDR_CHANGE_IND='U' THEN '13_CHANGE_TO_PAYMENT_METHOD'
		WHEN CDPOS_FNAME='ZLSPR'  AND CDHDR_CHANGE_IND='U' THEN '14_CHANGE_TO_PAYMENT_BLOCK'
		WHEN CDPOS_FNAME = 'WRBTR' AND CDHDR_CHANGE_IND='U'  THEN '9_CHANGE_TO_FI_INVOICE_VALUE'
		END 
		ZF_CHANGE_DESC,
	CASE
		WHEN CDPOS_FNAME = 'ZLSCH' AND CDHDR_CHANGE_IND='U' THEN 13
		WHEN CDPOS_FNAME='ZLSPR'  AND CDHDR_CHANGE_IND='U' THEN 14
		WHEN CDPOS_FNAME = 'WRBTR'  AND CDHDR_CHANGE_IND='U'  THEN 9
		END 
		ZF_STAGE
	INTO B24_09_TT_CDHDR_CDPOS_BELEG
	FROM A_CDHDR 
	INNER JOIN A_CDPOS
	ON	CDHDR_OBJECTCLAS=CDPOS_OBJECTCLAS AND
		CDHDR_OBJECTID=CDPOS_OBJECTID AND
		CDHDR_CHANGENR=CDPOS_CHANGENR
	WHERE CDHDR_OBJECTCLAS='BELEG'
	AND CDPOS_FNAME IN ('WRBTR','ZLSPR','ZLSCH','SPERZ')
	AND CDHDR_CHANGE_IND='U'

--Step 1.5.2 Add other information	
EXEC SP_DROPTABLE B24_10_IT_CDHDR_CDPOS_BELEG

		SELECT B24_09_TT_CDHDR_CDPOS_BELEG.*,
				V_USERNAME_NAME_TEXT,	
			DDFTX_SCRTEXT_L,	--field name
			DD02T_DDTEXT		--table name
			INTO B24_10_IT_CDHDR_CDPOS_BELEG
			FROM B24_09_TT_CDHDR_CDPOS_BELEG
	LEFT JOIN A_V_USERNAME
	ON CDHDR_USERNAME=V_USERNAME_BNAME
	LEFT JOIN B00_DD02T_ENGLISH ON 
		CDPOS_TABNAME = B00_DD02T_ENGLISH.DD02T_TABNAME
	LEFT JOIN B00_DDFTX_ENGLISH ON 
         CDPOS_TABNAME = B00_DDFTX_ENGLISH.DDFTX_TABNAME
        AND CDPOS_FNAME = B00_DDFTX_ENGLISH.DDFTX_FIELDNAME

--Step 1.6.1 Get REGUH bank change
EXEC SP_DROPTABLE B24_11_TT_REGUH_BANK

	SELECT DISTINCT A_CDHDR.*,A_CDPOS.*,
	'16_PAYMENT_BANK_CHANGE' AS ZF_DESC_CHANGE,
		16 AS ZF_STAGE 
		INTO B24_11_TT_REGUH_BANK
	FROM A_CDHDR 
	INNER JOIN A_CDPOS
	ON	CDHDR_OBJECTCLAS=CDPOS_OBJECTCLAS AND
		CDHDR_OBJECTID=CDPOS_OBJECTID AND
		CDHDR_CHANGENR=CDPOS_CHANGENR
	WHERE CDPOS_TABNAME='REGUH' AND CDPOS_FNAME='ZBNKN' AND CDHDR_CHANGE_IND='U'

--Step 1.6.2 Add  other information
EXEC SP_DROPTABLE B24_12_IT_REGUH_BANK

		SELECT B24_11_TT_REGUH_BANK.*,
				V_USERNAME_NAME_TEXT,	
			DDFTX_SCRTEXT_L,	--field name
			DD02T_DDTEXT		--table name
			INTO B24_12_IT_REGUH_BANK
			FROM B24_11_TT_REGUH_BANK
	LEFT JOIN A_V_USERNAME
	ON CDHDR_USERNAME=V_USERNAME_BNAME
	LEFT JOIN B00_DD02T_ENGLISH ON 
		CDPOS_TABNAME = B00_DD02T_ENGLISH.DD02T_TABNAME
	LEFT JOIN B00_DDFTX_ENGLISH ON 
         CDPOS_TABNAME = B00_DDFTX_ENGLISH.DDFTX_TABNAME
        AND CDPOS_FNAME = B00_DDFTX_ENGLISH.DDFTX_FIELDNAME

--- Step 1.7 Supplier bank account number 
-- The fields LFBK_BANKN is the one of the main key in LFBK, which is not allowed to change
--To get the change of this field, user has to delete and then inserted the new values to LFBK
--All the delete(E) and insert(I) will be record in CDPOS and CDHDR
--THe CDPOS_TABKEY contains all the mainkey, if someone changes LFBK_BANKN,the last part will be changed and all the remains is the same.
--STep 1.7.1 Get all the change relate to LFBK(Insert and Delete only)


	EXEC SP_DROPTABLE 'B24_13_TT_CDHDR_CDPOS_LFBK'

	SELECT *,

	IIF(B.CDPOS_CHNGIND <> 'U', DBO.TRIM(REVERSE(SUBSTRING(REVERSE(B.CDPOS_TABKEY), 1, CHARINDEX(' ', REVERSE(B.CDPOS_TABKEY))))), '') ZF_LFBK_BANKN,--	LFBK_BANNK
	IIF(B.CDPOS_CHNGIND <> 'U', DBO.TRIM(REPLACE(B.CDPOS_TABKEY, DBO.TRIM(REVERSE(SUBSTRING(REVERSE(B.CDPOS_TABKEY), 1, CHARINDEX(' ', REVERSE(B.CDPOS_TABKEY))))),'')), '') ZF_OTHER_KEY--Other keys
	INTO B24_13_TT_CDHDR_CDPOS_LFBK
	FROM A_CDHDR A
		INNER JOIN A_CDPOS B ON B.CDPOS_CHANGENR = A.CDHDR_CHANGENR
							AND B.CDPOS_OBJECTID = A.CDHDR_OBJECTID
							AND B.CDPOS_OBJECTCLAS = A.CDHDR_OBJECTCLAS
	WHERE CDPOS_TABNAME IN ('LFBK')
		  AND CDHDR_OBJECTID <> ''
		  AND CDPOS_CHNGIND <> 'U' AND CDHDR_OBJECTCLAS='KRED'
--STep 1.7.2 Add other information 

EXEC SP_DROPTABLE B24_14_TT_CDHDR_CDPOS_LFBK_ADD_INFO

		SELECT B24_13_TT_CDHDR_CDPOS_LFBK.*,
				V_USERNAME_NAME_TEXT,	
			DDFTX_SCRTEXT_L,	--field name
			DD02T_DDTEXT		--table name
			INTO B24_14_TT_CDHDR_CDPOS_LFBK_ADD_INFO
			FROM B24_13_TT_CDHDR_CDPOS_LFBK
	LEFT JOIN A_V_USERNAME
	ON CDHDR_USERNAME=V_USERNAME_BNAME
	LEFT JOIN B00_DD02T_ENGLISH ON 
		CDPOS_TABNAME = B00_DD02T_ENGLISH.DD02T_TABNAME
	LEFT JOIN B00_DDFTX_ENGLISH ON 
         CDPOS_TABNAME = B00_DDFTX_ENGLISH.DDFTX_TABNAME
        AND CDPOS_FNAME = B00_DDFTX_ENGLISH.DDFTX_FIELDNAME

--Step 1.7.3 Get the list of (CDHDR_OBJECTID,CDHDR_CHANGENR,CDHDR_OBJECTCLAS )that insert has delete,
--has the same ZF_OTHER_KEY , but different ZF_LFBK_BANKN

	EXEC SP_DROPTABLE 'B24_15_TT_CHANGE_LFBK_INSERT'
	SELECT
	DISTINCT A.CDHDR_OBJECTID, A.CDHDR_CHANGENR, A.CDHDR_OBJECTCLAS 
	INTO B24_15_TT_CHANGE_LFBK_INSERT
	FROM B24_14_TT_CDHDR_CDPOS_LFBK_ADD_INFO A
	WHERE CDPOS_CHNGIND = 'I'
		AND CDPOS_FNAME = 'KEY'
		AND EXISTS(SELECT * FROM B24_13_TT_CDHDR_CDPOS_LFBK B WHERE 
			A.CDHDR_OBJECTCLAS = B.CDHDR_OBJECTCLAS
			AND A.CDHDR_OBJECTID = B.CDHDR_OBJECTID
			AND A.ZF_OTHER_KEY = B.ZF_OTHER_KEY
			AND B.CDPOS_CHNGIND IN ('D', 'E'))

--Step 1.7.4 Get the list of delete that relate to the list of insert, so we can has a table that contains the list of insert and delete for the same key

	EXEC SP_DROPTABLE 'B24_16_TT_CHANGE_LFBK_INSERT_DEL'
	SELECT DISTINCT A.*
	INTO B24_16_TT_CHANGE_LFBK_INSERT_DEL
	FROM B24_14_TT_CDHDR_CDPOS_LFBK_ADD_INFO A
	INNER JOIN B24_15_TT_CHANGE_LFBK_INSERT B ON B.CDHDR_CHANGENR = A.CDHDR_CHANGENR
													AND B.CDHDR_OBJECTCLAS = B.CDHDR_OBJECTCLAS
													AND B.CDHDR_OBJECTID = B.CDHDR_OBJECTID
	ORDER BY A.CDHDR_OBJECTID, A.CDHDR_CHANGENR, A.CDHDR_OBJECTCLAS
--Step 1.7.5 Combine insert and delete values to 1 row, to limit down the table 
	EXEC SP_DROPTABLE 'B24_17_IT_CHANGE_LFBK_INSERT_DEL'
	SELECT DISTINCT A.*,
	A.ZF_LFBK_BANKN ZF_LFBK_BANKN_NEW,
	B.ZF_LFBK_BANKN ZF_LFBK_BANKN_OLD
	INTO B24_17_IT_CHANGE_LFBK_INSERT_DEL
	FROM B24_16_TT_CHANGE_LFBK_INSERT_DEL A
	LEFT JOIN B24_16_TT_CHANGE_LFBK_INSERT_DEL B ON A.CDHDR_OBJECTCLAS = B.CDHDR_OBJECTCLAS
															AND A.CDHDR_OBJECTID = B.CDHDR_OBJECTID
															AND A.CDHDR_CHANGENR = B.CDHDR_CHANGENR
															AND B.CDPOS_FNAME <> 'KEY' AND B.CDPOS_CHNGIND = 'E'
	WHERE A.CDPOS_CHNGIND = 'I' AND A.ZF_LFBK_BANKN <> B.ZF_LFBK_BANKN


-- TAN add
-- Step 1.8: CREATE CUBE FOR BANK CHANGES WITH CDPOS LINK TIBAN THEN, MAPPING WITH REGUH AND PM
-- Step 1.8.1: Get the bank changes related to TIBAN from the table A_CDPOS

EXEC SP_DROPTABLE 'B24_18_TT_CDPOS_TIBAN_ADD_INFO'
SELECT 
	A.*, B.*,
	V_USERNAME_NAME_TEXT,	
	DDFTX_SCRTEXT_L,	--field name
	DD02T_DDTEXT		--table name
INTO B24_18_TT_CDPOS_TIBAN_ADD_INFO
FROM A_CDHDR A
		--- Join CDPOS and CDHDR
INNER JOIN A_CDPOS AS B
	ON B.CDPOS_CHANGENR = A.CDHDR_CHANGENR
	AND B.CDPOS_OBJECTID = A.CDHDR_OBJECTID
	AND B.CDPOS_OBJECTCLAS = A.CDHDR_OBJECTCLAS 
	AND CDPOS_OBJECTCLAS LIKE 'IBAN' AND CDPOS_TABNAME LIKE 'TIBAN'
--- Add User name text
LEFT JOIN A_V_USERNAME
	ON CDHDR_USERNAME=V_USERNAME_BNAME
LEFT JOIN B00_DD02T_ENGLISH ON 
	CDPOS_TABNAME = B00_DD02T_ENGLISH.DD02T_TABNAME
LEFT JOIN B00_DDFTX_ENGLISH ON 
        CDPOS_TABNAME = B00_DDFTX_ENGLISH.DDFTX_TABNAME
    AND CDPOS_FNAME = B00_DDFTX_ENGLISH.DDFTX_FIELDNAME


-- Step 1.8.2: Link to the table A_TIBAN to get the supplier number in the field TABKEY

EXEC SP_DROPTABLE 'B24_19_TT_CDPOS_IBAN_GET_TIBAN_TABKEY'
SELECT 
	*
INTO B24_19_TT_CDPOS_IBAN_GET_TIBAN_TABKEY
FROM B24_18_TT_CDPOS_TIBAN_ADD_INFO
   --- Join TIBAN with MANDT+BANKS+BANKL+BANKN+BKONT in TIBAN with OBJECT ID in CDPOS
INNER JOIN A_TIBAN
ON TRIM(REPLACE( CONCAT(TIBAN_MANDT, TIBAN_BANKS, TIBAN_BANKL,TIBAN_BANKN,TIBAN_BKONT) , ' ','')) = TRIM(REPLACE(CDPOS_OBJECTID, ' ',''))
AND TIBAN_TABNAME = 'LFBK'


-- Step 1.8.3: Link the bank changes to the table REGUH to get the payments that go through the payment process

EXEC SP_DROPTABLE 'B24_20_IT_REGUH_CDPOS_BANK_CHANGES'
SELECT DISTINCT
	REGUH_ZBUKR,
	YEAR(REGUH_LAUFD) AS ZF_REGUH_LAUFD_YEAR,
	REGUH_VBLNR,
	REGUH_LAUFD,
	REGUH_LIFNR,
	REGUH_KUNNR,
	REGUH_ZBNKN, 	-- 	Bank account number of the payee
	REGUH_ZBNKL, 	-- 	Bank number of the payee's bank
	REGUH_ZBKON, 	-- 	Bank Control Key of the Payee's Bank
	--REGUH_UBNKS, 	-- 	Bank country key
	--REGUH_ZBNKY, 	-- 	Bank key of the payee's bank
	REGUH_RBETR, 	-- Amount in local currency
	REGUH_RWBTR, 	-- Amount paid in payment currency
	REGUH_WAERS, 	-- Currency key
	CDHDR_OBJECTCLAS,
	CDHDR_OBJECTID,
	CDHDR_CHANGENR,
	CDHDR_USERNAME,
	V_USERNAME_NAME_TEXT,
	CDHDR_UDATE,
	CDHDR_UTIME,
	CDPOS_VALUE_OLD,
	CDPOS_VALUE_NEW,
	'16_PAY_BANK_CHANGE' ZF_CHANGE_DESC,
	'16' AS ZF_STAGE

INTO B24_20_IT_REGUH_CDPOS_BANK_CHANGES
FROM A_REGUH
INNER JOIN B24_19_TT_CDPOS_IBAN_GET_TIBAN_TABKEY
ON TIBAN_MANDT = REGUH_MANDT
	AND TIBAN_BANKN = REGUH_ZBNKN
	AND TIBAN_BKONT = REGUH_ZBKON	
	AND TIBAN_TABKEY = REGUH_LIFNR
	--AND TIBAN_BANKS = REGUH_UBNKS
	--AND TIBAN_BANKL = REGUH_ZBNKY
--- Filter Change Document before Input date of Payment
WHERE 
	CDHDR_UDATE <= REGUH_LAUFD


-- Step 2:
-- FLIP-FLOP CUBE: CDPOS_KRED and CDPOS_IBAN
-- Indentify bank accounts found to be flip-flopped in change log
-- -------------------------------------------------------------------------------
-- ----  2A: Create CDPOS_KRED cube that records bank changes in LFBK
-- ----  2B: Create CDPOS_IBAN cube that records bank changes in TIBAN
-- ---------------------------------------------------------------
-- Step 2A - KRED 
-- -- Step 2A.1.
	-- Filter on changes for suppliers and related to change banks
	-- Add the change document header to the change document item

EXEC SP_REMOVE_TABLES 'B24_21_CDPOS_CDHDR_TT_KRED_LFBK'

SELECT 
		CDHDR_USERNAME, 
		CDPOS_OBJECTID,
		CDPOS_OBJECTCLAS,
		CDPOS_CHANGENR,
		V_USERNAME_NAME_TEXT,	
		DDFTX_SCRTEXT_L,	--field name
		DD02T_DDTEXT,		--table name
		CDHDR_UDATE,
		CONVERT(TIME, STUFF(STUFF(CDHDR_UTIME, 5, 0, ':'), 3, 0, ':') ) AS CDHDR_UTIME, -- Format Time to hh:mm:ss
		CDPOS_TABNAME,
		CDPOS_FNAME,
		CDHDR_CHANGE_IND,
		CDPOS_CHNGIND,
		CDHDR_TCODE,
		CDPOS_VALUE_NEW,
		CDPOS_VALUE_OLD,	
		CDPOS_TABKEY,
		TSTCT_TTEXT,		
		--- Update values from VALUE_OLD and VALUE_NEW relating to bank
		--    - Default values for VALUE_OLD and VALUE_NEW to bank account from TABKEY --> BANKN , KEY, TABKEY
		--    - If not bank, default VALUE_OLD and VALUE_NEW
		CASE 
			WHEN CDPOS_CHNGIND = 'U' AND CDPOS_TABNAME = 'LFBK' AND CDPOS_FNAME IN  ('BANKN' , 'TABKEY' , 'KEY' ) AND CDPOS_OBJECTID <> CDPOS_TABKEY 
				-- This method to get the Bank account in CDPOS TABKEY -- In this way, bank account in the last position of Tabkey
				-- For example: CDPOS_TABKEY = LFBK_MANDT+LFBK_LIFNR+LFBK_BANKS+LFBK_BANKL+LFBK_BANKN

				THEN TRIM(SUBSTRING(CDPOS_TABKEY, LEN(CDPOS_TABKEY) - CHARINDEX(' ', REVERSE(CDPOS_TABKEY)) + 1, LEN(CDPOS_TABKEY))) 
			WHEN CDPOS_CHNGIND = 'U' AND CDPOS_TABNAME = 'LFBK' AND CDPOS_FNAME IN   ('BANKN' , 'TABKEY' , 'KEY' ) AND CDPOS_OBJECTID = CDPOS_TABKEY 
				THEN TRIM(SUBSTRING(CDPOS_TABKEY, LEN(CDPOS_TABKEY) - CHARINDEX(' ', REVERSE(CDPOS_TABKEY)) + 1, LEN(CDPOS_TABKEY))) 
			ELSE TRIM(REPLACE(CDPOS_VALUE_OLD , ' ','') )
		END AS ZF_CDPOS_VALUE_OLD,

		CASE 
			WHEN CDPOS_CHNGIND = 'U' AND CDPOS_TABNAME = 'LFBK' AND CDPOS_FNAME IN  ('BANKN' , 'TABKEY' , 'KEY' ) AND ISNULL(CDPOS_VALUE_NEW,'') <> ''
				THEN TRIM(REPLACE(CDPOS_VALUE_NEW , ' ','') ) 
			ELSE  TRIM(SUBSTRING(CDPOS_TABKEY, LEN(CDPOS_TABKEY) - CHARINDEX(' ', REVERSE(CDPOS_TABKEY)) + 1, LEN(CDPOS_TABKEY))) 
		END	AS ZF_CDPOS_VALUE_NEW					

INTO B24_21_CDPOS_CDHDR_TT_KRED_LFBK
FROM A_CDHDR A
INNER JOIN ( SELECT *
	FROM A_CDPOS
	WHERE 
		( 
			( CDPOS_OBJECTCLAS LIKE  'KRED' OR CDPOS_OBJECTCLAS LIKE  'KRED_N' ) 
				-- Check changes in LFBK
			AND ( ( CDPOS_TABNAME = 'LFBK' AND CDPOS_FNAME IN ('BANKN' , 'TABKEY' , 'KEY' ) )
				-- Check LFA1 - Deleted Supplier (because if supplier deleted assuming all deleted)
				OR ( CDPOS_TABNAME = 'LFA1' AND CDPOS_FNAME IN ('KEY') ) )
		)  ) AS B
		
ON		B.CDPOS_CHANGENR = A.CDHDR_CHANGENR
       AND B.CDPOS_OBJECTID = A.CDHDR_OBJECTID
       AND B.CDPOS_OBJECTCLAS = A.CDHDR_OBJECTCLAS 	   
LEFT JOIN A_V_USERNAME
	ON CDHDR_USERNAME=V_USERNAME_BNAME
LEFT JOIN B00_DD02T_ENGLISH ON 
	CDPOS_TABNAME = B00_DD02T_ENGLISH.DD02T_TABNAME
LEFT JOIN B00_DDFTX_ENGLISH ON 
        CDPOS_TABNAME = B00_DDFTX_ENGLISH.DDFTX_TABNAME
    AND CDPOS_FNAME = B00_DDFTX_ENGLISH.DDFTX_FIELDNAME
LEFT JOIN B00_TSTCT ON 
        CDHDR_TCODE = TSTCT_TCODE


-- -- Step 2A.2.
	--		Append value old and value new
	--    - Create start and end date depending on if it is an update and new/old value
	--    - Create indicator of new or old: for join to payment transactions will only use new
	--    - Keep the CDPOS_VALUE_OLD and CDPOS_VALUE_NEW as well as the original change date/time for display of updates

	EXEC SP_REMOVE_TABLES 'B24_22_CDPOS_TT_KRED_APPEND';
	SELECT 
		CDHDR_USERNAME, 
		CDPOS_OBJECTID,
		CDPOS_OBJECTCLAS,
		CDPOS_CHANGENR,
		V_USERNAME_NAME_TEXT,	
		DDFTX_SCRTEXT_L,	
		DD02T_DDTEXT,	
		CDHDR_UDATE,
		CDHDR_UTIME, 
		CDPOS_TABNAME,
		CDPOS_FNAME,
		CDHDR_CHANGE_IND,
		CDPOS_CHNGIND,
		CDHDR_TCODE,
		CDPOS_VALUE_NEW,
		CDPOS_VALUE_OLD,
		CDPOS_TABKEY,
		TSTCT_TTEXT,
		
		-- Date and time Start
		IIF((CDPOS_CHNGIND = 'U' AND LEFT(CDHDR_UTIME, 8) <> '00:00:00' ) OR CDPOS_CHNGIND IN ('I','J'),
            CDHDR_UDATE, DATEADD(DAY, -1, CDHDR_UDATE)) AS ZF_CDHDR_UDATE_START,		
        IIF(CDPOS_CHNGIND = 'U' AND LEFT(CDHDR_UTIME, 8) <> '00:00:00',
            DATEADD(MINUTE, -1, CDHDR_UTIME),  CDHDR_UTIME ) AS ZF_CDHDR_UTIME_START,      

		-- Date and time End (Date if the bank account is terminated)
        IIF(CDPOS_CHNGIND = 'U', CDHDR_UDATE, CONVERT(DATE, '20990101') ) AS ZF_CDHDR_UDATE_END,
        IIF(CDPOS_CHNGIND = 'U',
			CDHDR_UTIME, CONVERT(TIME, STUFF(STUFF('000000', 5, 0, ':'), 3, 0, ':')) ) AS ZF_CDHDR_UTIME_END,

		ZF_CDPOS_VALUE_OLD AS ZF_CDPOS_VALUE,
		'Old' AS ZF_OLD_NEW_INDICATOR
	
	INTO B24_22_CDPOS_TT_KRED_APPEND
	FROM (	SELECT * 
			FROM B24_21_CDPOS_CDHDR_TT_KRED_LFBK 
			WHERE ISNULL(ZF_CDPOS_VALUE_OLD,'') <>'' 
				AND ( CDPOS_TABNAME = 'LFBK' AND ( CDPOS_FNAME = 'BANKN' OR  CDPOS_FNAME = 'TABKEY' OR CDPOS_FNAME = 'KEY' ) )
				) AS A
	UNION
	SELECT 
		CDHDR_USERNAME, 
		CDPOS_OBJECTID,
		CDPOS_OBJECTCLAS,
		CDPOS_CHANGENR,
		V_USERNAME_NAME_TEXT,	
		DDFTX_SCRTEXT_L,	
		DD02T_DDTEXT,	
		CDHDR_UDATE,
		CDHDR_UTIME, 
		CDPOS_TABNAME,
		CDPOS_FNAME,
		CDHDR_CHANGE_IND,
		CDPOS_CHNGIND,
		CDHDR_TCODE,
		CDPOS_TABKEY,
		CDPOS_VALUE_NEW,
		CDPOS_VALUE_OLD,
		TSTCT_TTEXT,
		
		-- Date and time Start
		CDHDR_UDATE AS ZF_CDHDR_UDATE_START,			
		CDHDR_UTIME AS ZF_CDHDR_UTIME_START,      

		-- Date and time End (Date if the bank account is terminated)
       CONVERT(DATE, '20990101') AS ZF_CDHDR_UDATE_END,
       CONVERT(TIME, STUFF(STUFF('000000' , 5, 0, ':'), 3, 0, ':')) AS ZF_CDHDR_UTIME_END,
		ZF_CDPOS_VALUE_NEW AS ZF_CDPOS_VALUE,
		'New' AS ZF_OLD_NEW_INDICATOR

	FROM (	SELECT * 
			FROM B24_21_CDPOS_CDHDR_TT_KRED_LFBK 
			WHERE ISNULL(ZF_CDPOS_VALUE_NEW,'') <> '' 
				AND ( CDPOS_TABNAME = 'LFBK' AND  ( CDPOS_FNAME = 'BANKN' OR  CDPOS_FNAME = 'TABKEY' OR CDPOS_FNAME = 'KEY' )  )
			) AS B

		
-- -- Step 2A.3. Add useful fields
	--        - Update rule for start and end date
	--        - Add the delete date 
	--        - Update the start date to VALUE_FROM, if found
	--        - Add the supplier name, country key and creation date
	
	EXEC SP_REMOVE_TABLES 'B24_23_CDPOS_CDHDR_TT_KRED_APPEND_INFO';

	SELECT 
		A.CDHDR_USERNAME, 
		A.CDPOS_OBJECTID,
		A.CDPOS_OBJECTCLAS,
		A.CDPOS_CHANGENR,
		A.V_USERNAME_NAME_TEXT,	
		A.DDFTX_SCRTEXT_L,	
		A.DD02T_DDTEXT,	
		A.CDHDR_UDATE,
		A.CDHDR_UTIME, 
		A.CDPOS_TABNAME,
		A.CDPOS_FNAME,
		A.CDHDR_CHANGE_IND,
		A.CDPOS_CHNGIND,
		A.CDHDR_TCODE,
		A.CDPOS_TABKEY,
		A.CDPOS_VALUE_NEW,
		A.CDPOS_VALUE_OLD,
		A.TSTCT_TTEXT,
		A.ZF_CDPOS_VALUE,
		A.ZF_OLD_NEW_INDICATOR,

		LFA1_NAME1 AS LFA1_NAME1_CDPOS,
		LFA1_LAND1 AS LFA1_LAND1_CDPOS,
		LFA1_ERDAT AS LFA1_ERDAT_CDPOS,

		-- Update start date and time from IBAN VALID_FROM
		IIF( ISNULL(VALUE_NEW_VALID_FROM_IBAN,'') <>'' AND VALUE_NEW_VALID_FROM_IBAN > ZF_CDHDR_UDATE_START,
							VALUE_NEW_VALID_FROM_IBAN, ZF_CDHDR_UDATE_START ) AS ZF_CDHDR_UDATE_START,
		IIF( ISNULL(VALUE_NEW_VALID_FROM_IBAN,'') <>'' AND VALUE_NEW_VALID_FROM_IBAN > ZF_CDHDR_UDATE_START, 
							CONVERT(TIME, STUFF(STUFF('000000', 5, 0, ':'), 3, 0, ':')),  ZF_CDHDR_UTIME_START ) AS ZF_CDHDR_UTIME_START,	
		
		-- Update end date and time from deleted bank or deleted supplier
		IIF( ISNULL(CDHDR_UDATE_DEL_BANKN,'') <> '',  CDHDR_UDATE_DEL_BANKN
							, IIF( ISNULL(CDHDR_UDATE_DEL_LIFNR,'') <>'', CDHDR_UDATE_DEL_LIFNR, ZF_CDHDR_UDATE_END )  
					) AS ZF_CDHDR_UDATE_END,
		IIF(ISNULL(CDHDR_UTIME_DEL_BANKN,'') <>'', CDHDR_UTIME_DEL_BANKN
					, IIF(ISNULL(CDHDR_UTIME_DEL_LIFNR,'') <> '' , CDHDR_UTIME_DEL_LIFNR, ZF_CDHDR_UTIME_END ) 
					) AS ZF_CDHDR_UTIME_END

	INTO B24_23_CDPOS_CDHDR_TT_KRED_APPEND_INFO
	FROM B24_22_CDPOS_TT_KRED_APPEND A
		
	-- Add delete date for bank 
	LEFT JOIN 
		(
		SELECT 
			CDHDR_UDATE AS CDHDR_UDATE_DEL_BANKN,
			CDHDR_UTIME AS CDHDR_UTIME_DEL_BANKN,
			TRIM(IIF( ISNULL(CDPOS_VALUE_OLD, '') <> '', ZF_CDPOS_VALUE_OLD,	
					TRIM(SUBSTRING(CDPOS_TABKEY, LEN(CDPOS_TABKEY) - CHARINDEX(' ', REVERSE(CDPOS_TABKEY)) + 1, LEN(CDPOS_TABKEY)))   ) 
					) AS ZF_CDPOS_VALUE_BANKN_DEL_LFBK,			
			ROW_NUMBER () OVER (PARTITION BY ZF_CDPOS_VALUE_OLD, CDPOS_TABKEY ORDER BY ZF_CDPOS_VALUE_OLD, CDPOS_TABKEY) AS ZF_ROW_NUM
		FROM B24_21_CDPOS_CDHDR_TT_KRED_LFBK
		WHERE CDPOS_CHNGIND IN ('D','E') AND CDPOS_TABNAME = 'LFBK' AND CDPOS_FNAME IN ('KEY','BANKN','TABKEY')
		) AS B_DEL_LFBK
	ON A.ZF_CDPOS_VALUE = B_DEL_LFBK.ZF_CDPOS_VALUE_BANKN_DEL_LFBK
		AND B_DEL_LFBK.ZF_ROW_NUM = 1

	-- Add delete date for supplier (because if supplier deleted assuming all deleted)
	LEFT JOIN 
		(
		SELECT 
				CDPOS_OBJECTID,
				CDHDR_UDATE AS CDHDR_UDATE_DEL_LIFNR,
				CDHDR_UTIME AS CDHDR_UTIME_DEL_LIFNR,
				ROW_NUMBER() OVER (PARTITION BY  ZF_CDPOS_VALUE_OLD, CDPOS_TABKEY ORDER BY ZF_CDPOS_VALUE_OLD, CDPOS_TABKEY) AS ZF_ROW_NUM
		FROM B24_21_CDPOS_CDHDR_TT_KRED_LFBK
		WHERE CDPOS_CHNGIND IN ('D','E') AND CDPOS_TABNAME = 'LFA1' AND CDPOS_FNAME LIKE 'KEY'
		) AS C_KRED_DEL_LFA1
		ON A.CDPOS_OBJECTID = C_KRED_DEL_LFA1.CDPOS_OBJECTID
			AND C_KRED_DEL_LFA1.ZF_ROW_NUM = 1

	-- Add VALID_FROM from CDPOS IBAN
	LEFT JOIN 
		(
		SELECT 		
			CAST(CDPOS_VALUE_NEW AS DATE) AS VALUE_NEW_VALID_FROM_IBAN,
			TRIM(SUBSTRING(CDPOS_TABKEY, LEN(CDPOS_TABKEY) - CHARINDEX(' ', REVERSE(CDPOS_TABKEY)) + 1, LEN(CDPOS_TABKEY)))  AS ZF_CDPOS_BANKN,
			ROW_NUMBER () OVER (PARTITION BY CDPOS_TABKEY ORDER BY CDPOS_TABKEY) AS ZF_ROW_NUM		
		FROM A_CDPOS
		WHERE CDPOS_OBJECTCLAS LIKE 'IBAN' AND  CDPOS_CHNGIND LIKE 'U' 
			AND CDPOS_TABNAME = 'TIBAN' AND CDPOS_FNAME IN ('VALID_FROM')	
			) AS D_IBAN_VALID_FROM
		ON A.ZF_CDPOS_VALUE = D_IBAN_VALID_FROM.ZF_CDPOS_BANKN AND D_IBAN_VALID_FROM.ZF_ROW_NUM = 1
	
	-- Add the name, creation date and country of the supplier
	LEFT JOIN 
		(
		SELECT 
			LFA1_LIFNR,
			LFA1_NAME1,
			LFA1_ERDAT,
			LFA1_LAND1 
		FROM A_LFA1 ) AS A_LFA1
		ON A.CDPOS_OBJECTID = A_LFA1.LFA1_LIFNR

------------//	------------//	 ------------//			\\ ------------ \\ -------------- \\ --------------

	-- Step 2B - IBAN 
	-- -- Step 2B.1.
		-- Filter on changes for suppliers and 
		-- Add the change document header to the change document item

		EXEC SP_REMOVE_TABLES 'B24_24_CDPOS_CDHDR_TT_IBAN'

		SELECT 
				CDHDR_USERNAME, 
				CDPOS_OBJECTID,
				CDPOS_OBJECTCLAS,
				CDPOS_CHANGENR,
				V_USERNAME_NAME_TEXT,	
				DDFTX_SCRTEXT_L,	--field name
				DD02T_DDTEXT,		--table name
				CDHDR_UDATE,
				CONVERT(TIME, STUFF(STUFF(CDHDR_UTIME, 5, 0, ':'), 3, 0, ':') ) AS CDHDR_UTIME, -- Format Time to hh:mm:ss
				CDPOS_TABNAME,
				CDPOS_FNAME,
				CDHDR_CHANGE_IND,
				CDPOS_CHNGIND,
				CDHDR_TCODE,
				CDPOS_VALUE_NEW,
				CDPOS_VALUE_OLD,	
				CDPOS_TABKEY,
				TSTCT_TTEXT,
				--- Update values from VALUE_OLD and VALUE_NEW relating to bank
				--    - Default values for VALUE_OLD and VALUE_NEW to bank account from TABKEY
				--    - If not bank, default VALUE_OLD and VALUE_NEW
				CASE 
					WHEN CDPOS_CHNGIND = 'U' AND CDPOS_TABNAME = 'TIBAN' AND CDPOS_FNAME IN ('KEY','BANKN', 'IBAN') AND  ISNULL(CDPOS_VALUE_OLD,'') <>''
						THEN TRIM(REPLACE(CDPOS_VALUE_OLD , ' ','') ) 
						-- This method to get the Bank account in CDPOS TABKEY -- In this way, bank account in the last position of Tabkey
						-- For example: CDPOS_TABKEY= TIBAN_MANDT+TIBAN_BANKS+TIBAN_BANKL+TIBAN_BANKN+TIBAN_BKONT

						ELSE TRIM(SUBSTRING(CDPOS_TABKEY, LEN(CDPOS_TABKEY) - CHARINDEX(' ', REVERSE(CDPOS_TABKEY)) + 1, LEN(CDPOS_TABKEY))) 
				END AS ZF_CDPOS_VALUE_OLD,

				CASE 
					WHEN CDPOS_CHNGIND = 'U' AND CDPOS_TABNAME = 'TIBAN' AND CDPOS_FNAME IN ('KEY','BANKN', 'IBAN') AND ISNULL(CDPOS_VALUE_NEW,'') <>''
						THEN TRIM(REPLACE(CDPOS_VALUE_NEW , ' ','') ) 
					ELSE  TRIM(SUBSTRING(CDPOS_TABKEY, LEN(CDPOS_TABKEY) - CHARINDEX(' ', REVERSE(CDPOS_TABKEY)) + 1, LEN(CDPOS_TABKEY))) 
				END		AS ZF_CDPOS_VALUE_NEW					

		INTO B24_24_CDPOS_CDHDR_TT_IBAN
		FROM A_CDHDR A
		INNER JOIN ( SELECT *
			FROM A_CDPOS
			WHERE	( CDPOS_OBJECTCLAS LIKE  'IBAN' )
					AND ( CDPOS_TABNAME LIKE 'TIBAN')
					AND ( CDPOS_FNAME IN ('KEY','TABKEY','IBAN','BANKN')) 
			)  AS B
		
		ON		B.CDPOS_CHANGENR = A.CDHDR_CHANGENR
			   AND B.CDPOS_OBJECTID = A.CDHDR_OBJECTID
			   AND B.CDPOS_OBJECTCLAS = A.CDHDR_OBJECTCLAS 
	   
		LEFT JOIN A_V_USERNAME
			ON CDHDR_USERNAME=V_USERNAME_BNAME
		LEFT JOIN B00_DD02T_ENGLISH ON 
			CDPOS_TABNAME = B00_DD02T_ENGLISH.DD02T_TABNAME
		LEFT JOIN B00_DDFTX_ENGLISH ON 
				CDPOS_TABNAME = B00_DDFTX_ENGLISH.DDFTX_TABNAME
			AND CDPOS_FNAME = B00_DDFTX_ENGLISH.DDFTX_FIELDNAME

		LEFT JOIN B00_TSTCT ON 
				CDHDR_TCODE = TSTCT_TCODE


-- -- Step 2B.2. Append value old and value new
	--         - Create start and end date depending on if it is an update and new/old value
	--         - Create indicator of new or old: for join to payment transactions will only use new
	--         - Keep the CDPOS_VALUE_OLD and CDPOS_VALUE_NEW as well as the original change date/time for display of updates

	
	EXEC SP_REMOVE_TABLES 'B24_25_CDPOS_CDHDR_TT_IBAN_APPEND';

	SELECT 
		CDHDR_USERNAME, 
		CDPOS_OBJECTID,
		CDPOS_OBJECTCLAS,
		CDPOS_CHANGENR,
		V_USERNAME_NAME_TEXT,	
		DDFTX_SCRTEXT_L,	
		DD02T_DDTEXT,	
		CDHDR_UDATE,
		CDHDR_UTIME, 
		CDPOS_TABNAME,
		CDPOS_FNAME,
		CDHDR_CHANGE_IND,
		CDPOS_CHNGIND,
		CDHDR_TCODE,
		CDPOS_VALUE_NEW,
		CDPOS_VALUE_OLD,
		CDPOS_TABKEY,
		TSTCT_TTEXT,
		
		-- Date and time Start
		IIF((CDPOS_CHNGIND = 'U' AND LEFT(CDHDR_UTIME, 8) <> '00:00:00' ) OR CDPOS_CHNGIND IN ('I','J'),
            CDHDR_UDATE, DATEADD(DAY, -1, CDHDR_UDATE)) AS ZF_CDHDR_UDATE_START,		
        IIF(CDPOS_CHNGIND = 'U' AND LEFT(CDHDR_UTIME, 8) <> '00:00:00',
            DATEADD(MINUTE, -1, CDHDR_UTIME),  CDHDR_UTIME ) AS ZF_CDHDR_UTIME_START,      

		-- Date and time End (Date if the bank account is terminated)
        IIF(CDPOS_CHNGIND = 'U', CDHDR_UDATE, CONVERT(DATE, '20990101') ) AS ZF_CDHDR_UDATE_END,
        IIF(CDPOS_CHNGIND = 'U',
			CDHDR_UTIME, CONVERT(TIME, STUFF(STUFF('000000', 5, 0, ':'), 3, 0, ':')) ) AS ZF_CDHDR_UTIME_END,

		ZF_CDPOS_VALUE_OLD AS ZF_CDPOS_VALUE,
		'Old' AS ZF_OLD_NEW_INDICATOR
	
	INTO B24_25_CDPOS_CDHDR_TT_IBAN_APPEND

	FROM (	SELECT * 
			FROM B24_24_CDPOS_CDHDR_TT_IBAN 
			WHERE ISNULL(ZF_CDPOS_VALUE_OLD,'') <>'' 
				AND CDPOS_TABNAME = 'TIBAN' AND CDPOS_FNAME IN ('KEY','IBAN','BANKN') 
				) AS A
	UNION
	SELECT 
		CDHDR_USERNAME, 
		CDPOS_OBJECTID,
		CDPOS_OBJECTCLAS,
		CDPOS_CHANGENR,
		V_USERNAME_NAME_TEXT,	
		DDFTX_SCRTEXT_L,	
		DD02T_DDTEXT,	
		CDHDR_UDATE,
		CDHDR_UTIME, 
		CDPOS_TABNAME,
		CDPOS_FNAME,
		CDHDR_CHANGE_IND,
		CDPOS_CHNGIND,
		CDHDR_TCODE,
		CDPOS_TABKEY,
		CDPOS_VALUE_NEW,
		CDPOS_VALUE_OLD,
		TSTCT_TTEXT,
		
		-- Date and time Start
		CDHDR_UDATE AS ZF_CDHDR_UDATE_START,			
		CDHDR_UTIME AS ZF_CDHDR_UTIME_START,      
		-- Date and time End (Date if the bank account is terminated)
       CONVERT(DATE, '20990101') AS ZF_CDHDR_UDATE_END,
       CONVERT(TIME, STUFF(STUFF('000000' , 5, 0, ':'), 3, 0, ':')) AS ZF_CDHDR_UTIME_END,
		ZF_CDPOS_VALUE_NEW AS ZF_CDPOS_VALUE,
		'New' AS ZF_OLD_NEW_INDICATOR

	FROM (	SELECT * 
			FROM B24_24_CDPOS_CDHDR_TT_IBAN 
			WHERE ISNULL(ZF_CDPOS_VALUE_NEW,'') <> '' 
				AND CDPOS_TABNAME = 'TIBAN' AND CDPOS_FNAME IN ('KEY','IBAN','BANKN') 
			) AS B	

	-- -- Step 2B.3. Add useful fields
	--        - Update rule for start and end date
	--        - Add the delete date 
	--        - Update the start date to VALUE_FROM, if found
	--        - Add the supplier name, country key and creation date
	-- -- -- Add extra information for supplier
	-- -- -- - In case the supplier country and creation date were not obtained from CDPOS KRED,

	
	EXEC SP_REMOVE_TABLES 'B24_26_CDPOS_CDHDR_TT_IBAN_APPEND_ADD_INFO';	
	SELECT 
		A.CDHDR_USERNAME, 
		A.CDPOS_OBJECTID,
		A.CDPOS_OBJECTCLAS,
		A.CDPOS_CHANGENR,
		A.V_USERNAME_NAME_TEXT,	
		A.DDFTX_SCRTEXT_L,	
		A.DD02T_DDTEXT,	
		A.CDHDR_UDATE,
		A.CDHDR_UTIME, 
		A.CDPOS_TABNAME,
		A.CDPOS_FNAME,
		A.CDHDR_CHANGE_IND,
		A.CDPOS_CHNGIND,
		A.CDHDR_TCODE,
		A.CDPOS_TABKEY,
		A.CDPOS_VALUE_NEW,
		A.CDPOS_VALUE_OLD,
		A.TSTCT_TTEXT,
		A.ZF_CDPOS_VALUE,
		A.ZF_OLD_NEW_INDICATOR,

		IIF(ISNULL(CDPOS_OBJETID_LIFNR,'') <>'', CDPOS_OBJETID_LIFNR
			, IIF(ISNULL(CDPOS_VALUE_NEW_LIFNR,'') <>'', CDPOS_VALUE_NEW_LIFNR,  '' )	) AS ZF_CDPOS_LIFNR,
		IIF(ISNULL(LFA1_NAME1_CDPOS,'') <>'', LFA1_NAME1_CDPOS
			, IIF(ISNULL(LFA1_NAME1_CDPOS_NEW,'') <>'', LFA1_NAME1_CDPOS_NEW,  '' )	) AS LFA1_NAME1_CDPOS,
		IIF(ISNULL(LFA1_LAND1_CDPOS,'') <>'', LFA1_LAND1_CDPOS
			, IIF(ISNULL(LFA1_LAND1_CDPOS_NEW,'') <>'', LFA1_LAND1_CDPOS_NEW,  '' )	) AS LFA1_LAND1_CDPOS,
		IIF(ISNULL(LFA1_ERDAT_CDPOS,'') <>'', LFA1_ERDAT_CDPOS
			, IIF(ISNULL(LFA1_ERDAT_CDPOS_NEW,'') <>'', LFA1_ERDAT_CDPOS_NEW,  '' )	) AS LFA1_ERDAT_CDPOS,

		-- Update start date and time from IBAN VALID_FROM
		IIF( ISNULL(VALUE_NEW_VALID_FROM_IBAN,'') <>'' AND VALUE_NEW_VALID_FROM_IBAN > ZF_CDHDR_UDATE_START,
							VALUE_NEW_VALID_FROM_IBAN, ZF_CDHDR_UDATE_START ) AS ZF_CDHDR_UDATE_START,
		IIF( ISNULL(VALUE_NEW_VALID_FROM_IBAN,'') <>'' AND VALUE_NEW_VALID_FROM_IBAN > ZF_CDHDR_UDATE_START, 
							CONVERT(TIME, STUFF(STUFF('000000', 5, 0, ':'), 3, 0, ':')),  ZF_CDHDR_UTIME_START ) AS ZF_CDHDR_UTIME_START,	
		
		-- Update end date and time from deleted bank or deleted supplier
		IIF( ISNULL(CDHDR_UDATE_DEL_BANKN,'') <> '',  CDHDR_UDATE_DEL_BANKN, ZF_CDHDR_UDATE_END ) AS ZF_CDHDR_UDATE_END ,
		IIF(ISNULL(CDHDR_UTIME_DEL_BANKN,'') <>'', CDHDR_UTIME_DEL_BANKN, ZF_CDHDR_UTIME_END ) AS ZF_CDHDR_UTIME_END
			
	INTO B24_26_CDPOS_CDHDR_TT_IBAN_APPEND_ADD_INFO
	FROM B24_25_CDPOS_CDHDR_TT_IBAN_APPEND A
		
	-- Add delete date for bank 
	LEFT JOIN 
		(
		SELECT 
			CDHDR_UDATE AS CDHDR_UDATE_DEL_BANKN,
			CDHDR_UTIME AS CDHDR_UTIME_DEL_BANKN,
			TRIM(IIF( ISNULL(CDPOS_VALUE_OLD, '') <> '', ZF_CDPOS_VALUE_OLD, 
						TRIM(SUBSTRING(CDPOS_TABKEY, LEN(CDPOS_TABKEY) - CHARINDEX(' ', REVERSE(CDPOS_TABKEY)) + 1, LEN(CDPOS_TABKEY))) 
						) ) AS ZF_CDPOS_VALUE_BANKN_DEL_LFBK,		
			ROW_NUMBER () OVER (PARTITION BY ZF_CDPOS_VALUE_OLD, CDPOS_TABKEY ORDER BY ZF_CDPOS_VALUE_OLD, CDPOS_TABKEY) AS ZF_ROW_NUM
		FROM B24_24_CDPOS_CDHDR_TT_IBAN
		WHERE CDPOS_CHNGIND IN ('D','E') AND CDPOS_TABNAME = 'TIBAN' AND CDPOS_FNAME IN ('KEY','BANKN','IBAN')
		) AS B_DEL_LFBK
	ON A.ZF_CDPOS_VALUE = B_DEL_LFBK.ZF_CDPOS_VALUE_BANKN_DEL_LFBK
		AND B_DEL_LFBK.ZF_ROW_NUM = 1

	-- Add VALID_FROM from CDPOS IBAN 

	LEFT JOIN 
		(
		SELECT 		
			CAST(CDPOS_VALUE_NEW AS DATE) AS VALUE_NEW_VALID_FROM_IBAN,
			CDPOS_TABKEY,
			ROW_NUMBER () OVER (PARTITION BY CDPOS_TABKEY ORDER BY CDPOS_TABKEY) AS ZF_ROW_NUM		
		FROM A_CDPOS
		WHERE CDPOS_OBJECTCLAS LIKE 'IBAN' AND  CDPOS_CHNGIND LIKE 'U' 
			AND CDPOS_TABNAME = 'TIBAN' AND CDPOS_FNAME IN ('VALID_FROM')	
			) AS C_IBAN_VALID_FROM
		ON A.CDPOS_TABKEY = C_IBAN_VALID_FROM.CDPOS_TABKEY AND C_IBAN_VALID_FROM.ZF_ROW_NUM = 1

	-- Add Supplier information from KRED CDPOS

	LEFT JOIN 
		(
		SELECT 
			CDPOS_OBJECTID AS CDPOS_OBJETID_LIFNR,
			LFA1_NAME1_CDPOS,
			LFA1_LAND1_CDPOS,
			LFA1_ERDAT_CDPOS,
			ZF_CDPOS_VALUE,
			CDPOS_TABNAME,
			CDPOS_FNAME,
			ROW_NUMBER () OVER (PARTITION BY ZF_CDPOS_VALUE ORDER BY ZF_CDPOS_VALUE) AS ZF_ROW_NUM					
		FROM B24_23_CDPOS_CDHDR_TT_KRED_APPEND_INFO
		WHERE CDPOS_TABNAME = 'LFBK' AND CDPOS_FNAME IN ('KEY','TABKEY','BANKN')
		) AS D_KRED_APPEND_CUBE
		ON A.ZF_CDPOS_VALUE = D_KRED_APPEND_CUBE.ZF_CDPOS_VALUE AND D_KRED_APPEND_CUBE.ZF_ROW_NUM = 1

	-- In case supplier number is not found in KRED CDPOS, get it from VALUE_NEW in CDPOS IBAN 
	-- When FNAME = TABKEY => TIBAN_TABKEY = 'LFBK' => in Value of Tabkey get LIFNR

	LEFT JOIN  
		(
		SELECT
			CDPOS_VALUE_NEW AS CDPOS_VALUE_NEW_LIFNR,
			CDPOS_TABKEY,	
			ROW_NUMBER () OVER (PARTITION BY CDPOS_TABKEY ORDER BY CDPOS_TABKEY) AS ZF_ROW_NUM	
		FROM B24_19_TT_CDPOS_IBAN_GET_TIBAN_TABKEY
		WHERE CDPOS_FNAME IN ('TABKEY')
		) AS B24_19_TT_CDPOS_IBAN_GET_TIBAN_TABKEY
		ON A.CDPOS_TABKEY = B24_19_TT_CDPOS_IBAN_GET_TIBAN_TABKEY.CDPOS_TABKEY
			AND B24_19_TT_CDPOS_IBAN_GET_TIBAN_TABKEY.ZF_ROW_NUM = 1

	-- Add the supplier name, creation date and country, in case not already obtained
	LEFT JOIN 
		( SELECT 
				LFA1_LIFNR,
				LFA1_NAME1 AS LFA1_NAME1_CDPOS_NEW,
				LFA1_ERDAT AS LFA1_ERDAT_CDPOS_NEW,
				LFA1_LAND1 AS LFA1_LAND1_CDPOS_NEW
			FROM A_LFA1 ) AS A_LFA1
		ON B24_19_TT_CDPOS_IBAN_GET_TIBAN_TABKEY.CDPOS_VALUE_NEW_LIFNR = LFA1_LIFNR ;

	-- -- Step 2B.4. Add Delete date for supplier 
	-- -- -- - Update end date if supplier delete date found

	EXEC SP_REMOVE_TABLES 'B24_27_CDPOS_CDHDR_TT_IBAN_APPEND_CUBE' 
	SELECT 
		A.CDHDR_USERNAME, 
		A.CDPOS_OBJECTID,
		A.CDPOS_OBJECTCLAS,
		A.CDPOS_CHANGENR,
		A.V_USERNAME_NAME_TEXT,	
		A.DDFTX_SCRTEXT_L,	
		A.DD02T_DDTEXT,	
		A.CDHDR_UDATE,
		A.CDHDR_UTIME, 
		A.CDPOS_TABNAME,
		A.CDPOS_FNAME,
		A.CDHDR_CHANGE_IND,
		A.CDPOS_CHNGIND,
		A.CDHDR_TCODE,
		A.CDPOS_TABKEY,
		A.CDPOS_VALUE_NEW,
		A.CDPOS_VALUE_OLD,
		A.TSTCT_TTEXT,
		A.ZF_CDPOS_VALUE,
		A.ZF_OLD_NEW_INDICATOR,
		A.LFA1_NAME1_CDPOS,
		A.LFA1_LAND1_CDPOS,
		A.LFA1_ERDAT_CDPOS,
		A.ZF_CDHDR_UDATE_START,
		A.ZF_CDHDR_UTIME_START,
		A.ZF_CDPOS_LIFNR,
		-- Update end date and time from deleted supplier
		IIF(ISNULL(ZF_CDHDR_UDATE_END,'') = '' OR ZF_CDHDR_UDATE_END = '2099-01-01' , 
				IIF(ISNULL(CDHDR_UDATE_DEL_LIFNR,'') <> '', CDHDR_UDATE_DEL_LIFNR, ZF_CDHDR_UDATE_END) , ZF_CDHDR_UDATE_END) AS ZF_CDHDR_UDATE_END,
		IIF(ISNULL(ZF_CDHDR_UTIME_END,'') <>''  OR LEFT(ZF_CDHDR_UTIME_END,8) = '00:00:00' , 
				IIF(ISNULL(CDHDR_UTIME_DEL_LIFNR,'') <> '', CDHDR_UTIME_DEL_LIFNR, ZF_CDHDR_UTIME_END) , ZF_CDHDR_UTIME_END) AS ZF_CDHDR_UTIME_END
	
	INTO B24_27_CDPOS_CDHDR_TT_IBAN_APPEND_CUBE
	FROM B24_26_CDPOS_CDHDR_TT_IBAN_APPEND_ADD_INFO A
	LEFT JOIN 
		(	SELECT 
				CDPOS_OBJECTID,
				CDHDR_UDATE AS CDHDR_UDATE_DEL_LIFNR,
				CDHDR_UTIME AS CDHDR_UTIME_DEL_LIFNR,
				ROW_NUMBER () OVER (PARTITION BY CDPOS_VALUE_OLD, CDPOS_TABKEY ORDER BY  CDPOS_VALUE_OLD, CDPOS_TABKEY) AS ZF_ROW_NUM
			FROM B24_23_CDPOS_CDHDR_TT_KRED_APPEND_INFO
			WHERE CDPOS_CHNGIND IN ('D','E') 
				AND CDPOS_TABNAME = 'LFA1' AND CDPOS_FNAME IN ('KEY')		
		) AS B_KRED_APPEND_CUBE_INFO_DEL
		ON A.ZF_CDPOS_LIFNR = B_KRED_APPEND_CUBE_INFO_DEL.CDPOS_OBJECTID
			AND B_KRED_APPEND_CUBE_INFO_DEL.ZF_ROW_NUM = 1


--- Step 3: Merge CDPOS_IBAN and CDPOS_KRED for a Flip-Flop cube
	-- -- Step 3.1. Append the list of change documents relating to supplier master data
    --           to the list of change documents relating to IBAN, if 
    --           the change is not already found in the changes related to IBAN

	EXEC SP_REMOVE_TABLES 'B24_28_CDPOS_CDHDR_TT_UNION_KRED_IBAN' 
	SELECT 
		CDHDR_USERNAME, 
		CDPOS_OBJECTID,
		CDPOS_OBJECTCLAS,
		CDPOS_CHANGENR,
		V_USERNAME_NAME_TEXT,	
		CDHDR_UDATE,
		CDHDR_UTIME, 
		CDPOS_TABNAME,
		CDPOS_FNAME,
		CDHDR_CHANGE_IND,
		CDPOS_CHNGIND,
		CDHDR_TCODE,
		CDPOS_TABKEY,
		CDPOS_VALUE_NEW,
		CDPOS_VALUE_OLD,
		TSTCT_TTEXT,
		ZF_CDPOS_VALUE,
		ZF_OLD_NEW_INDICATOR,
		LFA1_NAME1_CDPOS,
		LFA1_LAND1_CDPOS,
		LFA1_ERDAT_CDPOS,
		ZF_CDHDR_UDATE_START,
		ZF_CDHDR_UTIME_START,
		ZF_CDPOS_LIFNR

	INTO B24_28_CDPOS_CDHDR_TT_UNION_KRED_IBAN
	FROM B24_27_CDPOS_CDHDR_TT_IBAN_APPEND_CUBE A
	WHERE ISNULL(ZF_CDPOS_VALUE ,'') <> '' AND ZF_CDHDR_UDATE_END='2099-01-01' 
	UNION 
	SELECT
		CDHDR_USERNAME, 
		CDPOS_OBJECTID,
		CDPOS_OBJECTCLAS,
		CDPOS_CHANGENR,
		V_USERNAME_NAME_TEXT,	
		CDHDR_UDATE,
		CDHDR_UTIME, 
		CDPOS_TABNAME,
		CDPOS_FNAME,
		CDHDR_CHANGE_IND,
		CDPOS_CHNGIND,
		CDHDR_TCODE,
		CDPOS_TABKEY,
		CDPOS_VALUE_NEW,
		CDPOS_VALUE_OLD,
		TSTCT_TTEXT,
		ZF_CDPOS_VALUE,
		ZF_OLD_NEW_INDICATOR,
		LFA1_NAME1_CDPOS,
		LFA1_LAND1_CDPOS,
		LFA1_ERDAT_CDPOS,
		ZF_CDHDR_UDATE_START,
		ZF_CDHDR_UTIME_START,
		CDPOS_OBJECTID AS ZF_CDPOS_LIFNR
	FROM B24_23_CDPOS_CDHDR_TT_KRED_APPEND_INFO B
    -- -- To the list of change documents relating to IBAN, if the change is not already found in the changes related to IBAN
	WHERE NOT EXISTS 
		(SELECT 
			ZF_CDPOS_LIFNR,
			ZF_CDPOS_VALUE, 
			ZF_CDHDR_UDATE_START,
			ZF_CDHDR_UTIME_START,
			CDPOS_CHNGIND
		FROM B24_27_CDPOS_CDHDR_TT_IBAN_APPEND_CUBE C
			WHERE B.CDPOS_OBJECTID = C.ZF_CDPOS_LIFNR
			AND B.ZF_CDPOS_VALUE = C.ZF_CDPOS_VALUE
			AND B.ZF_CDHDR_UDATE_START = C.ZF_CDHDR_UDATE_START
			AND B.ZF_CDHDR_UTIME_START = C.ZF_CDHDR_UTIME_START
			AND B.CDPOS_CHNGIND = C.CDPOS_CHNGIND )
		AND ISNULL(ZF_CDPOS_VALUE ,'') <> ''
		AND ZF_CDHDR_UDATE_END = '2099-01-01' 


	--- Step 3.2:  Remove duplication and add a row number 
	-- -- -- Remove duplication by the Supplier + Changes values + Date and Time Start and End
	-- -- -- Create ZF_ROW_NUM to order the changes based on each Supplier --> This value determines the change's position of the supplier order by date time.
		
	EXEC SP_REMOVE_TABLES 'B24_29_TT_CDPOS_UNION_KRED_IBAN_REMOV_DUP';	
	SELECT 	*,
			ROW_NUMBER() OVER (PARTITION BY ZF_CDPOS_LIFNR ORDER BY ZF_CDPOS_LIFNR, CDHDR_UDATE, CDHDR_UTIME) AS ZF_ROW_NUM 
			-- Create ZF_ROW_NUM to order the changes based on each Supplier

	INTO B24_29_TT_CDPOS_UNION_KRED_IBAN_REMOV_DUP
	FROM ( SELECT *,
			--- Create row number for removing duplication by the Supplier + Changes values + Date and Time Start and End (get ROW_NUM = 1)
			ROW_NUMBER() OVER (
			PARTITION BY ZF_CDPOS_LIFNR, ZF_CDPOS_VALUE, ZF_CDHDR_UDATE_START, ZF_CDHDR_UTIME_START
				ORDER BY ZF_CDPOS_LIFNR, ZF_CDPOS_VALUE, ZF_CDHDR_UDATE_START, ZF_CDHDR_UTIME_START
			) AS ZF_ROW_NUM_REMV_DUPL
			FROM B24_28_CDPOS_CDHDR_TT_UNION_KRED_IBAN ) AS B24_28_CDPOS_CDHDR_TT_UNION_KRED_IBAN
	-- Remove duplicate rows and the changes related to deleted supplier or deleted banks
	WHERE B24_28_CDPOS_CDHDR_TT_UNION_KRED_IBAN.ZF_ROW_NUM_REMV_DUPL = 1 AND ZF_CDPOS_LIFNR <> '' 


	-- Step 3.3/ Obtain a list of suppliers that change from bank account A and then change back to bank account A 
	-- All combinations of bank accounts and dates per supplier - By linking based on each supplier and change value (ZF_CDPOS_VALUE), to get the first change of bank account A and the date of change back to bank A. 
	-- -- In which, the first change date from A before the change back date. Add condition on change order according to ZF_ROW_NUM of first change < change back.
	-- -- Check ZF_CDPOS_VALUE of the first change = CDPOS_VALUE_NEW at change back

	EXEC SP_REMOVE_TABLES 'B24_30_TT_JN_1ST_CHG_AND_CHG_BACK';	

	SELECT 
		A.ZF_CDPOS_LIFNR AS ZF_CDPOS_LIFNR, 
		A.ZF_CDPOS_VALUE AS ZF_CDPOS_FLIP_FLOP_VALUE, -- Indicate it is the bank account used for flip-flop

		A.ZF_ROW_NUM AS ZF_ROW_NUM_1ST,
		A.CDPOS_CHANGENR AS CDPOS_CHANGENR_1ST,
		B.ZF_ROW_NUM AS ZF_ROW_NUM_CHG_BACK,
		B.CDPOS_CHANGENR AS CDPOS_CHANGENR_CHG_BACK,			
		A.CDPOS_CHNGIND AS ZF_CDPOS_CHNGIND_1ST,
		B.CDPOS_CHNGIND AS ZF_CDPOS_CHNGIND_CHG_BACK,
		A.ZF_CDHDR_UDATE_START AS ZF_CDHDR_UDATE_1ST, 
		A.ZF_CDHDR_UTIME_START AS ZF_CDHDR_UTIME_1ST, 
		B.ZF_CDHDR_UDATE_START AS ZF_CDHDR_UDATE_CHG_BACK, 
		B.ZF_CDHDR_UTIME_START AS ZF_CDHDR_UTIME_CHG_BACK
		
	INTO B24_30_TT_JN_1ST_CHG_AND_CHG_BACK
	FROM ( SELECT 
				ZF_CDPOS_LIFNR,
				ZF_CDPOS_VALUE,
				MIN(ZF_ROW_NUM) AS ZF_ROW_NUM,
				MIN(CDPOS_CHANGENR) AS CDPOS_CHANGENR,
				MIN(CDPOS_CHNGIND) AS CDPOS_CHNGIND,
				MIN(ZF_CDHDR_UDATE_START) AS ZF_CDHDR_UDATE_START,
				MIN(ZF_CDHDR_UTIME_START) AS ZF_CDHDR_UTIME_START
			FROM B24_29_TT_CDPOS_UNION_KRED_IBAN_REMOV_DUP
			GROUP BY ZF_CDPOS_LIFNR, ZF_CDPOS_VALUE ) AS A
    INNER JOIN ( SELECT 
				ZF_CDPOS_LIFNR,
				ZF_CDPOS_VALUE,
				MAX(ZF_ROW_NUM) AS ZF_ROW_NUM,
				MAX(CDPOS_CHANGENR) AS CDPOS_CHANGENR,
				MAX(CDPOS_CHNGIND) AS CDPOS_CHNGIND,
				MAX(ZF_CDHDR_UDATE_START) AS ZF_CDHDR_UDATE_START,
				MAX(ZF_CDHDR_UTIME_START) AS ZF_CDHDR_UTIME_START
			FROM B24_29_TT_CDPOS_UNION_KRED_IBAN_REMOV_DUP
			GROUP BY ZF_CDPOS_LIFNR, ZF_CDPOS_VALUE ) AS B
    ON A.ZF_CDPOS_LIFNR = B.ZF_CDPOS_LIFNR AND A.ZF_CDPOS_VALUE = B.ZF_CDPOS_VALUE
			
    WHERE	A.CDPOS_CHANGENR <> B.CDPOS_CHANGENR  	
			AND ( A.ZF_CDHDR_UDATE_START< B.ZF_CDHDR_UDATE_START OR (
						A.ZF_CDHDR_UDATE_START = B.ZF_CDHDR_UDATE_START AND A.ZF_CDHDR_UTIME_START < B.ZF_CDHDR_UTIME_START ) ) 
			--- The first change date from A before the change back date
			AND  B.ZF_ROW_NUM - A.ZF_ROW_NUM > 2


	-- Step 3.4/ Add Flip-flop values ??to the main cube table.

		ALTER TABLE B24_29_TT_CDPOS_UNION_KRED_IBAN_REMOV_DUP ADD ZF_CDPOS_FLIP_FLOP_VALUE NVARCHAR(150);

		--- Flagged changes documents within Flip-flop time by Supplier and ZF_CDPOS_VALUE
		UPDATE A
		SET ZF_CDPOS_FLIP_FLOP_VALUE = B.ZF_CDPOS_FLIP_FLOP_VALUE
		FROM B24_29_TT_CDPOS_UNION_KRED_IBAN_REMOV_DUP AS A
		INNER JOIN B24_30_TT_JN_1ST_CHG_AND_CHG_BACK B
		ON	A.CDPOS_OBJECTID = B.ZF_CDPOS_LIFNR 
			AND A.ZF_CDPOS_VALUE <> B.ZF_CDPOS_FLIP_FLOP_VALUE
			AND A.ZF_ROW_NUM > ZF_ROW_NUM_1ST
			AND A.ZF_ROW_NUM < ZF_ROW_NUM_CHG_BACK
		WHERE A.ZF_CDPOS_FLIP_FLOP_VALUE IS NULL

		--- Flagged changes documents of the 1st change for bank account A
		UPDATE A
		SET ZF_CDPOS_FLIP_FLOP_VALUE = B.ZF_CDPOS_FLIP_FLOP_VALUE
		FROM B24_29_TT_CDPOS_UNION_KRED_IBAN_REMOV_DUP AS A
		INNER JOIN B24_30_TT_JN_1ST_CHG_AND_CHG_BACK B
			ON A.ZF_CDPOS_LIFNR = B.ZF_CDPOS_LIFNR AND A.ZF_CDPOS_VALUE = B.ZF_CDPOS_FLIP_FLOP_VALUE 
				AND A.CDPOS_CHANGENR = B.CDPOS_CHANGENR_1ST
				AND A.ZF_ROW_NUM = B.ZF_ROW_NUM_1ST

		--- Flagged changes documents of the change back for bank account A
		UPDATE A
		SET ZF_CDPOS_FLIP_FLOP_VALUE = B.ZF_CDPOS_FLIP_FLOP_VALUE
		FROM B24_29_TT_CDPOS_UNION_KRED_IBAN_REMOV_DUP AS A
		INNER JOIN B24_30_TT_JN_1ST_CHG_AND_CHG_BACK B
			ON A.ZF_CDPOS_LIFNR = B.ZF_CDPOS_LIFNR AND A.ZF_CDPOS_VALUE = B.ZF_CDPOS_FLIP_FLOP_VALUE 
				AND A.ZF_ROW_NUM = B.ZF_ROW_NUM_CHG_BACK AND A.CDPOS_CHANGENR = B.CDPOS_CHANGENR_CHG_BACK


	-- Step 3.5/ From the append change documents table of IBAN and KRED, we found cases where the Flip-flop with ZF_CDPOS_FLIP_FLOP_VALUE is not empty
	-- --  And the number of changes relating to this flip-flop value of the supplier > 2. 
	-- -- -- For example: Supplier A has ZF_CDPOS_VALUE with Value 1 change to Value 2 then change back to Value 1. 
	-- -- -- So, to indicate a flip-flop flow, the number of rows for a supplier with ZF_CDPOS_FLIP_FLOP_VALUE must to > 2.
	-- -- To display this Flip-flop table, sort in order: ZF_CDPOS_LIFNR - ZF_CDPOS_FLIP_FLOP_VALUE - ZF_CDHDR_UDATE_START - ZF_CDHDR_UTIME_START

		EXEC SP_REMOVE_TABLES 'B24_31_IT_CDPOS_FLIP_FLOP_CASES';
		SELECT 
				A.*,
				B.ZF_CDHDR_UDATE_1ST,
				B.ZF_CDHDR_UTIME_1ST,
				B.ZF_CDHDR_UDATE_CHG_BACK,
				B.ZF_CDHDR_UTIME_CHG_BACK

		INTO B24_31_IT_CDPOS_FLIP_FLOP_CASES
		FROM 
			( SELECT *,
				COUNT (*) OVER (PARTITION BY ZF_CDPOS_LIFNR, ZF_CDPOS_FLIP_FLOP_VALUE ) AS ZF_DETIMERINE_FLIP_FLOP_FLOW 
			FROM B24_29_TT_CDPOS_UNION_KRED_IBAN_REMOV_DUP ) AS A

		LEFT JOIN (
					SELECT ZF_CDPOS_LIFNR,
							ZF_CDPOS_FLIP_FLOP_VALUE,
							MIN(ZF_CDHDR_UDATE_1ST) AS ZF_CDHDR_UDATE_1ST,
							MIN(ZF_CDHDR_UTIME_1ST) AS ZF_CDHDR_UTIME_1ST,
							MAX(ZF_CDHDR_UDATE_CHG_BACK) AS ZF_CDHDR_UDATE_CHG_BACK,
							MAX(ZF_CDHDR_UTIME_CHG_BACK) AS ZF_CDHDR_UTIME_CHG_BACK
					FROM B24_30_TT_JN_1ST_CHG_AND_CHG_BACK
					GROUP BY ZF_CDPOS_LIFNR, ZF_CDPOS_FLIP_FLOP_VALUE
				) AS B -- Get the first change and change back into the cube for supplier + Flip-flop value
			ON A.ZF_CDPOS_LIFNR = B.ZF_CDPOS_LIFNR
			AND A.ZF_CDPOS_FLIP_FLOP_VALUE = B.ZF_CDPOS_FLIP_FLOP_VALUE
			--- Filter to indicate it is a flip-flop flow
		WHERE A.ZF_CDPOS_FLIP_FLOP_VALUE IS NOT NULL AND ZF_DETIMERINE_FLIP_FLOP_FLOW > 2



--Step 4 Remove all the tt table
--EXEC SP_REMOVE_TABLES 'TEMP%'
--EXEC SP_REMOVE_TABLES '%_TT_%'
--Step 5 Rename the fields 
EXEC SP_RENAME_FIELD 'B24_02_',B24_02_IT_CDHDR_CDPOS_EINKBELEG
EXEC SP_RENAME_FIELD 'B24_04_',B24_04_IT_CDHDR_CDPOS_INCOMINGINVOICE
EXEC SP_RENAME_FIELD 'B24_06_', B24_06_IT_CDHDR_CDPOS_IBAN
EXEC SP_RENAME_FIELD 'B24_08_',B24_08_IT_CDHDR_CDPOS_KRED
EXEC SP_RENAME_FIELD 'B24_10_', B24_10_IT_CDHDR_CDPOS_BELEG 
EXEC SP_RENAME_FIELD 'B24_12_',B24_12_IT_REGUH_BANK
EXEC SP_RENAME_FIELD 'B24_17_',B24_17_IT_CHANGE_LFBK_INSERT_DEL
EXEC SP_RENAME_FIELD 'B24_02_',B24_02A_IT_CDHDR_CDPOS_PO_PRICE
EXEC SP_RENAME_FIELD 'B24_20_',B24_20_IT_REGUH_CDPOS_BANK_CHANGES
EXEC SP_RENAME_FIELD 'B24_31_',B24_31_IT_CDPOS_FLIP_FLOP_CASES





END
GO
