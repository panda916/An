USE [DIVA_MASTER_SCRIPT_S4HANA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--ALTER PROCEDURE [dbo].[B03_FIN_TRIAL_BALANCE]
CREATE     PROCEDURE [dbo].[script_B03_S001_FIN_TRIAL_BALANCE_SUMMARY_SIE]
WITH EXECUTE AS CALLER
AS

--DYNAMIC_SCRIPT_START

/*Purpose of the query:
- Create new cube for RTR :
-- Group by based on Fiscal year, Company code,  GL accounts and MONAT
-- calculated Movements and Ending balance for each month.
*/
/* Initiate the log */  
--Create database log table if it does not exist
IF OBJECT_ID('_DatabaseLogTable', 'U') IS NULL BEGIN CREATE TABLE [dbo].[_DatabaseLogTable] ([Database] nvarchar(max) NULL,[Object] nvarchar(max) NULL,[Object Type] nvarchar(max) NULL,[User] nvarchar(max) NULL,[Date] date NULL,[Time] time NULL,[Description] nvarchar(max) NULL,[Table] nvarchar(max),[Rows] int) END

--Log start of procedure
INSERT INTO [dbo].[_DatabaseLogTable] ([Database],[Object],[Object Type],[User],[Date],[Time],[Description],[Table],[Rows])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(date,GETDATE()),CONVERT(time,GETDATE()),'Procedure started',NULL,NULL


	/* Initialize parameters from globals table */
    DECLARE  
				@CURRENCY NVARCHAR(3)                 = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'currency')
				,@DATE1 NVARCHAR(MAX)                           = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'date1')
				,@DATE2 NVARCHAR(MAX)                           = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'date2')
				,@DOWNLOADDATE NVARCHAR(MAX)             = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'downloaddate')
				,@DATEFORMAT VARCHAR(3)             = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'dateformat')
				,@EXCHANGERATETYPE NVARCHAR(MAX)  = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'exchangeratetype')
				,@LANGUAGE1 NVARCHAR(3)                = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'language1')
				,@LANGUAGE2 NVARCHAR(3)                = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'language2')
				,@LIMIT_RECORDS INT                    = CAST((SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'LIMIT_RECORDS') AS INT)
				,@FISCAL_YEAR_FROM NVARCHAR(MAX)					= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'FISCAL_YEAR_FROM')
				,@FISCAL_YEAR_TO NVARCHAR(MAX)					= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'FISCAL_YEAR_TO')
                 SET DATEFORMAT @DATEFORMAT;

/*Change history comments*/



-- Step 1 / From B03_01_IT_FIN_TB cube we need to group by based on Company code, Fiscal year, GL account and MONAT.
-- calculated total movements value.

EXEC SP_DROPTABLE 	'B03_02_TT_TB_SUMMARY_TEMP' 

SELECT 
	B03_ACDOCA_RBUKRS, 
	B03_ACDOCA_RACCT,   
	B03_ACDOCA_RYEAR, 
	B03_ACDOCA_MONAT,
	SUM(B03_ZF_ACDOCA_HSL_TOT_MOV) AS B03_ZF_ACDOCA_HSL_TOT_MOV,
	SUM(B03_ZF_ACDOCA_HSL_TOT_MOV_CUC) AS B03_ZF_ACDOCA_HSL_TOT_MOV_CUC,
	SUM(B03_ZF_ACDOCA_KSL_TOT_MOV) AS B03_ZF_ACDOCA_KSL_TOT_MOV,
	SUM(B03_ZF_ACDOCA_OSL_TOT_MOV) AS B03_ZF_ACDOCA_OSL_TOT_MOV
INTO B03_02_TT_TB_SUMMARY_TEMP
FROM B03_01_IT_FIN_TB
GROUP BY B03_ACDOCA_RBUKRS, B03_ACDOCA_RACCT,   B03_ACDOCA_RYEAR, B03_ACDOCA_MONAT


-- Step 2 / From B03_02_TT_TB_SUMMARY_TEMP for each GL account, company code, fiscal year need to fill in full MONAT.

EXEC SP_DROPTABLE 	'B03_03_TT_TB_SUMMARY_FULL_MONAT'

SELECT *
INTO B03_03_TT_TB_SUMMARY_FULL_MONAT
FROM B03_02_TT_TB_SUMMARY_TEMP
UNION  -- Append
SELECT 
	B03_ACDOCA_RBUKRS, 
	B03_ACDOCA_RACCT,   
	B03_ACDOCA_RYEAR, 
	B03_ACDOCA_MONAT,
	0,0,0,0 -- Put 0 value.
FROM 
	(
		SELECT 
			DISTINCT 
				B03_ACDOCA_RBUKRS, 
				B03_ACDOCA_RACCT,   
				B03_ACDOCA_RYEAR, 
				B.B03_ACDOCA_MONAT
			FROM B03_02_TT_TB_SUMMARY_TEMP A , ( SELECT DISTINCT B03_ACDOCA_MONAT FROM B03_02_TT_TB_SUMMARY_TEMP ) AS B -- Get all monat value in ACDOCA table
			-- Cross join : Fill in full MONAT for each GL, Company code, etc
	) AS A
WHERE NOT EXISTS  -- With line not exists in B00_TB_TEMP table.
(
	SELECT 
		TOP 1 1 
	FROM B03_02_TT_TB_SUMMARY_TEMP
	WHERE  A.B03_ACDOCA_RYEAR+A.B03_ACDOCA_RBUKRS+A.B03_ACDOCA_RACCT+A.B03_ACDOCA_MONAT =
		   B03_ACDOCA_RYEAR+B03_ACDOCA_RBUKRS+B03_ACDOCA_RACCT+B03_ACDOCA_MONAT
)
		
-- Step 3 / Create ending balance field and MONAT text field in Qliksense.
-- Step 3.1  Create ending balance


-- 92232

EXEC SP_DROPTABLE 	'B03_04_IT_TB_SUMMARY_FULL'

SELECT 
	B03_ACDOCA_RACCT, 
	B03_ACDOCA_RYEAR, 
	B03_ACDOCA_RBUKRS, 
	B03_ACDOCA_MONAT, 
	CASE
		WHEN B03_ACDOCA_MONAT  = '00'                     THEN 'Opening'
		WHEN B03_ACDOCA_MONAT  = '01'                     THEN 'Apr'
		WHEN B03_ACDOCA_MONAT  = '02'                     THEN 'May'
		WHEN B03_ACDOCA_MONAT  = '03'                     THEN 'Jun'
		WHEN B03_ACDOCA_MONAT  = '04'                     THEN 'Jul'
		WHEN B03_ACDOCA_MONAT  = '05'                     THEN 'Aug'
		WHEN B03_ACDOCA_MONAT  = '06'                     THEN 'Sep'
		WHEN B03_ACDOCA_MONAT  = '07'                     THEN 'Oct'
		WHEN B03_ACDOCA_MONAT  = '08'                     THEN 'Nov'
		WHEN B03_ACDOCA_MONAT  = '09'                     THEN 'Dec'
		WHEN B03_ACDOCA_MONAT  = '10'                     THEN 'Jan'
		WHEN B03_ACDOCA_MONAT  = '11'                     THEN 'Feb'
		WHEN B03_ACDOCA_MONAT  = '12'                     THEN 'Mar'
		WHEN B03_ACDOCA_MONAT IN ('13','14','15','16') THEN 'Adj'
		ELSE                                                             '90_Unknown'
	END AS ZF_ACDOCA_POPER_MONTH,
	CASE	
				WHEN CAST(B03_ACDOCA_MONAT AS INT) = 0 THEN 'Open'
				WHEN CAST(B03_ACDOCA_MONAT AS INT) IN (1, 2, 3) THEN 'Q1'
				WHEN CAST(B03_ACDOCA_MONAT AS INT) IN (4, 5, 6) THEN 'Q2'
				WHEN CAST(B03_ACDOCA_MONAT AS INT) IN (7, 8, 9) THEN 'Q3'
				WHEN CAST(B03_ACDOCA_MONAT AS INT) IN (10, 11, 12) THEN 'Q4'
				ELSE 'Special Quater' 
	END AS ZF_ACDOCA_MONAT_FQ,
	B03_ACDOCA_RACCT+' - '+B02_SKAT_TXT50 as ZF_ACDOCA_RACCT_TEXT,
	GL_L1,
    GL_L2,
    GL_L3,
    GL_L4,
	TANGO_GL_ACCT,
	TANGO_ACCT,
	TANGO_ACCT_TXT,
	TANGO_ACCT_MAP_TXT,
	ZF_TANGO_20F_GROUP,
	ZF_TANGO_20F_MAPPING,
	SCOPE_BUSINESS_DMN_L1,
	SCOPE_BUSINESS_DMN_L2,
	SCOPE_SYSTEM,
	T001_BUTXT,
	B03_ZF_ACDOCA_HSL_TOT_MOV,
	B03_ZF_ACDOCA_HSL_TOT_MOV_CUC,
	B03_ZF_ACDOCA_KSL_TOT_MOV,
	B03_ZF_ACDOCA_OSL_TOT_MOV,
	SKA1_XBILK,
	IIF((isnull(SKA1_BILKT,'') = '' AND M_Tango_Account_Text = '') 
		OR (SKA1_BILKT = '' AND IsNull(M_Tango_Account_Text,'') = ''), '', SKA1_BILKT+'_'+M_Tango_Account_Text) AS ZF_TANGO_ACCOUNT,
	M_Tango_Account_Text,
	M_Tango_Hierarchy_L1,
	M_Tango_Hierarchy_L2,
	M_Tango_Hierarchy_L3,
	M_Tango_Hierarchy_L4,
	M_Tango_Hierarchy_L5,
	M_Tango_Hierarchy_L6,
	M_Org_Hierarchy_L1,
    M_Org_Hierarchy_L2,
    M_Org_Hierarchy_L3,
    M_Company_Type,
	T001_WAERS,
	SUM(B03_ZF_ACDOCA_HSL_TOT_MOV) OVER (PARTITION BY B03_ACDOCA_RACCT, B03_ACDOCA_RYEAR, B03_ACDOCA_RBUKRS 
	ORDER BY B03_ACDOCA_RACCT, B03_ACDOCA_RYEAR, B03_ACDOCA_RBUKRS , B03_ACDOCA_MONAT) AS B03_ZF_ACDOCA_HSL_TOT_END,

	SUM(B03_ZF_ACDOCA_HSL_TOT_MOV_CUC) OVER (PARTITION BY B03_ACDOCA_RACCT, B03_ACDOCA_RYEAR, B03_ACDOCA_RBUKRS 
	ORDER BY B03_ACDOCA_RACCT, B03_ACDOCA_RYEAR, B03_ACDOCA_RBUKRS , B03_ACDOCA_MONAT) AS B03_ZF_ACDOCA_HSL_TOT_END_CUC,

	SUM(B03_ZF_ACDOCA_KSL_TOT_MOV) OVER (PARTITION BY B03_ACDOCA_RACCT, B03_ACDOCA_RYEAR, B03_ACDOCA_RBUKRS 
	ORDER BY B03_ACDOCA_RACCT, B03_ACDOCA_RYEAR, B03_ACDOCA_RBUKRS , B03_ACDOCA_MONAT) AS B03_ZF_ACDOCA_KSL_TOT_END,

	SUM(B03_ZF_ACDOCA_OSL_TOT_MOV) OVER (PARTITION BY B03_ACDOCA_RACCT, B03_ACDOCA_RYEAR, B03_ACDOCA_RBUKRS 
	ORDER BY B03_ACDOCA_RACCT, B03_ACDOCA_RYEAR, B03_ACDOCA_RBUKRS , B03_ACDOCA_MONAT) AS B03_ZF_ACDOCA_OSL_TOT_END
INTO B03_04_IT_TB_SUMMARY_FULL
FROM B03_03_TT_TB_SUMMARY_FULL_MONAT
LEFT JOIN  B02_02_IT_FIN_COA -- Get GL test
ON  B02_02_IT_FIN_COA.B02_ACDOCA_RACCT = B03_ACDOCA_RACCT AND
	B02_02_IT_FIN_COA.B02_ACDOCA_RBUKRS = B03_ACDOCA_RBUKRS
LEFT JOIN AM_GL_HIERARCHY ON GL_ACCT = B03_ACDOCA_RACCT
LEFT JOIN AM_TANGO_20F_MAPPING ON TANGO_GL_ACCT = B03_ACDOCA_RACCT
INNER JOIN AM_SCOPE ON SCOPE_CMPNY_CODE = B03_ACDOCA_RBUKRS
INNER JOIN A_T001 ON B03_ACDOCA_RBUKRS = T001_BUKRS
LEFT JOIN A_SKA1 ON T001_KTOPL = A_SKA1.SKA1_KTOPL
AND B03_ACDOCA_RACCT = A_SKA1.SKA1_SAKNR
LEFT JOIN [MAP_Tango Hierarchy] A ON SKA1_BILKT = M_Tango_Account
LEFT JOIN [MAP_Org Hierarchy] B ON T001_BUKRS = M_Comapny_Code


-- Step 4 / Indicator: Account is a balance sheet account? cube for SAKURA dashboard.
EXEC SP_DROPTABLE 	'B03_05_IT_TB_SUMMARY_FILTER_SKA1_XBILK_X'

SELECT 
*
INTO B03_05_IT_TB_SUMMARY_FILTER_SKA1_XBILK_X
FROM B03_04_IT_TB_SUMMARY_FULL
WHERE SKA1_XBILK = 'X'



EXEC SP_REMOVE_TABLES '%_TT_%'
EXEC SP_UNNAME_FIELD 'B03_', 'B03_04_IT_TB_SUMMARY_FULL'
EXEC sp_RENAME_FIELD 'B03_04_', 'B03_04_IT_TB_SUMMARY_FULL'
EXEC SP_UNNAME_FIELD 'B03_', 'B03_05_IT_TB_SUMMARY_FILTER_SKA1_XBILK_X'
EXEC sp_RENAME_FIELD 'B03_05_', 'B03_05_IT_TB_SUMMARY_FILTER_SKA1_XBILK_X'

-- 92232

-- 92232

GO
