USE [DIVA_MASTER_SCRIPT_S4HANA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 

--ALTER PROC [dbo].[DV01_DIVAQLTB_VERSUS_SAPTB]
CREATE     PROC [dbo].[script_DV01_DIVAQLTB_VERSUS_SAPTB]
WITH EXECUTE AS CALLER
AS
--DYNAMIC_SCRIPT_START
BEGIN



/* Initiate the log */  
--Create database log table if it does not exist
IF OBJECT_ID('LOG_SP_EXECUTION', 'U') IS NULL BEGIN CREATE TABLE [DBO].[LOG_SP_EXECUTION] ([DATABASE] NVARCHAR(MAX) NULL,[OBJECT] NVARCHAR(MAX) NULL,[OBJECT_TYPE] NVARCHAR(MAX) NULL,[USER] NVARCHAR(MAX) NULL,[DATE] DATE NULL,[TIME] TIME NULL,[DESCRIPTION] NVARCHAR(MAX) NULL,[TABLE] NVARCHAR(MAX),[ROWS] INT) END

--Log start of procedure
INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Procedure started',NULL,NULL


/* Initialize parameters from globals table */

     DECLARE 	 
			 @CURRENCY NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'currency')
			,@DATE1 NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'date1')
			,@DATE2 NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'date2')
			,@DOWNLOADDATE NVARCHAR(MAX)		= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'downloaddate')
			,@DATEFORMAT VARCHAR(3)             = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'dateformat')
			,@EXCHANGERATETYPE NVARCHAR(MAX)	= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'exchangeratetype')
			,@LANGUAGE1 NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'language1')
			,@LANGUAGE2 NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'language2')
			,@YEAR NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'year')
			,@ID NVARCHAR(MAX)					= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'id')
			,@LIMIT_RECORDS INT		            = CAST((SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'LIMIT_RECORDS') AS INT)


/*Test mode*/

SET ROWCOUNT @LIMIT_RECORDS

/*Change history comments*/


/*
    Title            :  DV01: Data Validation dashboard 1
    Description      : Compares the SAP trial balance report to the DIVA SAP trial balance first pivot table
       --------------------------------------------------------------
    Update history
    --------------------------------------------------------------
    Date             |      Who |  Description
    21-07-2017             CW            Creation
	01-08-2018             NP            UPDATE
	01-10-2018             CW            Update 
*/


-- Step 1/ Set up the code that will enable message to be sent back to the user of the Java app
-- that decides to run the script
--CREATE log table TO RETURN RESULTS FOR USERS
-- Variables for user message for feedback
-- First two columns are used for SP_QlikNamingClassifier,
-- Third column is only one used for sending messages to user for progress of DV scripts


DECLARE @MSG NVARCHAR(MAX)
EXEC SP_DROPTABLE 'DV00_RT_USER_FEEDBACK_MESSAGE'
CREATE TABLE DV00_RT_USER_FEEDBACK_MESSAGE         
     (OLD_NAME NVARCHAR(MAX), NEW_NAME NVARCHAR(MAX), _LOG NVARCHAR(MAX))

-- The following code can be put wherever we want and whenever we want to send a message back to the user
-- that has pressed Java Upload app button for running this script.

--SET @MSG = '<Feedback message for user>' --print back status for users
--INSERT INTO DV00_RT_USER_FEEDBACK_MESSAGE VALUES('', '', @MSG)

-- Step 2/ Totals on data exported from DIVA dashboard
-- Calculate the total value per FY, Company, and GL account
-- At the same time, renaming with table name as prefix


EXECUTE SP_DROPTABLE 'DV01_01_TT_DIVAQLTB_TOT_BUKRS_GJAHR_HKONT'

SELECT
      DBO.SPLIT_STRING_POSITION_NTH_VALUE([Company Code],'-',1)  DIVAQLTB_COMPANY
	  ,[Fiscal year] DIVAQLTB_FY
      ,[G/L account]  DIVAQLTB_GL_ACCOUNT
	  ,[G/L account text] DIVAQLTB_GL_ACCOUNT_TXT
	  ,[Local currency] DIVAQLTB_CURRENCY_AMOUNT
      ,SUM(CAST([Opening balance] AS MONEY))  DIVAQLTB_OPEN_BAL
      ,SUM(CAST([TB debit movements] AS MONEY)) DIVAQLTB_DEBIT_MOV
      ,ABS(SUM(CAST([TB credit movements] AS MONEY))) DIVAQLTB_CREDIT_MOV
	  ,SUM(CAST([TB debit movements] AS MONEY) + CAST([TB credit movements] AS MONEY)) ZF_DIVAQLTB_NET_MOVEMENTS
      ,SUM(CAST([BAL value] AS MONEY))  DIVAQLTB_CLOSE_BAL
     
INTO  DV01_01_TT_DIVAQLTB_TOT_BUKRS_GJAHR_HKONT
  
FROM AQLIK_RTRTB_PIV1

-- Do not include totals lines from the pivot table, or lines without GL account
WHERE [G/L account] <> 'Totals' AND [G/L account] <> ''

GROUP BY
         [Company Code]
		 ,[Fiscal year]
         ,[G/L account]
	     ,[G/L account text]
	     ,[Local currency]


-- Step 3/
-- Calculate the total value per GL account for the SAP report
-- At the same time renaming with the SAP report table prefix

EXECUTE SP_DROPTABLE 'DV01_02_TT_SAPTB_TOT_BUKRS_GJAHR_HKONT'
EXEC SP_SAP_REPORT_FIELD_TO_STANDARD 'ASAP_SALR87012277'

SELECT
      RBUKRS  SAPTB_CO_CODE
     ,RYEAR  SAPTB_FY
     ,RACCT  SAPTB_GL_ACCNT
     ,TXT50  SAPTB_SHORT_TEXT
	 ,RHCUR SAPTB_RHCUR
     ,SUM(CAST(BALANCE_CARRY_FORWARD_CONVERTED AS money))  SAPTB_OPEN_BAL
	 ,SUM(CAST(BALANCE_PREV_PERIOD_CONVERTED AS money))  SAPTB_BAL_PREV_PERIODS
	 ,SUM(CAST(DEBIT_CONVERTED AS money))  SAPTB_DEBIT_MOV
	 ,SUM(CAST(CREDIT_CONVERTED AS money)) SAPTB_CREDIT_MOV
	 ,SUM(CAST(DEBIT_CONVERTED AS money) - CAST(CREDIT_CONVERTED AS money)) ZF_SAPTB_NET_MOVEMENTS
	 ,SUM(CAST(ACCUMULATED_BALANCE_CONVERTED AS money))  SAPTB_CLOSE_BAL
INTO
       DV01_02_TT_SAPTB_TOT_BUKRS_GJAHR_HKONT

FROM
       ASAP_SALR87012277

-- Do not include blank lines from the SAP report or lines without the GL account (sub-total lines)
GROUP BY
       RBUKRS
      ,RYEAR
      ,RACCT
      ,TXT50
	  ,RHCUR

	
--Step 4/
--Compare the total per GL account from DIVA QLIK data to the total per GL account from the SAP report


EXECUTE SP_DROPTABLE 'DV01_03_RT_COMP_DIVAQLTB_SAPTB'

SELECT
	  -- Key fields:
	  DIVAQLTB_COMPANY
      ,SAPTB_CO_CODE	  
	  ,DIVAQLTB_FY
	  ,SAPTB_FY
      -- String comparison field (CHECK field):
      ,DIVAQLTB_GL_ACCOUNT
      ,SAPTB_GL_ACCNT
	  ,DIVAQLTB_GL_ACCOUNT_TXT
	  ,SAPTB_SHORT_TEXT
	  ,DIVAQLTB_CURRENCY_AMOUNT
	  ,SAPTB_RHCUR
	  ,CASE 
	     WHEN ISNULL(DIVAQLTB_GL_ACCOUNT, '') = '' AND ISNULL(SAPTB_GL_ACCNT, '')<>'' THEN 'GL account in SAP not DIVA'
		 WHEN ISNULL(DIVAQLTB_GL_ACCOUNT, '') <> '' AND ISNULL(SAPTB_GL_ACCNT, '') = '' THEN 'GL account in DIVA not SAP'
		 WHEN ISNULL(DIVAQLTB_GL_ACCOUNT, '') <> '' AND ISNULL(SAPTB_GL_ACCNT, '') <> '' THEN 'GL account in DIVA and SAP'
		 ELSE 'Case not identified'
      END  ZF_CHECK_HKONT_IN_DIVAQLTB_AND_SAPTB
	  -- Numeric comparison field:
	  ,ZF_DIVAQLTB_NET_MOVEMENTS
	  ,ZF_SAPTB_NET_MOVEMENTS
      ,ISNULL(ZF_DIVAQLTB_NET_MOVEMENTS,0) - (ISNULL(ZF_SAPTB_NET_MOVEMENTS,0)) ZF_DIVAQLTB_NET_MINUS_SAPTB_NET

	  -- Other fields 
      ,DIVAQLTB_OPEN_BAL
      ,SAPTB_OPEN_BAL
      ,ISNULL(DIVAQLTB_OPEN_BAL, 0) - ISNULL(SAPTB_OPEN_BAL, 0) ZF_DIVAQLTB_OPEN_MINUS_SAPTB_OPEN
      ,DIVAQLTB_DEBIT_MOV
      ,SAPTB_DEBIT_MOV
	  ,ISNULL(DIVAQLTB_DEBIT_MOV, 0) - ISNULL(SAPTB_DEBIT_MOV,0) ZF_DIVAQLTB_DEBIT_MINUS_SAPTB_DEBIT
      ,DIVAQLTB_CREDIT_MOV
      ,SAPTB_CREDIT_MOV
      ,ISNULL(DIVAQLTB_CREDIT_MOV,0) - ISNULL(SAPTB_CREDIT_MOV, 0) ZF_DIVAQLTB_CREDIT_MINUS_SAPTB_CREDIT	  
      ,DIVAQLTB_CLOSE_BAL
      ,SAPTB_CLOSE_BAL
	  ,ISNULL(DIVAQLTB_CLOSE_BAL,0) - ISNULL(SAPTB_CLOSE_BAL,0)  ZF_DIVAQLTB_CLOSE_MINUS_SAPTB_CLOSE	  
INTO DV01_03_RT_COMP_DIVAQLTB_SAPTB

FROM DV01_01_TT_DIVAQLTB_TOT_BUKRS_GJAHR_HKONT
 
  
FULL OUTER JOIN DV01_02_TT_SAPTB_TOT_BUKRS_GJAHR_HKONT
	ON  DIVAQLTB_COMPANY = SAPTB_CO_CODE
	AND DIVAQLTB_FY = SAPTB_FY
	AND dbo.REMOVE_LEADING_ZEROES(DIVAQLTB_GL_ACCOUNT) = dbo.REMOVE_LEADING_ZEROES(SAPTB_GL_ACCNT)


--Step 5/
--Split the comparison into two tables so that we can be able to filter them separately on the QLIK dashboard

-- Step 5.1: QLIK full table

EXEC SP_DROPTABLE 'DV01_04_RT_FULL_DIVAQLTB'

SELECT * 
	,CONCAT(DIVAQLTB_COMPANY,'|',DIVAQLTB_FY,'|',DIVAQLTB_GL_ACCOUNT)    ZF_DIVAQLTB_JOIN_KEY
	  
INTO DV01_04_RT_FULL_DIVAQLTB

FROM DV01_03_RT_COMP_DIVAQLTB_SAPTB

WHERE DIVAQLTB_COMPANY IS NOT NULL

-- 5.2 Create DV01_05_RT_FULL_SAPTB

EXEC SP_DROPTABLE 'DV01_05_RT_FULL_SAPTB'

SELECT *

	,CONCAT(SAPTB_CO_CODE,'|',SAPTB_FY,'|',SAPTB_GL_ACCNT) ZF_SAPTB_JOIN_KEY
	

INTO DV01_05_RT_FULL_SAPTB

FROM DV01_03_RT_COMP_DIVAQLTB_SAPTB
 
WHERE SAPTB_CO_CODE IS NOT NULL


--Step 6/
--Split the comparison into two discrepancy tables so that we can filter them separately

-- 6.1/ QLIK discrepancy table 

EXEC SP_DROPTABLE 'DV01_06_RT_DISC_DIVAQLTB'

SELECT * 
	,CONCAT(DIVAQLTB_COMPANY,'|',DIVAQLTB_FY,'|',DIVAQLTB_GL_ACCOUNT)    ZF_DIVAQLTB_JOIN_KEY

INTO DV01_06_RT_DISC_DIVAQLTB

FROM DV01_03_RT_COMP_DIVAQLTB_SAPTB

WHERE 
		(ABS(ZF_DIVAQLTB_NET_MINUS_SAPTB_NET)>10 OR 
		ZF_CHECK_HKONT_IN_DIVAQLTB_AND_SAPTB = 'GL account in DIVA not SAP' OR ZF_CHECK_HKONT_IN_DIVAQLTB_AND_SAPTB = 'Case not identified')
		AND NOT(
		ABS(ZF_DIVAQLTB_NET_MINUS_SAPTB_NET)>10 AND 
		ZF_CHECK_HKONT_IN_DIVAQLTB_AND_SAPTB = 'GL account in SAP not DIVA')

--
-- 6.2/ SAP discrepancy table

EXEC SP_DROPTABLE 'DV01_07_RT_DISC_SAPTB'


SELECT *

	,CONCAT(SAPTB_CO_CODE,'|',SAPTB_FY,'|',SAPTB_GL_ACCNT) ZF_SAPTB_JOIN_KEY

INTO DV01_07_RT_DISC_SAPTB

FROM DV01_03_RT_COMP_DIVAQLTB_SAPTB

WHERE 
		(ABS(ZF_DIVAQLTB_NET_MINUS_SAPTB_NET)>10 OR 
		ZF_CHECK_HKONT_IN_DIVAQLTB_AND_SAPTB = 'GL account in SAP not DIVA' OR ZF_CHECK_HKONT_IN_DIVAQLTB_AND_SAPTB = 'Case not identified')
		AND NOT(
		ABS(ZF_DIVAQLTB_NET_MINUS_SAPTB_NET)>10 AND 
		ZF_CHECK_HKONT_IN_DIVAQLTB_AND_SAPTB = 'GL account in DIVA not SAP')

		
-- Step 7/ User feedback message 

	INSERT INTO DV00_RT_USER_FEEDBACK_MESSAGE VALUES('', '', 'DV01_QLIK_TB_VS_SAP_SALR87012277')
		
--Step 8/ Delete temporary tables

--Step 9/ Rename fields for QLIK

EXEC SP_RENAME_FIELD 'DV01A_', 'DV01_03_RT_COMP_DIVAQLTB_SAPTB'
EXEC SP_RENAME_FIELD 'DV01B_', 'DV01_04_RT_FULL_DIVAQLTB'
EXEC SP_RENAME_FIELD 'DV01C_', 'DV01_05_RT_FULL_SAPTB'
EXEC SP_RENAME_FIELD 'DV01D_', 'DV01_06_RT_DISC_DIVAQLTB'
EXEC SP_RENAME_FIELD 'DV01E_', 'DV01_07_RT_DISC_SAPTB'

-- Log cube creation


INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Cube completed','DV01_03_RT_COMP_DIVAQLTB_SAPTB',(SELECT COUNT(*) FROM DV01_03_RT_COMP_DIVAQLTB_SAPTB)
INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Cube completed','DV01_04_RT_FULL_DIVAQLTB',(SELECT COUNT(*) FROM DV01_04_RT_FULL_DIVAQLTB)
INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Cube completed','DV01_05_RT_FULL_SAPTB',(SELECT COUNT(*) FROM DV01_05_RT_FULL_SAPTB)
INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Cube completed','DV01_06_RT_DISC_DIVAQLTB',(SELECT COUNT(*) FROM DV01_06_RT_DISC_DIVAQLTB) 
INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Cube completed','DV01_07_RT_DISC_SAPTB',(SELECT COUNT(*) FROM DV01_07_RT_DISC_SAPTB) 

/* log end of procedure*/


INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Procedure finished',NULL,NULL
END

GO
