USE [DIVA_MASTER_SCRIPT_S4HANA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       PROCEDURE [dbo].[script_FR06_CHANGE_CLEARING_DATE]
--ALTER PROCEDURE [dbo].[FR06_CHANGE_CLEARING_DATE]
WITH EXECUTE AS CALLER
AS

--DYNAMIC_SCRIPT_START

/*
      Title        :  FR06_CHANGE_CLEARING_DATE

      ----------------------------------------------------\----------
      Update history
      --------------------------------------------------------------
      Date			| Who |  Description

	  01-09-2018	  NP     Changing clearing date of financial documents
	  25-09-2018	  CW     Updates to naming and addition of mapping tables 
	  24-03-2022	 Thuan	 Remove MANDT field in join

*/

/* Initiate the log */
--Create database log table if it does not exist
IF OBJECT_ID('LOG_SP_EXECUTION', 'U') IS NULL BEGIN CREATE TABLE [DBO].[LOG_SP_EXECUTION] ([DATABASE] NVARCHAR(MAX) NULL,[OBJECT] NVARCHAR(MAX) NULL,[OBJECT_TYPE] NVARCHAR(MAX) NULL,[USER] NVARCHAR(MAX) NULL,[DATE] DATE NULL,[TIME] TIME NULL,[DESCRIPTION] NVARCHAR(MAX) NULL,[TABLE] NVARCHAR(MAX),[ROWS] INT) END

--Log start of procedure
INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Procedure started',NULL,NULL

	/* Initialize parameters from globals table */
    DECLARE  
				@CURRENCY NVARCHAR(3)                 = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'currency')
				,@DATE1 NVARCHAR(MAX)                           = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'date1')
				,@DATE2 NVARCHAR(MAX)                           = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'date2')
				,@DOWNLOADDATE NVARCHAR(MAX)             = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'downloaddate')
				,@DATEFORMAT VARCHAR(3)             = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'dateformat')
				,@EXCHANGERATETYPE NVARCHAR(MAX)  = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'exchangeratetype')
				,@LANGUAGE1 NVARCHAR(3)                = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'language1')
				,@LANGUAGE2 NVARCHAR(3)                = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'language2')
				,@LIMIT_RECORDS INT                    = CAST((SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'LIMIT_RECORDS') AS INT)
				,@FISCAL_YEAR_FROM NVARCHAR(MAX)					= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'FISCAL_YEAR_FROM')
				,@FISCAL_YEAR_TO NVARCHAR(MAX)					= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'FISCAL_YEAR_TO')
                 SET DATEFORMAT @DATEFORMAT;


/*Test mode*/

SET ROWCOUNT @LIMIT_RECORDS


-- Step 0:Make the CDHDR and CDPOS tables unique (without the TABKEY field)
-- Restrict to only updates, within the date period, and changes relating to clearing date field and changes only relating to finance documents
-- Restrict to those that are only for the company codes in scope

	EXEC SP_DROPTABLE 'FR06_00_TT_CDHDR_CDPOS'
	SELECT DISTINCT
		CDPOS_MANDANT,
		CDHDR_MANDANT,
		CDPOS_CHANGENR,
		CDPOS_OBJECTCLAS,
		CONVERT(DATETIME, IIF(CDPOS_VALUE_OLD = '00000000', '19000101', CDPOS_VALUE_OLD), 112) CDPOS_VALUE_OLD,
		CONVERT(DATETIME, IIF(CDPOS_VALUE_NEW = '00000000', '19000101', CDPOS_VALUE_NEW), 112) CDPOS_VALUE_NEW, --IIF(CDPOS_VALUE_NEW='00000000','',CDPOS_VALUE_NEW) CDPOS_VALUE_NEW, --CONVERT(DATETIME, CDPOS_VALUE_NEW, 112) CDPOS_VALUE_NEW,
		CDPOS_CHNGIND,
		CDPOS_TABNAME,
		CDPOS_FNAME,
		CDHDR_OBJECTID,
		CDHDR_UDATE,
		CDHDR_UTIME,
		CDHDR_USERNAME,
		CDHDR_TCODE,
		SCOPE_SYSTEM
	INTO FR06_00_TT_CDHDR_CDPOS
	FROM A_CDHDR
	-- Add information from CDPOS
	INNER JOIN A_CDPOS
    ON  CDHDR_OBJECTCLAS = CDPOS_OBJECTCLAS AND
	  	CDHDR_OBJECTID =   CDPOS_OBJECTID AND
	  	CDHDR_CHANGENR =   CDPOS_CHANGENR

	-- Restrict to the mandate in scope and the company codes in scope
	INNER JOIN AM_SCOPE ON 
		SUBSTRING(CDHDR_OBJECTID, 4, 4) = SCOPE_CMPNY_CODE

	--Restrict to changes relating to clearing date
	WHERE CDPOS_FNAME = 'AUGDT' AND 

	-- Restrict to document changes
	CDPOS_OBJECTCLAS IN ('BELEGR', 'BELEG') AND 

	--Restrict to fiscal year in the period 		
	(SUBSTRING(CDHDR_OBJECTID, 18, 4)) BETWEEN YEAR(@date1) AND YEAR(@date2) AND 

	--Restrict to updates only
	CDPOS_CHNGIND = 'U'



--Step 1: Select the relevant change document information
--        Add fields concering company code, document number and fiscal year
--        Add useful information from text description tables
--        Include only:
--          - changes relating to the companies in scope from AM_SCOPE
--          - changes relating to clearing date,
--          - changes relating to  documents,
--          - that are within the date range from AM_GLOBALS

	EXEC SP_DROPTABLE 'FR06_01_TT_CDHDR_CDPOS'
    SELECT
		 CDHDR_MANDANT
		,CDPOS_CHANGENR
		,CDPOS_OBJECTCLAS
		,CDHDR_OBJECTID
		,SUBSTRING(CDHDR_OBJECTID, 4, 4) AS ZF_CDHDR_OBJID_COMP_CODE
		,SUBSTRING(CDHDR_OBJECTID, 8, 10) AS ZF_CDHDR_OBJID_DOC_NR
		,SUBSTRING(CDHDR_OBJECTID, 18, 4) AS ZF_CDHDR_OBJID_FISCAL_YEAR
		,CDPOS_VALUE_OLD
		,CDPOS_VALUE_NEW

        -- Change indicator
		,CDPOS_CHNGIND
		--Add description of change indicator
        ,CASE (CDPOS_CHNGIND)
            WHEN 'I' THEN 'Insert'
            WHEN 'U' THEN 'Update'
            WHEN 'E' THEN 'Delete (single field)'
            WHEN 'D' THEN 'Delete'
        END ZF_CDPOS_CHNGIND_TEXT
		
		-- Date the change was made
		,CDHDR_UDATE
		,CDHDR_UTIME
		,CAST(CAST(CDHDR_UDATE AS VARCHAR) + ' ' + LEFT(CDHDR_UDATE, 2) + ':' + SUBSTRING(CAST(CDHDR_UDATE AS NVARCHAR(MAX)), 3, 2) + ':' + RIGHT(CDHDR_UDATE,2) AS DATETIME) ZF_CDHDR_UDATETIME
		,LEFT(CDHDR_UDATE,7) ZF_CDHDR_UDATE_CYM
		--Fiscal year relating to the change
		,CAST(YEAR(CDHDR_UDATE) + ISNULL(T009B_RELJR, 0) AS VARCHAR (4)) ZF_CDHDR_UDATE_RELJR_FY  
		-- Fiscal period relating to the change
		,CASE
			WHEN ISNULL(T009B_PERIV, '') <> '' THEN DBO.ADD_LEADING_ZEROES(T009B_POPER)
			ELSE DBO.ADD_LEADING_ZEROES(MONTH(CDHDR_UDATE))
		END ZF_T009B_POPER_CDHDR_UDATE_FP
		-- Fiscal quarter relating to the change 
		,CASE 
			WHEN T009B_POPER IN ('1','2','3') THEN 'Q1'
			WHEN T009B_POPER IN ('4','5','6') THEN 'Q2'
			WHEN T009B_POPER IN ('7','8','9') THEN 'Q3'
			WHEN T009B_POPER IN ('10','11','12') THEN 'Q4'
			WHEN DBO.ADD_LEADING_ZEROES(MONTH(CDHDR_UDATE)) IN ('01', '02', '03') THEN 'Q1'
			WHEN DBO.ADD_LEADING_ZEROES(MONTH(CDHDR_UDATE)) IN ('04', '05', '06') THEN 'Q2'
			WHEN DBO.ADD_LEADING_ZEROES(MONTH(CDHDR_UDATE)) IN ('07', '08', '09') THEN 'Q3'
			WHEN DBO.ADD_LEADING_ZEROES(MONTH(CDHDR_UDATE)) IN ('10', '11', '12') THEN 'Q4'
			ELSE 'unable to classify'
		END ZF_T009B_POPER_CDHDR_UDATE_FQ

		-- Table and field information
		,CDPOS_TABNAME
		-- Add table name
		,DD02T_DDTEXT
		,CDPOS_FNAME
	     -- Add field name 
        ,DDFTX_SCRTEXT_L

		-- Information concerning the user that made the change
		,CDHDR_USERNAME
		,V_USERNAME_NAME_TEXT
		,USR02_USTYP
		,DD07T_DDTEXT ZF_DD07T_DDTEXT_CHG

		-- Information concerning the transaction used to make the change
		,CDHDR_TCODE
		,TSTCT_TTEXT
		--,SCOPE_BUSINESS_DMN_L1
		--,SCOPE_BUSINESS_DMN_L2
		SCOPE_SYSTEM

	INTO FR06_01_TT_CDHDR_CDPOS
	FROM FR06_00_TT_CDHDR_CDPOS


	-- Fiscal period concerning the date of the change
	-- Get the T001_PERIV value so that we know which offset is to be used for FY and FP
	LEFT JOIN A_T001
    ON  (SUBSTRING(CDHDR_OBJECTID, 4, 4) = T001_BUKRS) 
	-- Get the offset for FY and FP for the month of the change
	LEFT JOIN B00_T009B
	ON (A_T001.T001_PERIV = T009B_PERIV) AND
	   MONTH(CDHDR_UDATE) = T009B_BUMON
	--Add table name text information
    LEFT JOIN B00_DD02T_ENGLISH ON 
		CDPOS_TABNAME = B00_DD02T_ENGLISH.DD02T_TABNAME
	--Add field name text information
    LEFT JOIN B00_DDFTX_ENGLISH ON 
         CDPOS_TABNAME = B00_DDFTX_ENGLISH.DDFTX_TABNAME
        AND CDPOS_FNAME = B00_DDFTX_ENGLISH.DDFTX_FIELDNAME
	--Add name of the user that made the change
    LEFT JOIN A_V_USERNAME ON
		CDHDR_USERNAME = A_V_USERNAME.V_USERNAME_BNAME 
	--Add type for the user that made the change
    LEFT JOIN A_USR02 ON
		CDHDR_USERNAME = A_USR02.USR02_BNAME
	--Add description for the type of the user that made the change
	LEFT JOIN B00_DD07T_XUUSTYP_ENGLISH ON 
	    A_USR02.USR02_USTYP = B00_DD07T_XUUSTYP_ENGLISH.DD07T_DOMVALUE_L
   --Add description for the transaction code used to make the change
   LEFT JOIN B00_TSTCT ON 
		TSTCT_TCODE = CDHDR_TCODE

	-- Create an index to increase performance
	CREATE NONCLUSTERED INDEX    FR06_01_TT_CDHDR_CDPOS_NON_CLUSTERED_INDEX
			ON FR06_01_TT_CDHDR_CDPOS (CDHDR_MANDANT,ZF_CDHDR_OBJID_COMP_CODE,ZF_CDHDR_OBJID_FISCAL_YEAR,ZF_CDHDR_OBJID_DOC_NR);


--step 2: Create summary table from the AP cube in order to be able to later add:
---       Indicator that the journal entry is related to AP
---       Total AP value

	EXEC SP_DROPTABLE 'FR06_02_TT_B11_TOT_PER_JE'

	SELECT
		 B11B_ACDOCA_RCLNT
		,B11B_ACDOCA_RBUKRS
		,B11B_ACDOCA_GJAHR
		,B11B_ACDOCA_BELNR
		,SUM(B11B_ZF_ACDOCA_HSL_S_CUC) B11B_ZF_ACDOCA_HSL_S_CUC
		,SUM(B11B_ZF_ACDOCA_KSL_S) B11B_ZF_ACDOCA_KSL_S
		,SUM(B11B_ZF_ACDOCA_OSL_S) B11B_ZF_ACDOCA_OSL_S
		,SUM(B11B_ZF_ACDOCA_HSL_S) B11B_ZF_ACDOCA_HSL_S
	INTO FR06_02_TT_B11_TOT_PER_JE
	FROM B11_04_IT_PTP_APA 
	GROUP BY
		B11B_ACDOCA_RCLNT
		,B11B_ACDOCA_RBUKRS
		,B11B_ACDOCA_GJAHR
		,B11B_ACDOCA_BELNR
		
	-- Create indexes to boost performance in the join
	EXEC SP_CREATE_INDEX 'FR06_02_TT_B11_TOT_PER_JE', 'B11_INDEX', 'B11B_ACDOCA_RCLNT,B11B_ACDOCA_RBUKRS,B11B_ACDOCA_GJAHR,B11B_ACDOCA_BELNR'

--Step 3 Create summary table from the AR cube in order to be able to later add:
---       Indicator that the journal entry is related to AR
---       Total AR value

	EXEC SP_DROPTABLE 'FR06_03_TT_B14_TOT_PER_JE'
	 
	SELECT
		 B14_ACDOCA_RCLNT
		,B14_ACDOCA_RBUKRS
		,B14_ACDOCA_GJAHR
		,B14_ACDOCA_BELNR
		,SUM(B14_ZF_ACDOCA_HSL_S) B14_ZF_ACDOCA_HSL_S
		,SUM(B14_ZF_ACDOCA_KSL_S) B14_KSL_KSL
		,SUM(B14_ZF_ACDOCA_OSL_S) B14_KSL_OSL
		,SUM(B14_ZF_ACDOCA_HSL_S_CUC) B14_ZF_ACDOCA_HSL_S_CUC
	INTO FR06_03_TT_B14_TOT_PER_JE
	FROM B14_06_IT_ARE 
	GROUP BY
	     B14_ACDOCA_RCLNT
		,B14_ACDOCA_RBUKRS
		,B14_ACDOCA_GJAHR
		,B14_ACDOCA_BELNR
		
	-- Create indexes to boost performance in the join
	EXEC SP_CREATE_INDEX 'FR06_03_TT_B14_TOT_PER_JE', 'B14_INDEX', 'B14_ACDOCA_RCLNT,B14_ACDOCA_RBUKRS,B14_ACDOCA_GJAHR,B14_ACDOCA_BELNR'

--step 4: Create summary table from the GL cube in order to be able to later add:
---       Indicator that the journal entry is related to AP
---       Total AP value

	EXEC SP_DROPTABLE 'FR06_04_TT_B04_TOT_PER_JE'

	SELECT
		 B04_GL_ACDOCA_RCLNT
		,B04_GL_ACDOCA_RBUKRS
		,B04_GL_ACDOCA_GJAHR
		,B04_GL_ACDOCA_BELNR
		,MAX(B04_GL_ZF_ENTRY_TYPE) B04_GL_ZF_ENTRY_TYPE
		,SUM(B04_GL_ZF_ACDOCA_HSL_S_CUC) B04_GL_ZF_ACDOCA_HSL_S_CUC
		,SUM(B04_GL_ZF_ACDOCA_KSL_S) B04_GL_ZF_ACDOCA_KSL_S
		,SUM(B04_GL_ZF_ACDOCA_OSL_S) B04_GL_ZF_ACDOCA_OSL_S
		,SUM(B04_GL_ZF_ACDOCA_HSL_S) B04_GL_ZF_ACDOCA_HSL_S
	INTO FR06_04_TT_B04_TOT_PER_JE
	FROM B04_08_IT_FIN_GL 
	GROUP BY
		 B04_GL_ACDOCA_RCLNT
		,B04_GL_ACDOCA_RBUKRS
		,B04_GL_ACDOCA_GJAHR
		,B04_GL_ACDOCA_BELNR

	-- Create indexes to boost performance in the join
	EXEC SP_CREATE_INDEX 'FR06_04_TT_B04_TOT_PER_JE', 'B04_INDEX', 'B04_GL_ACDOCA_RCLNT,B04_GL_ACDOCA_RBUKRS,B04_GL_ACDOCA_GJAHR,B04_GL_ACDOCA_BELNR'


--Step 5 Create summary table from the manual journal entries cube in order to be able to later add:
---       Flag that the journal entry is manual or automatic


EXEC SP_DROPTABLE 'FR06_05_TT_B04_MJE_NUMS'

	SELECT DISTINCT B04_GL_ACDOCA_RBUKRS, B04_GL_ACDOCA_GJAHR, B04_GL_ACDOCA_BELNR 
			INTO FR06_05_TT_B04_MJE_NUMS FROM B04_08_IT_FIN_GL WHERE B04_GL_ZF_ENTRY_TYPE = 'manual' AND (B04_GL_ACDOCA_KOART in ('K','D'))


--Step 6 Add the AP, AR, GL and Manual journal entry information to the list of changes 

	EXEC SP_DROPTABLE 'FR06_06_TT_ADD_AP_AR_MJE_INFO'
	SELECT FR06_01_TT_CDHDR_CDPOS.*
		,IIF(CDPOS_FNAME = 'AUGDT', CONVERT(DATETIME,CONVERT(INT,CAST(CDPOS_VALUE_NEW AS FLOAT))), NULL) ZF_CDPOS_VALUE_NEW_DATE
		,@currency GLOBAL_CURRENCY
		,T001_WAERS
		-- Add a flag to indicate the type of journal entry
		,CASE
			WHEN B11B_ACDOCA_BELNR IS NOT NULL THEN 'AP'
			WHEN B14_ACDOCA_BELNR IS NOT NULL THEN 'AR'
			WHEN B04_GL_ACDOCA_BELNR IS NOT NULL THEN 'GL'
		END ZF_JOURNAL_TYPE
		,CASE
			WHEN B11B_ACDOCA_BELNR IS NOT NULL THEN B11B_ZF_ACDOCA_HSL_S
			WHEN B14_ACDOCA_BELNR IS NOT NULL THEN B14_ZF_ACDOCA_HSL_S
			WHEN B04_GL_ACDOCA_BELNR IS NOT NULL THEN B04_GL_ZF_ACDOCA_HSL_S
		END ZF_ACDOCA_HSL_S
		,CASE
			WHEN B11B_ACDOCA_BELNR IS NOT NULL THEN B11B_ZF_ACDOCA_HSL_S_CUC
			WHEN B14_ACDOCA_BELNR IS NOT NULL THEN B14_ZF_ACDOCA_HSL_S_CUC
			WHEN B04_GL_ACDOCA_BELNR IS NOT NULL THEN B04_GL_ZF_ACDOCA_HSL_S_CUC
		END ZF_ACDOCA_HSL_S_CUC
		,B04_GL_ZF_ENTRY_TYPE ZF_ENTRY_TYPE
	INTO FR06_06_TT_ADD_AP_AR_MJE_INFO

	FROM FR06_01_TT_CDHDR_CDPOS
	LEFT JOIN A_T001 ON T001_BUKRS = ZF_CDHDR_OBJID_COMP_CODE
	-- Get indicator of AP journal entry and value per journal entry
	LEFT JOIN FR06_02_TT_B11_TOT_PER_JE  ON
    B11B_ACDOCA_RBUKRS = ZF_CDHDR_OBJID_COMP_CODE AND
	B11B_ACDOCA_GJAHR = ZF_CDHDR_OBJID_FISCAL_YEAR AND
    B11B_ACDOCA_BELNR = ZF_CDHDR_OBJID_DOC_NR  

	-- Get indicator of GL journal entry and value per journal entry
	LEFT JOIN FR06_04_TT_B04_TOT_PER_JE  ON
    B04_GL_ACDOCA_RBUKRS = ZF_CDHDR_OBJID_COMP_CODE AND
	B04_GL_ACDOCA_GJAHR = ZF_CDHDR_OBJID_FISCAL_YEAR AND
    B04_GL_ACDOCA_BELNR = ZF_CDHDR_OBJID_DOC_NR 

	-- Get indicator of AR journal entry and value per journal entry
    LEFT JOIN FR06_03_TT_B14_TOT_PER_JE ON 
    B14_ACDOCA_RBUKRS = ZF_CDHDR_OBJID_COMP_CODE AND
	B14_ACDOCA_GJAHR = ZF_CDHDR_OBJID_FISCAL_YEAR AND
    B14_ACDOCA_BELNR = ZF_CDHDR_OBJID_DOC_NR

	DELETE FR06_04_TT_B04_TOT_PER_JE
	WHERE NOT EXISTS(SELECT * FROM FR06_06_TT_ADD_AP_AR_MJE_INFO
						WHERE 	B04_GL_ACDOCA_RBUKRS = ZF_CDHDR_OBJID_COMP_CODE AND
								B04_GL_ACDOCA_GJAHR = ZF_CDHDR_OBJID_FISCAL_YEAR AND
								B04_GL_ACDOCA_BELNR = ZF_CDHDR_OBJID_DOC_NR AND
								ZF_JOURNAL_TYPE = 'GL')
								
	DELETE FR06_02_TT_B11_TOT_PER_JE
	WHERE NOT EXISTS(SELECT * FROM FR06_06_TT_ADD_AP_AR_MJE_INFO
						WHERE 	B11B_ACDOCA_RBUKRS = ZF_CDHDR_OBJID_COMP_CODE AND
								B11B_ACDOCA_GJAHR = ZF_CDHDR_OBJID_FISCAL_YEAR AND
								B11B_ACDOCA_BELNR = ZF_CDHDR_OBJID_DOC_NR  AND
								ZF_JOURNAL_TYPE = 'AP')
								
	DELETE FR06_03_TT_B14_TOT_PER_JE
	WHERE NOT EXISTS(SELECT * FROM FR06_06_TT_ADD_AP_AR_MJE_INFO
						WHERE 	B14_ACDOCA_RBUKRS = ZF_CDHDR_OBJID_COMP_CODE AND
								B14_ACDOCA_GJAHR = ZF_CDHDR_OBJID_FISCAL_YEAR AND
								B14_ACDOCA_BELNR = ZF_CDHDR_OBJID_DOC_NR AND
								ZF_JOURNAL_TYPE = 'AR')
--step 7: Add:
--        Extract only fields required in final table (to avoid using wrong ones in Qlik)
--        Flag for the journal type
--        Flag for the entry type 
EXEC SP_DROPTABLE 'FR06_07_RT_CLEARING_DATE_CHANGES'
	SELECT *
	INTO FR06_07_RT_CLEARING_DATE_CHANGES
	FROM FR06_06_TT_ADD_AP_AR_MJE_INFO

-- Step 8/ Add a mapping table for supplier information per journal entry
--          (Sometimes more than one suppleir per journal entry number)
    EXEC SP_DROPTABLE 'FR06_08_RT_AP_SUPP_MAPP_TABLE'
	SELECT *
	INTO FR06_08_RT_AP_SUPP_MAPP_TABLE
	FROM B11_04_IT_PTP_APA
	WHERE EXISTS(SELECT * FROM FR06_06_TT_ADD_AP_AR_MJE_INFO
					WHERE ZF_JOURNAL_TYPE = 'AP'
					AND ZF_CDHDR_OBJID_COMP_CODE + ZF_CDHDR_OBJID_FISCAL_YEAR + ZF_CDHDR_OBJID_DOC_NR = B11B_ACDOCA_RBUKRS + B11B_ACDOCA_GJAHR + B11B_ACDOCA_BELNR)


-- Step 9/ Add a mapping table for customer information per journal entry 
--          (Sometimes more than one customer per journal entry number)
    EXEC SP_DROPTABLE 'FR06_09_RT_AR_CUST_MAPP_TABLE'	
	SELECT *
	INTO FR06_09_RT_AR_CUST_MAPP_TABLE
	FROM B14_06_IT_ARE
	WHERE EXISTS(SELECT * FROM FR06_06_TT_ADD_AP_AR_MJE_INFO
					WHERE ZF_JOURNAL_TYPE = 'AR'
					AND ZF_CDHDR_OBJID_COMP_CODE + ZF_CDHDR_OBJID_FISCAL_YEAR + ZF_CDHDR_OBJID_DOC_NR = B14_ACDOCA_RBUKRS + B14_ACDOCA_GJAHR + B14_ACDOCA_BELNR)

-- Step 10/ Add a mapping table for customer information per journal entry 
--          (Sometimes more than one customer per journal entry number)
    EXEC SP_DROPTABLE 'FR06_10_RT_GL_MAP_TABLE'	
	SELECT *
	INTO FR06_10_RT_GL_MAP_TABLE
	FROM B04_08_IT_FIN_GL
	WHERE EXISTS(SELECT * FROM FR06_06_TT_ADD_AP_AR_MJE_INFO
					WHERE ZF_JOURNAL_TYPE = 'GL'
					AND ZF_CDHDR_OBJID_COMP_CODE + ZF_CDHDR_OBJID_FISCAL_YEAR + ZF_CDHDR_OBJID_DOC_NR = B04_GL_ACDOCA_RBUKRS + B04_GL_ACDOCA_GJAHR + B04_GL_ACDOCA_BELNR)

	
-- Step 11 Remove prefixes 

EXEC SP_UNNAME_FIELD 'B11B_', 'FR06_07_RT_CLEARING_DATE_CHANGES'
EXEC SP_UNNAME_FIELD 'B14_', 'FR06_07_RT_CLEARING_DATE_CHANGES'

EXEC SP_UNNAME_FIELD 'B11B_', 'FR06_08_RT_AP_SUPP_MAPP_TABLE'
EXEC SP_UNNAME_FIELD 'B14_', 'FR06_09_RT_AR_CUST_MAPP_TABLE'
EXEC SP_UNNAME_FIELD 'B04_', 'FR06_10_RT_GL_MAP_TABLE'

-- Step 12 Add prefixes for this test 

EXEC SP_RENAME_FIELD 'FR06_', 'FR06_07_RT_CLEARING_DATE_CHANGES'
EXEC SP_RENAME_FIELD 'FR06B_', 'FR06_08_RT_AP_SUPP_MAPP_TABLE'
EXEC SP_RENAME_FIELD 'FR06C_', 'FR06_09_RT_AR_CUST_MAPP_TABLE'
EXEC SP_RENAME_FIELD 'FR06D_', 'FR06_10_RT_GL_MAP_TABLE'


/* log end of procedure*/
INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(date,GETDATE()),CONVERT(time,GETDATE()),'Procedure finished',NULL,NULL
GO
