USE [DIVA_MASTER_SCRIPT_S4HANA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE      PROC [dbo].[script_B32_BANK_CHANGE]

AS
--DYNAMIC_SCRIPT_START
/*  Change history comments
	Update history 
	-------------------------------------------------------
	Date            | Who   |  Description 
	--  03-11-2022	| Thuan	| Create bank change script for S4 system
	--
*/

--Step 1: join the CDHDR with CDPOS and add filters to get relevant changes to LFBK, TIBAN/IBAN table

	EXEC SP_REMOVE_TABLES 'B32%TT%'

	EXEC SP_DROPTABLE 'B32_01_TT_CDHDR_CDPOS'

	SELECT *,

	IIF(B.CDPOS_CHNGIND <> 'U', DBO.TRIM(REVERSE(SUBSTRING(REVERSE(B.CDPOS_TABKEY), 1, CHARINDEX(' ', REVERSE(B.CDPOS_TABKEY))))), '') ZF_LAST_KEY_CHANGE,
	IIF(B.CDPOS_CHNGIND <> 'U', 

	DBO.TRIM(REPLACE(B.CDPOS_TABKEY, DBO.TRIM(REVERSE(SUBSTRING(REVERSE(B.CDPOS_TABKEY), 1, CHARINDEX(' ', REVERSE(B.CDPOS_TABKEY))))),'')), '') ZF_ORIGINAL_KEY_CHANGE,

	CDPOS_OBJECTCLAS + CDPOS_OBJECTID + CDPOS_CHANGENR + CDPOS_TABNAME + CDPOS_FNAME + CDPOS_TABKEY + CDPOS_CHNGIND AS ZF_CHANGE_ID,
    IIF(CDPOS_TABNAME IN ('IBAN','LFBK', 'LFA1', 'KNA1'), SUBSTRING(CDPOS_TABKEY, 4, 10), NULL) AS ZF_CUSTOMER_SUPPLIER_KEY
	INTO B32_01_TT_CDHDR_CDPOS
	FROM A_CDHDR A
		INNER JOIN A_CDPOS B ON B.CDPOS_CHANGENR = A.CDHDR_CHANGENR
							AND B.CDPOS_OBJECTID = A.CDHDR_OBJECTID
							AND B.CDPOS_OBJECTCLAS = A.CDHDR_OBJECTCLAS
	WHERE CDPOS_TABNAME IN ('LFBK', 'TIBAN', 'IBAN', 'LFA1', 'KNA1') AND CDHDR_OBJECTID <> ''


	--Step 2: create a scope table that contain all change cases with both delete and insert.
	EXEC SP_DROPTABLE 'B32_02_TT_CDHDR_CDPOS_LFBK_SCOPE'
	SELECT DISTINCT A.CDHDR_OBJECTID, A.CDHDR_CHANGENR, A.CDHDR_OBJECTCLAS 
	INTO B32_02_TT_CDHDR_CDPOS_LFBK_SCOPE
	FROM B32_01_TT_CDHDR_CDPOS A
	WHERE CDPOS_CHNGIND = 'I'
		AND CDPOS_FNAME = 'KEY'
		AND EXISTS(SELECT * FROM B32_01_TT_CDHDR_CDPOS B WHERE A.CDHDR_OBJECTCLAS = B.CDHDR_OBJECTCLAS
			AND A.CDHDR_OBJECTID = B.CDHDR_OBJECTID
			AND A.ZF_ORIGINAL_KEY_CHANGE = B.ZF_ORIGINAL_KEY_CHANGE
			AND A.CDPOS_TABNAME = B.CDPOS_TABNAME
			AND B.CDPOS_CHNGIND IN ('D', 'E'))


--Step 2: create the LFBK flipflop scope table
/* A flipflop change in LFBK should have:
- Another change that relevant to the old one, with the same object class, object ID, key change, table name
- When applying changes to key field in LFBK, SAP will remove the old one (CDPOS CHNGIND = D or E) before inserting new one.

*/
	EXEC SP_DROPTABLE 'B32_03_TT_CDHDR_CDPOS_LFBK_FLIPFLOP_SCOPE'
	SELECT DISTINCT A.*
	INTO B32_03_TT_CDHDR_CDPOS_LFBK_FLIPFLOP_SCOPE
	FROM B32_01_TT_CDHDR_CDPOS A
	INNER JOIN B32_02_TT_CDHDR_CDPOS_LFBK_SCOPE B ON B.CDHDR_CHANGENR = A.CDHDR_CHANGENR
													AND B.CDHDR_OBJECTCLAS = B.CDHDR_OBJECTCLAS
													AND B.CDHDR_OBJECTID = B.CDHDR_OBJECTID
	WHERE A.CDPOS_TABNAME = 'LFBK'
	ORDER BY A.CDHDR_OBJECTID, A.CDHDR_CHANGENR, A.CDHDR_OBJECTCLAS


-- Step 3: Combine two events (inserting new bank # and delete these bank # into one line) change.
-- because when users change or delete key fields, SAP will update and 
	EXEC SP_DROPTABLE 'B32_04_TT_CDHDR_CDPOS_SCOPE_VALUE_OLD_NEW_COMBINED'
	SELECT DISTINCT A.*,
	A.ZF_LAST_KEY_CHANGE ZF_VALUE_NEW,
	B.ZF_LAST_KEY_CHANGE ZF_VALUE_OLD

	INTO B32_04_TT_CDHDR_CDPOS_SCOPE_VALUE_OLD_NEW_COMBINED
	FROM B32_03_TT_CDHDR_CDPOS_LFBK_FLIPFLOP_SCOPE A
	LEFT JOIN B32_03_TT_CDHDR_CDPOS_LFBK_FLIPFLOP_SCOPE B ON A.CDHDR_OBJECTCLAS = B.CDHDR_OBJECTCLAS
															AND A.CDHDR_OBJECTID = B.CDHDR_OBJECTID
															AND A.CDHDR_CHANGENR = B.CDHDR_CHANGENR
															AND A.CDPOS_TABNAME = B.CDPOS_TABNAME
															AND B.CDPOS_FNAME <> 'KEY' AND B.CDPOS_CHNGIND = 'E'
	WHERE A.CDPOS_CHNGIND = 'I' AND A.ZF_LAST_KEY_CHANGE <> B.ZF_LAST_KEY_CHANGE


-- Step 4: from the combined result above, perform a normal with the table itself to get flipflop cases (old value of table 1 should be the new change value of table 2)
	EXEC SP_DROPTABLE 'B32_05_TT_CDHD_CDPOS_LFBK_FLIPFLOP'
	SELECT DISTINCT 
	'LFBK_FLIPFLOP' ZF_CASE_TYPE,

	A.ZF_CHANGE_ID,
	B.ZF_CHANGE_ID ZF_CHANGE_ID_2,
	A.CDHDR_OBJECTID,

	A.CDHDR_CHANGENR,
	B.CDHDR_CHANGENR ZF_CDHDR_CHANGENR_2,
	A.CDHDR_UDATE ZF_CDHDR_UDATE_1,
	A.CDHDR_UTIME ZF_CDHDR_UTIME_1,
	B.CDHDR_UDATE ZF_CDHDR_UDATE_2,
	B.CDHDR_UTIME ZF_CDHDR_UTIME_2,

	A.ZF_VALUE_OLD ZF_VALUE_OLD_1,
	A.ZF_VALUE_NEW ZF_VALUE_NEW_1,

	B.ZF_VALUE_OLD ZF_VALUE_OLD_2, 
	B.ZF_VALUE_NEW ZF_VALUE_NEW_2,


	DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) ZF_DATE_DIFF,

	CASE
		WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 0 THEN '0 day'
		WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 1 THEN '1 day'
		WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 10 THEN '2 - 10 days'
		WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 30 THEN '11 - 30 days'
		WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 60 THEN '31 - 60 days'
		WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 180 THEN '3 - 6 months'
		WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 360 THEN '6 - 12 months'
		WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) >= 360 THEN '> 1 years'
	END ZF_DATE_DIFF_BUCKET,
	SUBSTRING(A.CDPOS_TABKEY, 4, 10) ZF_LIFNR_1,
	DBO.TRIM(SUBSTRING(A.CDPOS_TABKEY, 14, LEN(A.CDPOS_TABKEY)- 14)) ZF_BANK_DETAIL

	INTO B32_05_TT_CDHD_CDPOS_LFBK_FLIPFLOP
	FROM B32_04_TT_CDHDR_CDPOS_SCOPE_VALUE_OLD_NEW_COMBINED A
	INNER JOIN B32_04_TT_CDHDR_CDPOS_SCOPE_VALUE_OLD_NEW_COMBINED B ON A.CDHDR_OBJECTCLAS = B.CDHDR_OBJECTCLAS 
														AND A.CDHDR_OBJECTID = B.CDHDR_OBJECTID
														AND A.CDPOS_TABNAME = B.CDPOS_TABNAME 
														AND A.CDPOS_FNAME = B.CDPOS_FNAME 
														AND A.ZF_VALUE_OLD = B.ZF_VALUE_NEW
														AND A.CDPOS_CHANGENR < B.CDPOS_CHANGENR



-- Step 5: Create a table to store all LFBK flipflop cases
-- This table will manage many to many relation ship, in case that users want to get all relevant data from original table, including all the lines between two change session.
	EXEC SP_DROPTABLE 'B32_05B_IT_CDHD_CDPOS_RELEVANT_CASES_MAPPING'
	CREATE TABLE B32_05B_IT_CDHD_CDPOS_RELEVANT_CASES_MAPPING
	(
		ZF_CASE_TYPE NVARCHAR(200),
		ZF_CHANGE_ID NVARCHAR(200),
		ZF_CHANGE_ID_KEY_DETAIL NVARCHAR(200),
		ZF_LIFNR_1 NVARCHAR(50)
	)


-- Step 6: Insert all result to above table
	INSERT INTO B32_05B_IT_CDHD_CDPOS_RELEVANT_CASES_MAPPING
	-- Insert all the original change
	SELECT DISTINCT
	ZF_CASE_TYPE,
	ZF_CHANGE_ID,
	ZF_CHANGE_ID,
	ZF_LIFNR_1
	FROM B32_05_TT_CDHD_CDPOS_LFBK_FLIPFLOP A
	UNION
	-- Insert all 2nd change (changing back to the bank account of the original)
	SELECT DISTINCT
	ZF_CASE_TYPE,
	ZF_CHANGE_ID,
	ZF_CHANGE_ID_2,
	ZF_LIFNR_1
	FROM B32_05_TT_CDHD_CDPOS_LFBK_FLIPFLOP B
	UNION
	-- Insert all subsequent events between change #1 and #2
	SELECT DISTINCT
	ZF_CASE_TYPE,
	B.ZF_CHANGE_ID,
	C.ZF_CHANGE_ID ,
	ZF_LIFNR_1
	FROM B32_05_TT_CDHD_CDPOS_LFBK_FLIPFLOP B
	LEFT JOIN B32_01_TT_CDHDR_CDPOS C ON B.CDHDR_OBJECTID = C.CDHDR_OBJECTID
							AND C.CDHDR_UDATE BETWEEN B.ZF_CDHDR_UDATE_1 AND B.ZF_CDHDR_UDATE_2




-- IBAN flipflop cases
-- Step 4: join the table with itself to get flipflop cases (old value of table 1 should be the new change value of table 2)
	EXEC SP_DROPTABLE 'B32_06_TT_CDHDR_CDPOS_IBAN'
	SELECT DISTINCT
	IIF(B.CDPOS_CHNGIND IN ('E', 'D'), 'IBAN DELETE', 'IBAN_FLIPFLOP') ZF_CASE_TYPE,
	A.ZF_CHANGE_ID ZF_CHANGE_ID,
	B.ZF_CHANGE_ID ZF_CHANGE_ID_2,

	A.CDHDR_CHANGENR,
	B.CDHDR_CHANGENR ZF_CDHDR_CHANGENR_2,

	A.CDPOS_CHNGIND CDPOS_CHNGIND,
	B.CDPOS_CHNGIND ZF_CDPOS_CHNGIND_2,
	A.CDHDR_UDATE ZF_CDHDR_UDATE_1,
	A.CDHDR_UTIME ZF_CDHDR_UTIME_1,
	B.CDHDR_UDATE ZF_CDHDR_UDATE_2,
	B.CDHDR_UTIME ZF_CDHDR_UTIME_2,

	A.CDPOS_VALUE_OLD ZF_VALUE_OLD_1,
	A.CDPOS_VALUE_NEW ZF_VALUE_NEW_1,

	B.CDPOS_VALUE_OLD ZF_VALUE_OLD_2, 
	B.CDPOS_VALUE_NEW ZF_VALUE_NEW_2,

	DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) ZF_DATE_DIFF,

	CASE
		WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 0 THEN '0 day'
		WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 1 THEN '1 day'
		WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 10 THEN '2 - 10 days'
		WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 30 THEN '11 - 30 days'
		WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 60 THEN '31 - 60 days'
		WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 180 THEN '3 - 6 months'
		WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 360 THEN '6 - 12 months'
		WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) >= 360 THEN '> 1 years'
	END ZF_DATE_DIFF_BUCKET,
	D1.LFBK_LIFNR AS ZF_LFBK_LIFNR_OLD_1,
	D2.LFBK_LIFNR AS ZF_LFBK_LIFNR_NEW_1,
	D3.LFBK_LIFNR AS ZF_LFBK_LIFNR_OLD_2,
	D4.LFBK_LIFNR AS ZF_LFBK_LIFNR_NEW_2,
	IIF(D1.LFBK_LIFNR <> D2.LFBK_LIFNR OR D1.LFBK_LIFNR <> D3.LFBK_LIFNR OR D1.LFBK_LIFNR <> D4.LFBK_LIFNR
		OR D2.LFBK_LIFNR <> D3.LFBK_LIFNR OR D2.LFBK_LIFNR <> D4.LFBK_LIFNR OR D3.LFBK_LIFNR <> D4.LFBK_LIFNR
	, 'X', '') ZF_CHANGE_TO_ANOTHER_SUPPLIER_FLAG
	INTO B32_06_TT_CDHDR_CDPOS_IBAN
	FROM B32_01_TT_CDHDR_CDPOS A
	INNER JOIN B32_01_TT_CDHDR_CDPOS B ON A.CDHDR_OBJECTCLAS = B.CDHDR_OBJECTCLAS
															AND A.CDHDR_OBJECTID = B.CDHDR_OBJECTID
															AND A.CDPOS_TABNAME = B.CDPOS_TABNAME
															AND A.CDPOS_FNAME = B.CDPOS_FNAME
															AND (A.CDPOS_VALUE_OLD = B.CDPOS_VALUE_NEW OR (B.CDPOS_CHNGIND IN ('E', 'D') AND B.CDPOS_VALUE_OLD = A.CDPOS_VALUE_NEW))
															AND A.CDHDR_CHANGENR < B.CDHDR_CHANGENR
	--get the supplier information of old change #1
	LEFT JOIN A_TIBAN C1 ON A.CDPOS_VALUE_OLD = TIBAN_IBAN
	
	LEFT JOIN A_LFBK D1 ON D1.LFBK_BANKS = C1.TIBAN_BANKS
						AND D1.LFBK_BANKL = C1.TIBAN_BANKL
						AND D1.LFBK_BANKN = C1.TIBAN_BANKN
						AND D1.LFBK_BKONT = C1.TIBAN_BKONT
	
	--get the supplier information of new change #2
	LEFT JOIN A_TIBAN C2 ON A.CDPOS_VALUE_NEW = C2.TIBAN_IBAN
	
	LEFT JOIN A_LFBK D2 ON D2.LFBK_BANKS = C2.TIBAN_BANKS
						AND D2.LFBK_BANKL = C2.TIBAN_BANKL
						AND D2.LFBK_BANKN = C2.TIBAN_BANKN
						AND D2.LFBK_BKONT = C2.TIBAN_BKONT

	--get the supplier information of old change #3
	LEFT JOIN A_TIBAN C3 ON B.CDPOS_VALUE_OLD = C3.TIBAN_IBAN
	LEFT JOIN A_LFBK D3 ON D3.LFBK_BANKS = C3.TIBAN_BANKS
						AND D3.LFBK_BANKL = C3.TIBAN_BANKL
						AND D3.LFBK_BANKN = C3.TIBAN_BANKN
						AND D3.LFBK_BKONT = C3.TIBAN_BKONT

	--get the supplier information of old change #4
	LEFT JOIN A_TIBAN C4 ON B.CDPOS_VALUE_NEW = C4.TIBAN_IBAN
	LEFT JOIN A_LFBK D4 ON D4.LFBK_BANKS = C4.TIBAN_BANKS
						AND D4.LFBK_BANKL = C4.TIBAN_BANKL
						AND D4.LFBK_BANKN = C4.TIBAN_BANKN
						AND D4.LFBK_BKONT = C4.TIBAN_BKONT
	WHERE A.CDPOS_CHNGIND = 'U' AND A.CDPOS_VALUE_OLD <> '' AND A.CDPOS_FNAME = 'IBAN'

-- Step 6: Insert all result to above table
	INSERT INTO B32_05B_IT_CDHD_CDPOS_RELEVANT_CASES_MAPPING
	-- Insert all the original change
	SELECT DISTINCT
	ZF_CASE_TYPE,
	ZF_CHANGE_ID,
	ZF_CHANGE_ID,
	ZF_LFBK_LIFNR_OLD_1
	FROM B32_06_TT_CDHDR_CDPOS_IBAN A
	UNION
-- Insert all 2nd change (changing back to the bank account of the original)
	SELECT DISTINCT
	ZF_CASE_TYPE,
	ZF_CHANGE_ID,
	ZF_CHANGE_ID_2,
	ZF_LFBK_LIFNR_NEW_2
	FROM B32_06_TT_CDHDR_CDPOS_IBAN B

-- LFBK temporary bank account
-- Step 7: join the CDHDR_CDPOS table with itself where the 2nd table has change indicator = D, E

	EXEC SP_DROPTABLE 'B32_08_TT_CDHDR_CDPOS_LFBK_BANK_DELETE'
	SELECT DISTINCT
		'LFBK_BANK_DELETE' ZF_CASE_TYPE,
		A.ZF_CHANGE_ID ZF_CHANGE_ID,
		B.ZF_CHANGE_ID ZF_CHANGE_ID_2,

		A.CDHDR_CHANGENR,
		B.CDHDR_CHANGENR ZF_CDHDR_CHANGENR_2,


		A.CDHDR_UDATE ZF_CDHDR_UDATE_1,
		A.CDHDR_UTIME ZF_CDHDR_UTIME_1,
		B.CDHDR_UDATE ZF_CDHDR_UDATE_2,
		B.CDHDR_UTIME ZF_CDHDR_UTIME_2,

		A.CDPOS_VALUE_OLD ZF_VALUE_OLD_1,
		A.CDPOS_VALUE_NEW ZF_VALUE_NEW_1,

		B.CDPOS_VALUE_OLD ZF_VALUE_OLD_2, 
		B.CDPOS_VALUE_NEW ZF_VALUE_NEW_2,

		DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) ZF_DATE_DIFF,

		CASE
			WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 0 THEN '0 day'
			WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 1 THEN '1 day'
			WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 10 THEN '2 - 10 days'
			WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 30 THEN '11 - 30 days'
			WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 60 THEN '31 - 60 days'
			WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 180 THEN '3 - 6 months'
			WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) < 360 THEN '6 - 12 months'
			WHEN DATEDIFF(DD, A.CDHDR_UDATE, B.CDHDR_UDATE) >= 360 THEN '> 1 years'
		END ZF_DATE_DIFF_BUCKET,
		SUBSTRING(A.CDPOS_TABKEY, 4, 10) ZF_LIFNR_1,
		DBO.TRIM(SUBSTRING(A.CDPOS_TABKEY, 14, LEN(A.CDPOS_TABKEY)- 14)) ZF_BANK_DETAIL
	INTO B32_08_TT_CDHDR_CDPOS_LFBK_BANK_DELETE
	FROM B32_01_TT_CDHDR_CDPOS A
	INNER JOIN B32_01_TT_CDHDR_CDPOS B ON B.CDPOS_CHNGIND IN ('D', 'E') AND  A.CDHDR_OBJECTCLAS = B.CDHDR_OBJECTCLAS
															AND A.CDHDR_OBJECTID = B.CDHDR_OBJECTID
															AND A.CDPOS_TABNAME = B.CDPOS_TABNAME
															AND A.CDHDR_CHANGENR < B.CDHDR_CHANGENR
															AND A.CDPOS_TABKEY = B.CDPOS_TABKEY
															AND B.CDPOS_VALUE_NEW = ''
	WHERE A.CDPOS_CHNGIND = 'I' AND A.CDPOS_TABNAME = 'LFBK' AND A.CDPOS_FNAME = 'KEY'


	INSERT INTO B32_05B_IT_CDHD_CDPOS_RELEVANT_CASES_MAPPING
	SELECT DISTINCT
		ZF_CASE_TYPE,
		ZF_CHANGE_ID,
		ZF_CHANGE_ID,
		ZF_LIFNR_1
	FROM B32_08_TT_CDHDR_CDPOS_LFBK_BANK_DELETE A
	UNION
	SELECT DISTINCT
		ZF_CASE_TYPE,
		ZF_CHANGE_ID,
		ZF_CHANGE_ID_2,
		ZF_LIFNR_1
	FROM B32_08_TT_CDHDR_CDPOS_LFBK_BANK_DELETE B


								

	EXEC SP_DROPTABLE 'B32_01_IT_CDHDR_CDPOS'
	SELECT * INTO B32_01_IT_CDHDR_CDPOS FROM B32_01_TT_CDHDR_CDPOS
    CREATE NONCLUSTERED INDEX IDX ON B32_01_IT_CDHDR_CDPOS(ZF_CUSTOMER_SUPPLIER_KEY)
	EXEC SP_DROPTABLE 'B32_04A_IT_CDHD_CDPOS_LFBK_FLIPFLOP'
	SELECT * INTO B32_04A_IT_CDHD_CDPOS_LFBK_FLIPFLOP FROM B32_05_TT_CDHD_CDPOS_LFBK_FLIPFLOP
	EXEC SP_DROPTABLE 'B32_06C_IT_CDHDR_CDPOS_IBAN'
	SELECT * INTO B32_06C_IT_CDHDR_CDPOS_IBAN FROM B32_06_TT_CDHDR_CDPOS_IBAN

	EXEC SP_DROPTABLE 'B32_08E_IT_CDHDR_CDPOS_LFBK_BANK_DELETE'
	SELECT * INTO B32_08E_IT_CDHDR_CDPOS_LFBK_BANK_DELETE FROM B32_08_TT_CDHDR_CDPOS_LFBK_BANK_DELETE


	EXEC SP_RENAME_FIELD 'B32_', 'B32_01_IT_CDHDR_CDPOS'
	EXEC SP_RENAME_FIELD 'B32A_', 'B32_04A_IT_CDHD_CDPOS_LFBK_FLIPFLOP'
	EXEC SP_RENAME_FIELD 'B32B_', 'B32_05B_IT_CDHD_CDPOS_RELEVANT_CASES_MAPPING'
	EXEC SP_RENAME_FIELD 'B32C_', 'B32_06C_IT_CDHDR_CDPOS_IBAN'
	EXEC SP_RENAME_FIELD 'B32E_', 'B32_08E_IT_CDHDR_CDPOS_LFBK_BANK_DELETE'

	DECLARE @CURRENCY NVARCHAR(MAX) = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'currency')

	EXEC SP_DROPTABLE 'B32_10_TT_BSAIK_DETAIL'
	SELECT A.*,
	B.B32A_ZF_CASE_TYPE ZF_CASE_TYPE,
	B.B32A_ZF_CHANGE_ID ZF_CHANGE_ID
	INTO B32_10_TT_BSAIK_DETAIL
	FROM B11_04_IT_PTP_APA A
	INNER JOIN B32_04A_IT_CDHD_CDPOS_LFBK_FLIPFLOP B ON B11B_ACDOCA_LIFNR = B.B32A_ZF_LIFNR_1
												AND B11B_ACDOCA_BLDAT BETWEEN B32A_ZF_CDHDR_UDATE_1 AND B.B32A_ZF_CDHDR_UDATE_2
	WHERE B11B_ZF_FLAG_SUMMARY like '%PAYMENT%'
	UNION
	SELECT A.*,
	C.B32E_ZF_CASE_TYPE ZF_CASE_TYPE,
	C.B32E_ZF_CHANGE_ID ZF_CHANGE_ID
	FROM B11_04_IT_PTP_APA A
	INNER JOIN B32_08E_IT_CDHDR_CDPOS_LFBK_BANK_DELETE C ON B11B_ACDOCA_LIFNR = C.B32E_ZF_LIFNR_1
												AND B11B_ACDOCA_BLDAT BETWEEN c.B32E_ZF_CDHDR_UDATE_1 AND C.B32E_ZF_CDHDR_UDATE_2

	WHERE B11B_ZF_FLAG_SUMMARY like '%PAYMENT%'
	UNION
	SELECT A.*,
	C.B32C_ZF_CASE_TYPE ZF_CASE_TYPE,
	C.B32C_ZF_CHANGE_ID ZF_CHANGE_ID
	FROM B11_04_IT_PTP_APA A
	INNER JOIN B32_06C_IT_CDHDR_CDPOS_IBAN C ON B11B_ACDOCA_LIFNR = B32C_ZF_LFBK_LIFNR_NEW_1
												AND B11B_ACDOCA_BLDAT BETWEEN C.B32C_ZF_CDHDR_UDATE_1 AND C.B32C_ZF_CDHDR_UDATE_2
	WHERE B11B_ZF_FLAG_SUMMARY like '%PAYMENT%'
	UNION
	SELECT A.*,
	C.B32C_ZF_CASE_TYPE ZF_CASE_TYPE,
	C.B32C_ZF_CHANGE_ID ZF_CHANGE_ID
	FROM B11_04_IT_PTP_APA A
	INNER JOIN B32_06C_IT_CDHDR_CDPOS_IBAN C ON B11B_ACDOCA_LIFNR = B32C_ZF_LFBK_LIFNR_OLD_1
												AND B11B_ACDOCA_BLDAT BETWEEN C.B32C_ZF_CDHDR_UDATE_1 AND C.B32C_ZF_CDHDR_UDATE_2
	WHERE B11B_ZF_FLAG_SUMMARY like '%PAYMENT%'
	UNION
	SELECT A.*,
	C.B32C_ZF_CASE_TYPE ZF_CASE_TYPE,
	C.B32C_ZF_CHANGE_ID ZF_CHANGE_ID
	FROM B11_04_IT_PTP_APA A
	INNER JOIN B32_06C_IT_CDHDR_CDPOS_IBAN C ON B11B_ACDOCA_LIFNR = B32C_ZF_LFBK_LIFNR_NEW_2
												AND B11B_ACDOCA_BLDAT BETWEEN C.B32C_ZF_CDHDR_UDATE_1 AND C.B32C_ZF_CDHDR_UDATE_2
	WHERE B11B_ZF_FLAG_SUMMARY like '%PAYMENT%'
	UNION
	SELECT A.*,
	C.B32C_ZF_CASE_TYPE ZF_CASE_TYPE,
	C.B32C_ZF_CHANGE_ID ZF_CHANGE_ID
	FROM B11_04_IT_PTP_APA A
	INNER JOIN B32_06C_IT_CDHDR_CDPOS_IBAN C ON B11B_ACDOCA_LIFNR = B32C_ZF_LFBK_LIFNR_OLD_2
												AND B11B_ACDOCA_BLDAT BETWEEN C.B32C_ZF_CDHDR_UDATE_1 AND C.B32C_ZF_CDHDR_UDATE_2
	WHERE B11B_ZF_FLAG_SUMMARY like '%PAYMENT%'
	
	EXEC SP_DROPTABLE 'B32_11_IT_BSAIK_DETAIL'
	SELECT A.*
	INTO B32_11_IT_BSAIK_DETAIL
	FROM B32_10_TT_BSAIK_DETAIL A

	EXEC SP_UNNAME_FIELD 'B11B_', 'B32_11_IT_BSAIK_DETAIL'
    EXEC SP_RENAME_FIELD 'B32G_', 'B32_11_IT_BSAIK_DETAIL'


	EXEC SP_DROPTABLE 'B32_12_TT_REGUP_DETAIL'
	SELECT A.*,
	B.B32A_ZF_CASE_TYPE ZF_CASE_TYPE,
	B.B32A_ZF_CHANGE_ID ZF_CHANGE_ID
	INTO B32_12_TT_REGUP_DETAIL
	FROM A_REGUP A
	INNER JOIN B32_04A_IT_CDHD_CDPOS_LFBK_FLIPFLOP B ON REGUP_LIFNR = B.B32A_ZF_LIFNR_1
												AND REGUP_BLDAT BETWEEN B32A_ZF_CDHDR_UDATE_1 AND B.B32A_ZF_CDHDR_UDATE_2
	UNION
	SELECT A.*,
	C.B32E_ZF_CASE_TYPE ZF_CASE_TYPE,
	C.B32E_ZF_CHANGE_ID ZF_CHANGE_ID
	FROM A_REGUP A
	INNER JOIN B32_08E_IT_CDHDR_CDPOS_LFBK_BANK_DELETE C ON REGUP_LIFNR = C.B32E_ZF_LIFNR_1
												AND REGUP_BLDAT BETWEEN c.B32E_ZF_CDHDR_UDATE_1 AND C.B32E_ZF_CDHDR_UDATE_2

	UNION
	SELECT A.*,
	C.B32C_ZF_CASE_TYPE ZF_CASE_TYPE,
	C.B32C_ZF_CHANGE_ID ZF_CHANGE_ID
	FROM A_REGUP A
	INNER JOIN B32_06C_IT_CDHDR_CDPOS_IBAN C ON REGUP_LIFNR = B32C_ZF_LFBK_LIFNR_NEW_1
												AND REGUP_BLDAT BETWEEN C.B32C_ZF_CDHDR_UDATE_1 AND C.B32C_ZF_CDHDR_UDATE_2
	UNION
	SELECT A.*,
	C.B32C_ZF_CASE_TYPE ZF_CASE_TYPE,
	C.B32C_ZF_CHANGE_ID ZF_CHANGE_ID
	FROM A_REGUP A
	INNER JOIN B32_06C_IT_CDHDR_CDPOS_IBAN C ON REGUP_LIFNR = B32C_ZF_LFBK_LIFNR_OLD_1
												AND REGUP_BLDAT BETWEEN C.B32C_ZF_CDHDR_UDATE_1 AND C.B32C_ZF_CDHDR_UDATE_2
	UNION
	SELECT A.*,
	C.B32C_ZF_CASE_TYPE ZF_CASE_TYPE,
	C.B32C_ZF_CHANGE_ID ZF_CHANGE_ID
	FROM A_REGUP A
	INNER JOIN B32_06C_IT_CDHDR_CDPOS_IBAN C ON REGUP_LIFNR = B32C_ZF_LFBK_LIFNR_NEW_2
												AND REGUP_BLDAT BETWEEN C.B32C_ZF_CDHDR_UDATE_1 AND C.B32C_ZF_CDHDR_UDATE_2

	UNION
	SELECT A.*,
	C.B32C_ZF_CASE_TYPE ZF_CASE_TYPE,
	C.B32C_ZF_CHANGE_ID ZF_CHANGE_ID
	FROM A_REGUP A
	INNER JOIN B32_06C_IT_CDHDR_CDPOS_IBAN C ON REGUP_LIFNR = B32C_ZF_LFBK_LIFNR_OLD_2
												AND REGUP_BLDAT BETWEEN C.B32C_ZF_CDHDR_UDATE_1 AND C.B32C_ZF_CDHDR_UDATE_2

	EXEC SP_DROPTABLE 'B32_14_IT_REGUP_DETAIL'
	SELECT A.*,
	CONVERT(money,REGUP_DMBTR * (CASE WHEN (REGUP_SHKZG = 'S') THEN 1 ELSE -1 END) 
	* COALESCE(CAST(TCURR_CUC.TCURR_UKURS AS FLOAT),1) * COALESCE(TCURF_CUC.TCURF_TFACT,1) / COALESCE(TCURF_CUC.TCURF_FFACT,1) 
		* ISNULL(TCURX_COC.TCURX_factor,1)) AS ZF_REGUP_DMBTR_S_CUC,
	A_T001.T001_KTOPL
	INTO B32_14_IT_REGUP_DETAIL
	FROM B32_12_TT_REGUP_DETAIL A
	LEFT JOIN A_T001 ON  REGUP_BUKRS = A_T001.T001_BUKRS

-- Add currency factor from company currency to USD

	LEFT JOIN B00_IT_TCURF TCURF_CUC
		ON A_T001.T001_WAERS = TCURF_CUC.TCURF_FCURR
		AND TCURF_CUC.TCURF_TCURR  = @currency 
		AND TCURF_CUC.TCURF_GDATU = (
		SELECT TOP 1 B00_IT_TCURF.TCURF_GDATU
		FROM B00_IT_TCURF
		WHERE A_T001.T001_WAERS = B00_IT_TCURF.TCURF_FCURR AND 
				B00_IT_TCURF.TCURF_TCURR  = @currency  AND
				B00_IT_TCURF.TCURF_GDATU <= REGUP_BUDAT
		ORDER BY B00_IT_TCURF.TCURF_GDATU DESC
		)

-- Add exchange rate from company currency to USD
	LEFT JOIN B00_IT_TCURR TCURR_CUC
		ON A_T001.T001_WAERS = TCURR_CUC.TCURR_FCURR
		AND TCURR_CUC.TCURR_TCURR  = @currency  
		AND TCURR_CUC.TCURR_GDATU = (
			SELECT TOP 1 B00_IT_TCURR.TCURR_GDATU
			FROM B00_IT_TCURR
			WHERE A_T001.T001_WAERS = B00_IT_TCURR.TCURR_FCURR AND 
					B00_IT_TCURR.TCURR_TCURR  = @currency  AND
					B00_IT_TCURR.TCURR_GDATU <= REGUP_BUDAT
			ORDER BY B00_IT_TCURR.TCURR_GDATU DESC
			) 

           -- Add currency factor for house currency
		LEFT JOIN B00_TCURX TCURX_COC
		ON T001_WAERS = TCURX_COC.TCURX_CURRKEY
	WHERE REGUP_XVORL = 'X'

	EXEC SP_RENAME_FIELD 'B32H_', 'B32_14_IT_REGUP_DETAIL'
	
	EXEC SP_DROPTABLE 'B32_15_IT_KNA1'
    SELECT * 
    INTO B32_15_IT_KNA1
    FROM A_KNA1
    WHERE EXISTS(SELECT * FROM A_KNB1 WHERE KNA1_KUNNR = KNB1_KUNNR
                    AND EXISTS(SELECT * FROM A_BKPF WHERE BKPF_BUKRS = KNB1_BUKRS))
        OR EXISTS(SELECT * FROM B32_01_IT_CDHDR_CDPOS WHERE B32_ZF_CUSTOMER_SUPPLIER_KEY = KNA1_KUNNR)

	EXEC SP_DROPTABLE 'B32_16_IT_LFA1'
    SELECT * 
    INTO B32_16_IT_LFA1
    FROM A_LFA1
    WHERE EXISTS(SELECT * FROM A_LFB1 WHERE LFA1_LIFNR = LFB1_LIFNR
                    AND EXISTS(SELECT * FROM A_BKPF WHERE BKPF_BUKRS = LFB1_BUKRS))
        OR EXISTS(SELECT * FROM B32_01_IT_CDHDR_CDPOS WHERE B32_ZF_CUSTOMER_SUPPLIER_KEY = LFA1_LIFNR)

-- Drop all temporary table
EXEC SP_REMOVE_TABLES'%_TT_%'
GO
