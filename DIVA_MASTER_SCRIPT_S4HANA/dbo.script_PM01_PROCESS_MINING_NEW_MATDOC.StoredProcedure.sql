USE [DIVA_MASTER_SCRIPT_S4HANA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE           PROCEDURE [dbo].[script_PM01_PROCESS_MINING_NEW_MATDOC]
AS
--DYNAMIC_SCRIPT_START
     DECLARE 	 
			 @currency nvarchar(max)			= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'currency')
			,@date1 nvarchar(max)				= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'date1')
			,@date2 nvarchar(max)				= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'date2')
			,@downloaddate nvarchar(max)		= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'downloaddate')
			,@exchangeratetype nvarchar(max)	= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'exchangeratetype')
			,@language1 nvarchar(max)			= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'language1')
			,@language2 nvarchar(max)			= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'language2')
			,@year nvarchar(max)				= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'year')
			,@id nvarchar(max)					= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'id')
			,@ZV_LIMIT nvarchar(max)		    = (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'ZV_LIMIT')
			,@errormsg NVARCHAR(MAX)
			
DECLARE @dateformat varchar(3)
SET @dateformat   = (SELECT dbo.get_param('dateformat'))
SET DATEFORMAT @dateformat;

EXEC SP_REMOVE_TABLES 'PM_0%'
EXEC SP_REMOVE_TABLES 'PM_1%'
EXEC SP_REMOVE_TABLES 'PM_2%'
EXEC SP_REMOVE_TABLES '%TEMP%'
EXEC SP_REMOVE_TABLES '%_TT_%'
EXEC SP_REMOVE_TABLES 'TT_%'

--Step 1 Add the flags for the mainflow
EXEC SP_REMOVE_TABLES 'PM_01_TT_ADD_FLAG_GLOBAL'

SELECT B27_01_IT_PTP_GLOBAL_TABLE.*,
CASE WHEN  
	EKPO_EBELN IS NOT NULL AND ZF_ACDOCA_BUKRS_GJAHR_BELNR_BUZEI_PAY <>'' THEN 'X'
	ELSE '' END  ZF_PAYMENT_HAS_PO_FLAG,
CASE WHEN 
	EKPO_EBELN IS NOT NULL AND ZF_ACDOCA_BUKRS_GJAHR_BELNR_BUZEI <>'' THEN 'X'
	ELSE '' END  ZF_INVOICE_HAS_PO_FLAG,
CASE WHEN LEN(EKPO_MATKL)=4 THEN 'X' ELSE '' END ZF_PRODUCT_FLAG
INTO PM_01_TT_ADD_FLAG_GLOBAL
FROM B27_01_IT_PTP_GLOBAL_TABLE


--sTEP 2 Convert the horizontal table to vertical table ,
--Remove the null values (Because some paths don't have all the nodes)

EXEC SP_REMOVE_TABLES PM_02_TT_VERTICAL_TABLE

SELECT  ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		ZF_EBAN_BANFN_BNFPO AS ZF_DOCUMENT_NUMBER,
		EBAN_BADAT AS  'ZF_DATE_USED_IN_MODEL',
		'000000' AS 'ZF_TIME_USED_IN_MODEL',
		'1_PURCHASE_REQUEST' AS ZF_CONCECPT_NAME,
		1 AS ZF_STAGE,
		ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG  ,
		ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_CUC2,
		0 AS ZF_AMOUNT_CUC3,
		0 AS ZF_AMOUNT_COC,
		EBAN_ERNAM AS ZF_USER,
		V_USERNAME_NAME_TEXT_EBAN AS ZF_NAME_OF_USER,
		EBAN_EKPO_BUKRS AS ZF_COMPANY_CODE,
		EBAN_T161T_BATXT AS ZF_DOCUMENT_TYPE,
		'' AS ZF_COMPANY_CURRENCY
INTO PM_02_TT_VERTICAL_TABLE
FROM PM_01_TT_ADD_FLAG_GLOBAL 
WHERE ISNULL(EBAN_BADAT,'')<>'' 
UNION 
SELECT  ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		ZF_EKPO_EBELN_EBELP AS ZF_DOCUMENT_NUMBER,
		EKKO_AEDAT AS  'ZF_DATE_USED_IN_MODEL',
		'000000' AS 'ZF_TIME_USED_IN_MODEL',
		'2_PURCHASE_ORDER' AS ZF_CONCECPT_NAME,
		2 AS ZF_STAGE,
		ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		ZF_EKPO_NETWR_CUC AS ZF_AMOUNT_CUC,
		ZF_EKPO_NETWR_CUC AS ZF_AMOUNT_CUC2,
		ZF_EKPO_NETWR_CUC AS ZF_AMOUNT_CUC3,
		ZF_EKPO_NETWR_COC AS ZF_AMOUNT_COC,
		EKKO_ERNAM AS ZF_USER,
		ZF_V_USERNAME_NAME_TEXT_EKKO AS ZF_NAME_OF_USER,
		EKPO_BUKRS AS ZF_COMPANY_CODE,
		ZF_PO_CATEGORY AS ZF_DOCUMENT_TYPE,
		EKPO_T001_WAERS 
FROM PM_01_TT_ADD_FLAG_GLOBAL
WHERE ISNULL(EKKO_AEDAT,'')<>'' 
UNION
SELECT  ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		ZF_MATDOC_EBELN_EBELP_BUKRS AS ZF_DOCUMENT_NUMBER,
		MATDOC_CPUDT AS  'ZF_DATE_USED_IN_MODEL',
		MATDOC_CPUTM AS 'ZF_TIME_USED_IN_MODEL',
		'7_GOOD_RECEIPT' AS ZF_CONCECPT_NAME,
		7 AS ZF_STAGE,
		ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		ZF_MATDOC_DMBTR_SIGNED_CUC AS ZF_AMOUNT_CUC,	
		ZF_MATDOC_DMBTR_SIGNED_CUC AS ZF_AMOUNT_CUC2,
		ZF_MATDOC_DMBTR_SIGNED_CUC AS ZF_AMOUNT_CUC3,
		ZF_MATDOC_DMBTR_SIGNED AS ZF_AMOUNT_COC,
		MATDOC_USNAM AS ZF_USER,
		V_USERNAME_NAME_TEXT_MATDOC AS ZF_NAME_OF_USER,
		MATDOC_BUKRS AS ZF_COMPANY_CODE,
		MATDOC_T003T_LTEXT AS ZF_DOCUMENT_TYPE	,
		MATDOC_WAERS
FROM PM_01_TT_ADD_FLAG_GLOBAL
WHERE ISNULL(MATDOC_CPUDT,'')<>''

UNION
SELECT  ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		ZF_RSEG_BELNR_GJAHR_BUZEI AS ZF_DOCUMENT_NUMBER,
		RBKP_CPUDT AS  'ZF_DATE_USED_IN_MODEL',
		RBKP_CPUTM AS 'ZF_TIME_USED_IN_MODEL',
		'8.1_MM_INVOICE' AS ZF_CONCECPT_NAME,
		8 AS ZF_STAGE,
		ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		ZF_RSEG_WRBTR_S_CUC AS ZF_AMOUNT_CUC,	
		ZF_RSEG_WRBTR_S_CUC AS ZF_AMOUNT_CUC2,	
		ZF_RSEG_WRBTR_S_CUC AS ZF_AMOUNT_CUC3,	
		ZF_RSEG_WRBTR_S AS ZF_AMOUNT_COC,
		RBKP_USNAM AS ZF_USER,
		V_USERNAME_NAME_TEXT_RBKP AS ZF_NAME_OF_USER,
		RSEG_BUKRS AS ZF_COMPANY_CODE,
		RBKP_T003T_LTEXT AS ZF_DOCUMENT_TYPE	,
		RBKP_T001_WAERS
FROM PM_01_TT_ADD_FLAG_GLOBAL
WHERE ISNULL(RBKP_CPUDT,'')<>''
UNION 
SELECT  ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		ZF_ACDOCA_BUKRS_GJAHR_BELNR_BUZEI AS ZF_DOCUMENT_NUMBER,
		ACDOCA_CPUDT_INV AS  'ZF_DATE_USED_IN_MODEL',
		ACDOCA_CPUTM_INV AS 'ZF_TIME_USED_IN_MODEL',
		'8.2_INVOICE_RECEIPT' AS ZF_CONCECPT_NAME,
		8.2 AS ZF_STAGE,
		ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		ZF_ACDOCA_HSL_S_CUC_INV AS ZF_AMOUNT_CUC,
		ZF_ACDOCA_KSL_S_INV AS ZF_AMOUNT_CUC2,
		ZF_ACDOCA_OSL_S_INV AS ZF_AMOUNT_CUC3,
		ZF_ACDOCA_HSL_S_INV AS ZF_AMOUNT_COC,
		BKPF_USNAM_INV AS ZF_USER,
		V_USERNAME_NAME_TEXT_INV AS ZF_NAME_OF_USER,
		ACDOCA_BUKRS_INV AS ZF_COMPANY_CODE,
		B11B_SS02_T003T_LTEXT_INV AS ZF_DOCUMENT_TYPE	,
		B04_GL_T001_WAERS
FROM PM_01_TT_ADD_FLAG_GLOBAL
WHERE ISNULL(ACDOCA_CPUDT_INV,'')<>''
UNION 
SELECT  ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY,
		ZF_ACDOCA_BUKRS_GJAHR_BELNR_BUZEI_PAY AS ZF_DOCUMENT_NUMBER,
		ACDOCA_CPUDT_PAY AS  'ZF_DATE_USED_IN_MODEL',
		ACDOCA_CPUTM_PAY AS 'ZF_TIME_USED_IN_MODEL',
		'17_PAYMENT' AS ZF_CONCECPT_NAME,
		17 AS ZF_STAGE,
		ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		ZF_ACDOCA_HSL_S_CUC_PAY AS ZF_AMOUNT_CUC,
		ZF_ACDOCA_KSL_S_PAY AS ZF_AMOUNT_CUC2,
		ZF_ACDOCA_OSL_PAY AS ZF_AMOUNT_CUC3,
		ZF_ACDOCA_HSL_S_PAY AS ZF_AMOUNT_COC,
		BKPF_USNAM_PAY AS ZF_USER,
		V_USERNAME_NAME_TEXT_PAY AS ZF_NAME_OF_USER,
		ACDOCA_BUKRS_PAY AS ZF_COMPANY_CODE,
		B11B_SS02_T003T_LTEXT_PAY AS ZF_DOCUMENT_TYPE		,
		T001_WAERS_PAY
FROM PM_01_TT_ADD_FLAG_GLOBAL
WHERE ISNULL(ACDOCA_CPUDT_PAY,'')<>''


--Step 3 Sort the vertical table base on flow key, date and stage
	EXEC SP_DROPTABLE PM_03_TT_GLOBAL_VERTICAL_SORT
	SELECT  ROW_NUMBER() OVER (ORDER BY ZF_DOCUMENT_FLOW_KEY, ZF_DATE_USED_IN_MODEL, ZF_STAGE) AS ZF_ROW_ID,
	* INTO PM_03_TT_GLOBAL_VERTICAL_SORT FROM PM_02_TT_VERTICAL_TABLE
	ORDER BY ZF_DOCUMENT_FLOW_KEY, ZF_DATE_USED_IN_MODEL, ZF_STAGE
 

 --STep 4 Get tha start day and end date for each flow
 EXEC SP_DROPTABLE PM_04_TT_START_END_LIST

 SELECT DISTINCT ZF_DOCUMENT_FLOW_KEY,
				MIN(ZF_DATE_USED_IN_MODEL) AS ZF_START_DATE ,
				MAX(ZF_DATE_USED_IN_MODEL) AS ZF_END_DATE
 INTO PM_04_TT_START_END_LIST
 FROM PM_03_TT_GLOBAL_VERTICAL_SORT
 GROUP BY ZF_DOCUMENT_FLOW_KEY

 
 --Step 5 Add the list of start date end date to the vertical table
  EXEC SP_DROPTABLE PM_05_IT_ADD_START_END

   SELECT DISTINCT A.*,
				B.ZF_START_DATE ,
				 B.ZF_END_DATE,
			DATEDIFF(DAY,ZF_START_DATE,ZF_END_DATE) AS ZF_LEAD_FLOW_DAY,
			DATEDIFF(WEEK,ZF_START_DATE,ZF_END_DATE) AS ZF_LEAD_FLOW_WEEK,
			DATEDIFF(MONTH,ZF_START_DATE,ZF_END_DATE) AS ZF_LEAD_FLOW_MONTH
 INTO PM_05_IT_ADD_START_END
 FROM PM_01_TT_ADD_FLAG_GLOBAL AS A
 LEFT JOIN PM_04_TT_START_END_LIST AS B
 ON A.ZF_DOCUMENT_FLOW_KEY=B.ZF_DOCUMENT_FLOW_KEY


 --Step 6
 --For the change ,
 -- Add the the flow  number to each change
 -- Join base on related key,
 -- Get only the change between start and end date
--Then append the change to the main flow



--FIlter all the changes table, Get only the change between start and end date and relate to the main flows
-- 6.1 EINKBELEG
EXEC SP_DROPTABLE PM_05A_TT_EINKBELEG
SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,
	CONCAT(
		DBO.TRIM(B24_02_CDHDR_OBJECTCLAS),'-',
		DBO.TRIM(B24_02_CDHDR_OBJECTID),'-',
		DBO.TRIM(B24_02_CDHDR_CHANGENR)) AS ZF_DOCUMENT_NUMBER,
		B24_02_CDHDR_UDATE AS  'ZF_DATE_USED_IN_MODEL',
		B24_02_CDHDR_UTIME AS 'ZF_TIME_USED_IN_MODEL',
		B24_02_ZF_CHANGE_DESC AS ZF_CONCECPT_NAME,
		B24_02_ZF_STAGE AS ZF_STAGE,
		ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_CUC2,
		0 AS ZF_AMOUNT_CUC3,
		0 AS ZF_AMOUNT_COC,
		B24_02_CDHDR_USERNAME AS ZF_USER,
		B24_02_V_USERNAME_NAME_TEXT AS ZF_NAME_OF_USER,
		EKPO_BUKRS AS ZF_COMPANY_CODE,
		'' AS ZF_DOCUMENT_TYPE	,'' AS ZF_COMPANY_CURRENCY
		INTO PM_05A_TT_EINKBELEG
		FROM  B24_02_IT_CDHDR_CDPOS_EINKBELEG
	JOIN  PM_05_IT_ADD_START_END AS A
	ON   B24_02_CDHDR_OBJECTID=EKPO_EBELN
	WHERE 
	 B24_02_CDHDR_UDATE BETWEEN A.ZF_START_DATE AND A.ZF_END_DATE
--6.2 INCOMINGINVOICE
EXEC SP_DROPTABLE PM_05B_TT_INCOMINGINVOICE

SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,
	CONCAT(
		DBO.TRIM(B24_04_CDHDR_OBJECTCLAS),'-',
		DBO.TRIM(B24_04_CDHDR_OBJECTID),'-',
		DBO.TRIM(B24_04_CDHDR_CHANGENR)) AS ZF_DOCUMENT_NUMBER,
		B24_04_CDHDR_UDATE AS  'ZF_DATE_USED_IN_MODEL',
		B24_04_CDHDR_UTIME AS 'ZF_TIME_USED_IN_MODEL',
		B24_04_ZF_CHANGE_DESC AS ZF_CONCECPT_NAME,
		B24_04_ZF_STAGE AS ZF_STAGE,
		ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_CUC2,
		0 AS ZF_AMOUNT_CUC3,
		0 AS ZF_AMOUNT_COC,
		B24_04_CDHDR_USERNAME AS ZF_USER,
		B24_04_V_USERNAME_NAME_TEXT AS ZF_NAME_OF_USER,
		RSEG_BUKRS AS ZF_COMPANY_CODE,
		'' AS ZF_DOCUMENT_TYPE	,'' AS ZF_COMPANY_CURRENCY
		INTO PM_05B_TT_INCOMINGINVOICE
		FROM  B24_04_IT_CDHDR_CDPOS_INCOMINGINVOICE 
 JOIN  PM_05_IT_ADD_START_END AS A
ON   DBO.TRIM(B24_04_CDHDR_OBJECTID)  = CONCAT(RSEG_BELNR,RSEG_GJAHR)
	WHERE 
	 B24_04_CDHDR_UDATE BETWEEN A.ZF_START_DATE AND A.ZF_END_DATE
	AND (ISNULL(RSEG_BELNR,'')<>'' AND ISNULL(RSEG_GJAHR,'')<>'')
--6.3 IBAN
EXEC SP_DROPTABLE PM_05C_TT_IBAN

SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,
	CONCAT(
		DBO.TRIM(B24_06_CDHDR_OBJECTCLAS),'-',
		DBO.TRIM(B24_06_CDHDR_OBJECTID),'-',
		DBO.TRIM(B24_06_CDHDR_CHANGENR)) AS ZF_DOCUMENT_NUMBER,
		B24_06_CDHDR_UDATE AS  'ZF_DATE_USED_IN_MODEL',
		B24_06_CDHDR_UTIME AS 'ZF_TIME_USED_IN_MODEL',
		B24_06_ZF_CHANGE_DESC AS ZF_CONCECPT_NAME,
		B24_06_ZF_STAGE AS ZF_STAGE,
		ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_CUC2,
		0 AS ZF_AMOUNT_CUC3,
		0 AS ZF_AMOUNT_COC,
		B24_06_CDHDR_USERNAME AS ZF_USER,
		B24_06_V_USERNAME_NAME_TEXT AS ZF_NAME_OF_USER,
		ACDOCA_BUKRS_INV AS ZF_COMPANY_CODE,
		'' AS ZF_DOCUMENT_TYPE	,'' AS ZF_COMPANY_CURRENCY
		INTO PM_05C_TT_IBAN
		FROM  B24_06_IT_CDHDR_CDPOS_IBAN
 JOIN  PM_05_IT_ADD_START_END AS A
	ON  B24_06_LFBK_LIFNR=ACDOCA_LIFNR_INV
	WHERE 
	 B24_06_CDHDR_UDATE BETWEEN A.ZF_START_DATE AND A.ZF_END_DATE

--6.4 BELEG (Invoice change)
EXEC SP_DROPTABLE PM_05D_TT_BELEG_INV

SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,
	CONCAT(
		DBO.TRIM(B24_10_CDHDR_OBJECTCLAS),'-',
		DBO.TRIM(B24_10_CDHDR_OBJECTID),'-',
		DBO.TRIM(B24_10_CDHDR_CHANGENR)) AS ZF_DOCUMENT_NUMBER,
		B24_10_CDHDR_UDATE AS  'ZF_DATE_USED_IN_MODEL',
		B24_10_CDHDR_UTIME AS 'ZF_TIME_USED_IN_MODEL',
		B24_10_ZF_CHANGE_DESC AS ZF_CONCECPT_NAME,
		B24_10_ZF_STAGE AS ZF_STAGE,
		ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_CUC2,
		0 AS ZF_AMOUNT_CUC3,
		0 AS ZF_AMOUNT_COC,
		B24_10_CDHDR_USERNAME AS ZF_USER,
		B24_10_V_USERNAME_NAME_TEXT AS ZF_NAME_OF_USER,
		ACDOCA_BUKRS_INV AS ZF_COMPANY_CODE,
		'' AS ZF_DOCUMENT_TYPE	,'' AS ZF_COMPANY_CURRENCY
		INTO PM_05D_TT_BELEG_INV
		FROM  B24_10_IT_CDHDR_CDPOS_BELEG
 JOIN  PM_05_IT_ADD_START_END AS A
	ON DBO.TRIM( SUBSTRING(B24_10_CDHDR_OBJECTID,4,LEN(B24_10_CDHDR_OBJECTID)-3))=
	CONCAT(DBO.TRIM(ACDOCA_BUKRS_INV),DBO.TRIM(ACDOCA_BELNR_INV),DBO.TRIM(ACDOCA_GJAHR_INV))
	WHERE 
	 B24_10_CDHDR_UDATE BETWEEN A.ZF_START_DATE AND A.ZF_END_DATE
	AND (ISNULL(ACDOCA_BUKRS_INV,'')<>'' AND ISNULL(ACDOCA_BELNR_INV,'')<>'' AND ISNULL(ACDOCA_GJAHR_INV,'')<>'')
--6.5 BELEG (Payment change)
EXEC SP_DROPTABLE PM_05E_TT_BELEG_PAY

SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,
	CONCAT(
		DBO.TRIM(B24_10_CDHDR_OBJECTCLAS),'-',
		DBO.TRIM(B24_10_CDHDR_OBJECTID),'-',
		DBO.TRIM(B24_10_CDHDR_CHANGENR)) AS ZF_DOCUMENT_NUMBER,
		B24_10_CDHDR_UDATE AS  'ZF_DATE_USED_IN_MODEL',
		B24_10_CDHDR_UTIME AS 'ZF_TIME_USED_IN_MODEL',
		B24_10_ZF_CHANGE_DESC AS ZF_CONCECPT_NAME,
		B24_10_ZF_STAGE AS ZF_STAGE,
		ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_CUC2,
		0 AS ZF_AMOUNT_CUC3,
		0 AS ZF_AMOUNT_COC,
		B24_10_CDHDR_USERNAME AS ZF_USER,
		B24_10_V_USERNAME_NAME_TEXT AS ZF_NAME_OF_USER,
		ACDOCA_BUKRS_PAY AS ZF_COMPANY_CODE,
		'' AS ZF_DOCUMENT_TYPE	,'' AS ZF_COMPANY_CURRENCY
		INTO PM_05E_TT_BELEG_PAY
		FROM  B24_10_IT_CDHDR_CDPOS_BELEG
 JOIN  PM_05_IT_ADD_START_END AS A
	ON DBO.TRIM( SUBSTRING(B24_10_CDHDR_OBJECTID,4,LEN(B24_10_CDHDR_OBJECTID)-3)) =
	CONCAT(DBO.TRIM(ACDOCA_BUKRS_PAY),DBO.TRIM(ACDOCA_BELNR_PAY),DBO.TRIM(ACDOCA_GJAHR_PAY))
	WHERE 
	 B24_10_CDHDR_UDATE BETWEEN A.ZF_START_DATE AND A.ZF_END_DATE
	AND ( ISNULL(ACDOCA_BUKRS_PAY,'')<>'' AND ISNULL(ACDOCA_BELNR_PAY,'')<>'' AND ISNULL(ACDOCA_GJAHR_PAY,'')<>'')
--KRED(LFB1)
EXEC SP_DROPTABLE PM_05F_TT_KRED_LFB1

SELECT DISTINCT  A.ZF_DOCUMENT_FLOW_KEY,
	CONCAT(
		DBO.TRIM(B24_08_CDHDR_OBJECTCLAS),'-',
		DBO.TRIM(B24_08_CDHDR_OBJECTID),'-',
		DBO.TRIM(B24_08_CDHDR_CHANGENR)) AS ZF_DOCUMENT_NUMBER,
		B24_08_CDHDR_UDATE AS  'ZF_DATE_USED_IN_MODEL',
		B24_08_CDHDR_UTIME AS 'ZF_TIME_USED_IN_MODEL',
		B24_08_ZF_CHANGE_DESC AS ZF_CONCECPT_NAME,
		B24_08_ZF_STAGE AS ZF_STAGE,
		ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_CUC2,
		0 AS ZF_AMOUNT_CUC3,
		0 AS ZF_AMOUNT_COC,
		B24_08_CDHDR_USERNAME AS ZF_USER,
		B24_08_V_USERNAME_NAME_TEXT AS ZF_NAME_OF_USER,
		ACDOCA_BUKRS_INV AS ZF_COMPANY_CODE,
		'' AS ZF_DOCUMENT_TYPE	,'' AS ZF_COMPANY_CURRENCY
		INTO PM_05F_TT_KRED_LFB1
		FROM  B24_08_IT_CDHDR_CDPOS_KRED
		JOIN  PM_05_IT_ADD_START_END AS A
	ON DBO.TRIM(RIGHT(B24_08_CDPOS_TABKEY,LEN(B24_08_CDPOS_TABKEY)-3)) =  CONCAT(DBO.TRIM(ACDOCA_LIFNR_INV),DBO.TRIM(ACDOCA_BUKRS_INV))
	WHERE 
	 B24_08_CDHDR_UDATE BETWEEN A.ZF_START_DATE AND A.ZF_END_DATE
	 AND B24_08_CDPOS_TABNAME='LFB1' 
	 AND (ISNULL(ACDOCA_LIFNR_INV,'')<>'' AND  ISNULL(ACDOCA_BUKRS_INV,'')<>'')
--KRED(LFA1)
EXEC SP_DROPTABLE PM_05G_TT_KRED_LFA1

SELECT DISTINCT  A.ZF_DOCUMENT_FLOW_KEY,
	CONCAT(
		DBO.TRIM(B24_08_CDHDR_OBJECTCLAS),'-',
		DBO.TRIM(B24_08_CDHDR_OBJECTID),'-',
		DBO.TRIM(B24_08_CDHDR_CHANGENR)) AS ZF_DOCUMENT_NUMBER,
		B24_08_CDHDR_UDATE AS  'ZF_DATE_USED_IN_MODEL',
		B24_08_CDHDR_UTIME AS 'ZF_TIME_USED_IN_MODEL',
		B24_08_ZF_CHANGE_DESC AS ZF_CONCECPT_NAME,
		B24_08_ZF_STAGE AS ZF_STAGE,
		ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_CUC2,
		0 AS ZF_AMOUNT_CUC3,
		0 AS ZF_AMOUNT_COC,
		B24_08_CDHDR_USERNAME AS ZF_USER,
		B24_08_V_USERNAME_NAME_TEXT AS ZF_NAME_OF_USER,
		ACDOCA_BUKRS_INV AS ZF_COMPANY_CODE,
		'' AS ZF_DOCUMENT_TYPE	,'' AS ZF_COMPANY_CURRENCY
		INTO PM_05G_TT_KRED_LFA1
		FROM  B24_08_IT_CDHDR_CDPOS_KRED
 JOIN  PM_05_IT_ADD_START_END AS A
		ON DBO.TRIM(B24_08_CDHDR_OBJECTID) =  ACDOCA_LIFNR_INV
	WHERE 
		 B24_08_CDHDR_UDATE BETWEEN A.ZF_START_DATE AND A.ZF_END_DATE
		 AND B24_08_CDPOS_TABNAME='LFA1'



-- TAN: Add bank changes documents into PM 
-- First, add the bank changes with found to have REGUH payments

EXEC SP_DROPTABLE 'PM_05H_TT_CDPOS_BANK_CHANGES_REGUH'
SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,
	CONCAT(
		TRIM(B24_20_CDHDR_OBJECTCLAS),'-',
		TRIM(B24_20_CDHDR_OBJECTID),'-',
		TRIM(B24_20_CDHDR_CHANGENR)) AS ZF_DOCUMENT_NUMBER,
		B24_20_CDHDR_UDATE AS  'ZF_DATE_USED_IN_MODEL',
		B24_20_CDHDR_UTIME AS 'ZF_TIME_USED_IN_MODEL',
		B24_20_ZF_CHANGE_DESC AS ZF_CONCECPT_NAME,
		B24_20_ZF_STAGE AS ZF_STAGE,
		ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
		ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
		ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_CUC2,
		0 AS ZF_AMOUNT_CUC3,
		0 AS ZF_AMOUNT_COC,
		B24_20_CDHDR_USERNAME AS ZF_USER,
		B24_20_V_USERNAME_NAME_TEXT AS ZF_NAME_OF_USER,
		B24_20_REGUH_ZBUKR	 AS ZF_COMPANY_CODE,
		'' AS ZF_DOCUMENT_TYPE	,
		'' AS ZF_COMPANY_CURRENCY
INTO PM_05H_TT_CDPOS_BANK_CHANGES_REGUH
FROM  B24_20_IT_REGUH_CDPOS_BANK_CHANGES
JOIN  PM_05_IT_ADD_START_END AS A

ON		ACDOCA_BUKRS_PAY=B24_20_REGUH_ZBUKR AND 
		ACDOCA_GJAHR_PAY=YEAR(B24_20_REGUH_LAUFD) AND
		ACDOCA_BELNR_PAY=B24_20_REGUH_VBLNR
		AND ACDOCA_BUKRS_PAY IS NOT NULL

-- Add the supplier that has bank changes and have flip-flop cases payments

EXEC SP_DROPTABLE 'PM_05I_TT_SUP_DIRECT_PAY'
SELECT 
DISTINCT  A.ZF_DOCUMENT_FLOW_KEY,
    CONCAT(
        TRIM(B24_31_CDPOS_OBJECTCLAS),'-',
        TRIM(B24_31_CDPOS_OBJECTID),'-',
        TRIM(B24_31_CDPOS_CHANGENR)) AS ZF_DOCUMENT_NUMBER,
        B24_31_CDHDR_UDATE AS  'ZF_DATE_USED_IN_MODEL',
        B24_31_CDHDR_UTIME AS 'ZF_TIME_USED_IN_MODEL',
        '16_SUPPLIER_PAY_BANK_CHANGE' AS ZF_CONCECPT_NAME,
        '16' AS ZF_STAGE,
        ZF_PAYMENT_HAS_PO_FLAG AS ZF_PAYMENT_HAS_PO_FLAG ,
        ZF_INVOICE_HAS_PO_FLAG AS ZF_INVOICE_HAS_PO_FLAG,
        ZF_PRODUCT_FLAG AS ZF_PRODUCT_FLAG,
        0 AS ZF_AMOUNT_CUC,
        0 AS ZF_AMOUNT_CUC2,
        0 AS ZF_AMOUNT_CUC3,
        0 AS ZF_AMOUNT_COC,
        B24_31_CDHDR_USERNAME AS ZF_USER,
        B24_31_V_USERNAME_NAME_TEXT AS ZF_NAME_OF_USER,
        ACDOCA_BUKRS_PAY AS ZF_COMPANY_CODE,
        '' AS ZF_DOCUMENT_TYPE    ,
        '' AS ZF_COMPANY_CURRENCY
INTO PM_05I_TT_SUP_DIRECT_PAY
FROM B24_31_IT_CDPOS_FLIP_FLOP_CASES B 

INNER JOIN PM_05_IT_ADD_START_END A
	-- Join TIBAN with PM with Supplier and Tabname = 'LFBK'
ON B.B24_31_ZF_CDPOS_LIFNR = A.ACDOCA_LIFNR_PAY AND A.ACDOCA_LIFNR_PAY IS NOT NULL

	-- Check if payment documents were found in payment programs
WHERE NOT EXISTS (
    SELECT TOP 1 1
    FROM B24_20_IT_REGUH_CDPOS_BANK_CHANGES
    WHERE B24_20_REGUH_ZBUKR = ACDOCA_BUKRS_PAY AND B24_20_REGUH_VBLNR = ACDOCA_BELNR_PAY AND YEAR(B24_20_REGUH_LAUFD) = ACDOCA_GJAHR_PAY
)
	--- Filter Change Document between flip-flop date
	AND  ACDOCA_CPUDT_PAY BETWEEN B24_31_ZF_CDHDR_UDATE_1ST AND B24_31_ZF_CDHDR_UDATE_CHG_BACK
ORDER BY ZF_DOCUMENT_FLOW_KEY




--- Append all the change to the main vertical table
EXEC SP_DROPTABLE PM_05_TT_VERTICAL_ADD_CHANGE

SELECT *
INTO PM_05_TT_VERTICAL_ADD_CHANGE
FROM PM_02_TT_VERTICAL_TABLE
UNION 
SELECT * FROM PM_05A_TT_EINKBELEG
UNION 
SELECT * FROM PM_05B_TT_INCOMINGINVOICE
UNION 
SELECT * FROM PM_05C_TT_IBAN
UNION ALL
SELECT * FROM PM_05D_TT_BELEG_INV
UNION 
SELECT * FROM PM_05E_TT_BELEG_PAY
UNION 
SELECT * FROM PM_05F_TT_KRED_LFB1
UNION 
SELECT * FROM PM_05G_TT_KRED_LFA1
UNION 
SELECT * FROM PM_05H_TT_CDPOS_BANK_CHANGES_REGUH
UNION 
SELECT * FROM PM_05I_TT_SUP_DIRECT_PAY


--Filter out the PO price change that exist in the flow
EXEC SP_DROPTABLE PM_05J_RT_PO_PRICE_CHANGE

SELECT DISTINCT A.*
INTO PM_05J_RT_PO_PRICE_CHANGE
FROM B24_02A_IT_CDHDR_CDPOS_PO_PRICE AS A
	JOIN  PM_05_IT_ADD_START_END AS B
	ON   B24_02_CDHDR_OBJECTID=EKPO_EBELN
	WHERE 
	 B24_02_CDHDR_UDATE BETWEEN B.ZF_START_DATE AND B.ZF_END_DATE

--Step 6 Sorting the the table base on the document_flow_key, dates, and stage

	EXEC SP_DROPTABLE PM_06_TT_GLOBAL_VERTICAL_SORT
	SELECT  ROW_NUMBER() OVER (ORDER BY ZF_DOCUMENT_FLOW_KEY, ZF_DATE_USED_IN_MODEL,ZF_TIME_USED_IN_MODEL, ZF_STAGE) AS ZF_ROW_ID,
	*,'' AS ZF_PO_HAS_PRICE_CHANGE INTO PM_06_TT_GLOBAL_VERTICAL_SORT FROM PM_05_TT_VERTICAL_ADD_CHANGE
	ORDER BY ZF_DOCUMENT_FLOW_KEY, ZF_DATE_USED_IN_MODEL,ZF_TIME_USED_IN_MODEL, ZF_STAGE

	CREATE CLUSTERED INDEX PM_06_TT_GLOBAL_VERTICAL_INDEX 
	ON PM_06_TT_GLOBAL_VERTICAL_SORT(ZF_DOCUMENT_FLOW_KEY, ZF_DATE_USED_IN_MODEL,ZF_TIME_USED_IN_MODEL, ZF_STAGE)
--Step 7 Add a flag for Po that has price change

	UPDATE PM_06_TT_GLOBAL_VERTICAL_SORT 
	SET ZF_PO_HAS_PRICE_CHANGE='X' WHERE 
	ZF_DOCUMENT_FLOW_KEY IN
	(
	SELECT ZF_DOCUMENT_FLOW_KEY
	FROM PM_05_TT_VERTICAL_ADD_CHANGE
	WHERE  ZF_CONCECPT_NAME='2_PURCHASE_ORDER' OR ZF_CONCECPT_NAME='6_PO_PRICE_CHANGE' 
	GROUP BY ZF_DOCUMENT_FLOW_KEY
	HAVING COUNT(ZF_DOCUMENT_FLOW_KEY)>2
	)

--Step 8 Create the data model table, base on the script from Hung
--Get the document_flow_key, Node_from, Node_to, path description, product_flag, po_flag
--The path description is created base on the DOCUMENT_FLOW_KEY
--Join PM_02_TT_GLOBAL_VERTICAL to itself, base on the DOCUMENT_FLOW_KEY, then create a string by using XML

--To get the NODE_TO, Join PM_02_TT_GLOBAL_VERTICAL to itself,base on the DOCUMENT_FLOW_KEY
--Then Get the first line, where A.ROW_ID < C.ROW_ID and A.CONCECPT_NAME <> C.CONCECPT_NAME

--Create ID for each user, which will be user for network chart (network on used interger only)
EXEC SP_DROPTABLE 'TEMP1'
SELECT DISTINCT 
IDENTITY(INT,1,1) AS ZF_USER_ID,
ZF_USER,ZF_NAME_OF_USER
INTO TEMP1
FROM PM_06_TT_GLOBAL_VERTICAL_SORT

--Add the ID back to the main cube
EXEC SP_DROPTABLE 'TEMP2'

SELECT A.*, B.ZF_USER_ID
INTO TEMP2
FROM
PM_06_TT_GLOBAL_VERTICAL_SORT AS A
LEFT JOIN 
TEMP1 AS B
ON A.ZF_USER=B.ZF_USER

--Create the data model table
EXEC SP_DROPTABLE PM_07_TT_NODE_FROM_TO

SELECT  A.ZF_DOCUMENT_FLOW_KEY,
		A.ZF_DATE_USED_IN_MODEL,
		B.ZF_DATE_USED_IN_MODEL AS ZF_DATE_USED_IN_MODEL_TO,
		A.ZF_TIME_USED_IN_MODEL,
		B.ZF_TIME_USED_IN_MODEL AS ZF_TIME_USED_IN_MODEL_TO,
		A.ZF_DOCUMENT_NUMBER, A.ZF_COMPANY_CURRENCY,
		A.ZF_CONCECPT_NAME as ZF_NODE_FROM,
		B.ZF_CONCECPT_NAME AS ZF_NODE_TO,
		STUFF((SELECT '->' + E.ZF_CONCECPT_NAME 
							 FROM TEMP2 AS E
							 WHERE E.ZF_DOCUMENT_FLOW_KEY = A.ZF_DOCUMENT_FLOW_KEY 
							 ORDER BY E.ZF_DOCUMENT_FLOW_KEY, E.ZF_DATE_USED_IN_MODEL,E.ZF_TIME_USED_IN_MODEL,E.ZF_STAGE -- Khoi: should add order, to prenvent incorrect order of the flow if activity happen in the same time
							 FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')
							 ,1,2,'') AS ZF_PATH_DESC,
		A.ZF_PRODUCT_FLAG,
		A.ZF_PAYMENT_HAS_PO_FLAG,
		A.ZF_INVOICE_HAS_PO_FLAG,
		A.ZF_PO_HAS_PRICE_CHANGE,
		A.ZF_USER_ID,
		A.ZF_USER AS ZF_INTEGER_FOR_USER ,
		A.ZF_NAME_OF_USER,
		CONCAT(A.ZF_STAGE,'_',A.ZF_NAME_OF_USER) AS ZF_USER_WITH_STAGE,
		B.ZF_USER_ID AS ZF_USER_ID_TO,
		B.ZF_USER AS ZF_INTEGER_FOR_USER_TO ,
		B.ZF_NAME_OF_USER as ZF_NAME_OF_USER_TO,
		CONCAT(B.ZF_STAGE,'_',B.ZF_NAME_OF_USER) AS ZF_USER_TO_WITH_STAGE,
		A.ZF_AMOUNT_COC,
		A.ZF_AMOUNT_CUC,
		A.ZF_AMOUNT_CUC2,
		A.ZF_AMOUNT_CUC3,
		A.ZF_COMPANY_CODE,
		A.ZF_DOCUMENT_TYPE,
	ROW_NUMBER() OVER (PARTITION BY A.ZF_DOCUMENT_FLOW_KEY ORDER BY A.ZF_DOCUMENT_FLOW_KEY,A.ZF_DATE_USED_IN_MODEL,A.ZF_TIME_USED_IN_MODEL,A.ZF_STAGE) AS ZF_STAGE
INTO PM_07_TT_NODE_FROM_TO 
FROM TEMP2 AS A 
OUTER APPLY (
		SELECT TOP 1 * 
		FROM TEMP2 AS C 
		WHERE A.ZF_DOCUMENT_FLOW_KEY = C.ZF_DOCUMENT_FLOW_KEY AND
			  A.ZF_ROW_ID < C.ZF_ROW_ID ) AS B

/*
EXEC SP_DROPTABLE PM_07_TT_NODE_FROM_TO

SELECT  A.ZF_DOCUMENT_FLOW_KEY,
		A.ZF_DATE_USED_IN_MODEL,
		B.ZF_DATE_USED_IN_MODEL AS ZF_DATE_USED_IN_MODEL_TO,
		A.ZF_DOCUMENT_NUMBER, 
		A.ZF_CONCECPT_NAME as ZF_NODE_FROM,
		B.ZF_CONCECPT_NAME AS ZF_NODE_TO,
		STUFF((SELECT '->' + E.ZF_CONCECPT_NAME 
							 FROM PM_06_TT_GLOBAL_VERTICAL_SORT AS E
							 WHERE E.ZF_DOCUMENT_FLOW_KEY = A.ZF_DOCUMENT_FLOW_KEY 
							 FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')
							 ,1,2,'') AS ZF_PATH_DESC,
		A.ZF_PRODUCT_FLAG,
		A.ZF_PAYMENT_HAS_PO_FLAG,
		A.ZF_INVOICE_HAS_PO_FLAG,
		A.ZF_PO_HAS_PRICE_CHANGE,
		A.ZF_USER AS ZF_INTEGER_FOR_USER ,
		A.ZF_NAME_OF_USER,
		A.ZF_AMOUNT_COC,
		A.ZF_AMOUNT_CUC,
		A.ZF_COMPANY_CODE,
		A.ZF_DOCUMENT_TYPE,
		ROW_NUMBER() OVER (PARTITION BY A.ZF_DOCUMENT_FLOW_KEY ORDER BY A.ZF_DOCUMENT_FLOW_KEY) AS ZF_STAGE
INTO PM_07_TT_NODE_FROM_TO 
FROM PM_06_TT_GLOBAL_VERTICAL_SORT AS A 
OUTER APPLY (
		SELECT TOP 1 * 
		FROM PM_06_TT_GLOBAL_VERTICAL_SORT AS C 
		WHERE A.ZF_DOCUMENT_FLOW_KEY = C.ZF_DOCUMENT_FLOW_KEY AND
			  A.ZF_ROW_ID < C.ZF_ROW_ID ) AS B
*/
--Step 9 Replace the NULL value in NODE_TO with 'END'

UPDATE PM_07_TT_NODE_FROM_TO
SET ZF_NODE_TO='18_END'
WHERE ZF_NODE_TO IS NULL

UPDATE PM_07_TT_NODE_FROM_TO
SET ZF_INTEGER_FOR_USER_TO='END'
WHERE ZF_INTEGER_FOR_USER_TO IS NULL

UPDATE PM_07_TT_NODE_FROM_TO
SET ZF_NAME_OF_USER_TO='END'
WHERE ZF_NAME_OF_USER_TO IS NULL

UPDATE PM_07_TT_NODE_FROM_TO
SET ZF_USER_TO_WITH_STAGE='18_END'
WHERE ZF_USER_TO_WITH_STAGE='_'

UPDATE PM_07_TT_NODE_FROM_TO
SET ZF_DATE_USED_IN_MODEL_TO=ZF_DATE_USED_IN_MODEL
WHERE ZF_DATE_USED_IN_MODEL_TO IS NULL

UPDATE PM_07_TT_NODE_FROM_TO
SET ZF_USER_ID_TO=(SELECT MAX(ZF_USER_ID)+1 FROM TEMP1)
WHERE ZF_USER_ID_TO IS NULL

EXEC SP_DROPTABLE 'TEMP1'
EXEC SP_DROPTABLE 'TEMP2'
/*
UPDATE PM_07_TT_NODE_FROM_TO
SET ZF_NODE_TO='18_END'
WHERE ZF_NODE_TO IS NULL

UPDATE PM_07_TT_NODE_FROM_TO
SET ZF_DATE_USED_IN_MODEL_TO=ZF_DATE_USED_IN_MODEL
WHERE ZF_DATE_USED_IN_MODEL_TO IS NULL
*/
--Step 10 Create the Start Node, by getting the first date of each flow, then add them back to the data model
--Sorting the table base on document flow key, and date

EXEC SP_DROPTABLE PM_08_TT_NODE_FROM_TO_SORT
SELECT * INTO PM_08_TT_NODE_FROM_TO_SORT FROM PM_07_TT_NODE_FROM_TO
ORDER BY ZF_DOCUMENT_FLOW_KEY, ZF_DATE_USED_IN_MODEL,ZF_TIME_USED_IN_MODEL,ZF_STAGE

CREATE CLUSTERED INDEX PM_05_TT_PROCESS_MINING ON PM_08_TT_NODE_FROM_TO_SORT(ZF_DOCUMENT_FLOW_KEY, ZF_DATE_USED_IN_MODEL,ZF_TIME_USED_IN_MODEL,ZF_STAGE)

--Step 11 Create Start node for each flow
/*
EXEC SP_DROPTABLE PM_09_TT_ADD_START_NODE

SELECT * 
INTO PM_09_TT_ADD_START_NODE
FROM PM_08_TT_NODE_FROM_TO_SORT
UNION ALL 
SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,
				C.ZF_DATE_USED_IN_MODEL,
				C.ZF_DATE_USED_IN_MODEL AS ZF_DATE_USED_IN_MODEL_TO,
				C.ZF_DOCUMENT_NUMBER,
				'0_START' AS 'ZF_NODE_FROM' ,
				C.ZF_NODE_FROM AS 'ZF_NODE_TO',
				C.ZF_PATH_DESC,
				C.ZF_PRODUCT_FLAG,
				C.ZF_PAYMENT_HAS_PO_FLAG,
				C.ZF_INVOICE_HAS_PO_FLAG,
				C.ZF_PO_HAS_PRICE_CHANGE,
				'START' AS 'ZF_INTEGER_FOR_USER',
				'0_START' AS ZF_NAME_OF_USER,
				C.ZF_AMOUNT_COC,
				C.ZF_AMOUNT_CUC,
				C.ZF_COMPANY_CODE,
				C.ZF_DOCUMENT_TYPE,
				C.ZF_STAGE
FROM PM_08_TT_NODE_FROM_TO_SORT AS A
OUTER APPLY(
			SELECT TOP 1 * FROM PM_08_TT_NODE_FROM_TO_SORT AS B 
			WHERE A.ZF_DOCUMENT_FLOW_KEY= B.ZF_DOCUMENT_FLOW_KEY  ) AS C

*/

EXEC SP_DROPTABLE PM_09_TT_ADD_START_NODE

SELECT * 
INTO PM_09_TT_ADD_START_NODE
FROM PM_08_TT_NODE_FROM_TO_SORT
UNION ALL 
SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,
				C.ZF_DATE_USED_IN_MODEL,
				C.ZF_DATE_USED_IN_MODEL AS ZF_DATE_USED_IN_MODEL_TO,
				C.ZF_TIME_USED_IN_MODEL,
				C.ZF_TIME_USED_IN_MODEL AS ZF_TIME_USED_IN_MODEL_TO,
				C.ZF_DOCUMENT_NUMBER,C.ZF_COMPANY_CURRENCY,
				'0_START' AS 'ZF_NODE_FROM' ,
				C.ZF_NODE_FROM AS 'ZF_NODE_TO',
				C.ZF_PATH_DESC,
				C.ZF_PRODUCT_FLAG,
				C.ZF_PAYMENT_HAS_PO_FLAG,
				C.ZF_INVOICE_HAS_PO_FLAG,
				C.ZF_PO_HAS_PRICE_CHANGE,
				0 AS ZF_USER_ID,
				'START' AS 'ZF_INTEGER_FOR_USER',
				'START' AS ZF_NAME_OF_USER,
				'0_START' AS ZF_USER_WITH_STAGE,
				C.ZF_USER_ID AS ZF_USER_ID_TO,
				C.ZF_INTEGER_FOR_USER AS  ZF_INTEGER_FOR_USER_TO,
				C.ZF_NAME_OF_USER AS ZF_NAME_OF_USER_TO,
				C.ZF_USER_WITH_STAGE AS ZF_USER_TO_WITH_STAGE,
				C.ZF_AMOUNT_COC,
				C.ZF_AMOUNT_CUC,
				C.ZF_AMOUNT_CUC2,
				C.ZF_AMOUNT_CUC3,
				C.ZF_COMPANY_CODE,
				C.ZF_DOCUMENT_TYPE,
				C.ZF_STAGE
FROM PM_08_TT_NODE_FROM_TO_SORT AS A
OUTER APPLY(
			SELECT TOP 1 * FROM PM_08_TT_NODE_FROM_TO_SORT AS B 
			WHERE A.ZF_DOCUMENT_FLOW_KEY= B.ZF_DOCUMENT_FLOW_KEY 	
			ORDER BY B.ZF_DOCUMENT_FLOW_KEY,B.ZF_DATE_USED_IN_MODEL,B.ZF_TIME_USED_IN_MODEL) AS C

-- Step 12 Add list of node into QLIK, This list will be used for the Node filter.


EXEC SP_DROPTABLE 'PM_10_RT_NODE_LIST'
SELECT *  
INTO PM_10_RT_NODE_LIST FROM(

SELECT DISTINCT ZF_PATH_DESC, ZF_NODE_FROM as 'ZF_NODE' FROM PM_09_TT_ADD_START_NODE
UNION 
SELECT DISTINCT ZF_PATH_DESC, ZF_NODE_TO as 'ZF_NODE' FROM PM_09_TT_ADD_START_NODE 
) AS A
WHERE A.ZF_NODE <> '0_START' AND A.ZF_NODE <> '18_END'


-- Step 13. Create a flag for paths which only have 1 Node.(Example: 0_START --> 2_PURCHASE_ORDER --> 18_END)
--Step 13.1
--Create a temporary table to get list of paths and number of rows for each path. For each Path_Description, if it has only 2 rows, it means the path only has 1 nodes
-- Example
--		PATH_DESC				NODE_FROM				NODE_TO
--		2_PURCHASE_ORDER		0_START					2_PURCHASE_ORDER
--		2_PURCHASE_ORDER		2_PURCHASE_ORDER		18_END
EXEC SP_DROPTABLE 'TEMP1'
SELECT ZF_PATH_DESC ,
IIF(COUNT(DISTINCT CONCAT(ZF_NODE_FROM, ZF_NODE_TO)) = 2 ,'X', '') AS ZF_ONE_NODE_FLAG
INTO TEMP1
FROM PM_09_TT_ADD_START_NODE
GROUP BY ZF_PATH_DESC
--Step 13.2 Create a list of contains the start node each ath
EXEC SP_DROPTABLE 'TEMP2'
SELECT DISTINCT ZF_PATH_DESC,ZF_NODE_TO AS ZF_START_NODE INTO TEMP2
FROM PM_09_TT_ADD_START_NODE
WHERE ZF_NODE_FROM='0_START'
--Step 13.3 Create the list of path description
--Add the id for it, sort by number of flow per path desc
EXEC SP_DROPTABLE 'TEMP3'

SELECT
IDENTITY(INT,1,1) AS ZF_PATH_NUMBER ,
ZF_PATH_DESC INTO TEMP3
FROM PM_09_TT_ADD_START_NODE
GROUP BY ZF_PATH_DESC
ORDER BY COUNT(DISTINCT ZF_DOCUMENT_FLOW_KEY) DESC


--Step 13.4 Add the path id number, start node, flag for path that has only one node
EXEC SP_DROPTABLE PM_11_RT_PROCESS_MINING
SELECT DISTINCT A.*,ZF_ONE_NODE_FLAG,ZF_START_NODE,@currency AS ZF_GLOBAL_CURRENCY,
CONCAT('#',ZF_PATH_NUMBER) AS ZF_PATH_NUMBER
INTO PM_11_RT_PROCESS_MINING FROM PM_09_TT_ADD_START_NODE AS A
LEFT JOIN TEMP1 ON A.ZF_PATH_DESC=TEMP1.ZF_PATH_DESC
LEFT JOIN TEMP2 ON A.ZF_PATH_DESC=TEMP2.ZF_PATH_DESC
LEFT JOIN TEMP3 ON A.ZF_PATH_DESC=TEMP3.ZF_PATH_DESC

--Step 13.5 Remove temporary table
EXEC SP_DROPTABLE 'TEMP1'
EXEC SP_DROPTABLE 'TEMP2'
EXEC SP_DROPTABLE 'TEMP3'

EXEC SP_REMOVE_TABLES '%TEMP%'

--Step 14 Create the list of document type description for Invoice and payment
--Step 14.1 DOcument type table for invoice
EXEC SP_DROPTABLE PM_12_RT_INV_DOCUMENT_TYPE
SELECT DISTINCT ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY ,
B11B_SS02_T003T_LTEXT_INV AS ZF_DOCUMENT_TYPE
INTO PM_12_RT_INV_DOCUMENT_TYPE
FROM B27_01_IT_PTP_GLOBAL_TABLE
 WHERE ACDOCA_CPUDT_INV IS NOT NULL
 --Step 14.2 DOcument type table for Payemnt
 EXEC SP_DROPTABLE PM_13_RT_PAY_DOCUMENT_TYPE
SELECT DISTINCT ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY ,
B11B_SS02_T003T_LTEXT_PAY AS ZF_DOCUMENT_TYPE
INTO PM_13_RT_PAY_DOCUMENT_TYPE
FROM B27_01_IT_PTP_GLOBAL_TABLE
 WHERE ACDOCA_CPUDT_PAY IS NOT NULL

 --Step 15 Number of Step table
 --Create a list of step for each path desc, which will be use for filter
 EXEC SP_REMOVE_TABLES PM_14_RT_NUMBER_OF_STEP
SELECT DISTINCT ZF_STEP_NUMBER,ZF_PATH_DESC
INTO PM_14_RT_NUMBER_OF_STEP
FROM
(
SELECT COUNT(ZF_DOCUMENT_FLOW_KEY)-1 AS ZF_STEP_NUMBER,ZF_PATH_DESC,ZF_DOCUMENT_FLOW_KEY
FROM PM_11_RT_PROCESS_MINING
GROUP BY ZF_PATH_DESC,ZF_DOCUMENT_FLOW_KEY
) AS A

--Step 16 SOD
--Step 16.1 Remove case has "delete" and "Block" 
--PMSOD_01_TT_REM_BLOCK_DEL
EXEC SP_REMOVE_TABLES PM_15_TT_REM_BLOCK_DEL

SELECT DISTINCT * 
INTO PM_15_TT_REM_BLOCK_DEL
FROM PM_11_RT_PROCESS_MINING
WHERE ZF_DOCUMENT_FLOW_KEY NOT IN
(
SELECT DISTINCT ZF_DOCUMENT_FLOW_KEY FROM PM_11_RT_PROCESS_MINING
WHERE (ZF_PATH_DESC LIKE '%DELETE%' OR ZF_PATH_DESC LIKE '%BLOCK%' )
)
--Step 16.2 Get the case that has been "Approval", and the number of user per flow
--Remove the flow that has more than 2 user doing approval
EXEC SP_REMOVE_TABLES PM_16_TT_REMOVE_MULTI_USER

SELECT *
INTO PM_16_TT_REMOVE_MULTI_USER
FROM PM_15_TT_REM_BLOCK_DEL
WHERE ZF_DOCUMENT_FLOW_KEY NOT IN
(
	SELECT ZF_DOCUMENT_FLOW_KEY
	FROM PM_11_RT_PROCESS_MINING
	WHERE ZF_PATH_DESC LIKE '%APPROVAL%'
	GROUP BY ZF_DOCUMENT_FLOW_KEY
	HAVING COUNT(DISTINCT ZF_INTEGER_FOR_USER)>=2
)
--Step 16.3 Remove billing documents if there are FI invoices for the flow
EXEC SP_DROPTABLE 'TT_TEMP1'

--Get the flow that has FI and MM invoices
SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY 
INTO TT_TEMP1
FROM
(SELECT * FROM PM_16_TT_REMOVE_MULTI_USER
WHERE ZF_NODE_FROM='8.1_MM_INVOICE') AS A
JOIN
(SELECT * FROM PM_16_TT_REMOVE_MULTI_USER
WHERE ZF_NODE_FROM='8.2_INVOICE_RECEIPT') AS  B
ON A.ZF_DOCUMENT_FLOW_KEY=B.ZF_DOCUMENT_FLOW_KEY

--Add the flag for the flow that has FI and MM invoices
EXEC SP_DROPTABLE 'TT_TEMP2'
SELECT PM_16_TT_REMOVE_MULTI_USER.*,
TT_TEMP1.ZF_DOCUMENT_FLOW_KEY AS ZF_FLAG
INTO TT_TEMP2
FROM 
PM_16_TT_REMOVE_MULTI_USER
LEFT JOIN TT_TEMP1
ON TT_TEMP1.ZF_DOCUMENT_FLOW_KEY=PM_16_TT_REMOVE_MULTI_USER.ZF_DOCUMENT_FLOW_KEY
--Remove the billing document base on the flag
EXEC SP_DROPTABLE TT_TEMP3

SELECT *
INTO TT_TEMP3
FROM TT_TEMP2
WHERE NOT(ZF_FLAG IS NOT NULL AND ZF_NODE_FROM='8.1_MM_INVOICE')

-- Step 16.3 Create the SOD table which has the flow ID, user, and SOD description
--Step 16.3.1 Get the list of Flow which has more than 1 activithy
EXEC SP_DROPTABLE 'TEMP1'
SELECT ZF_DOCUMENT_FLOW_KEY,ZF_INTEGER_FOR_USER,COUNT(DISTINCT ZF_NODE_FROM) AS A,
ZF_NAME_OF_USER
INTO TEMP1
FROM TT_TEMP3
WHERE ZF_NODE_FROM <>'0_START'
GROUP BY ZF_DOCUMENT_FLOW_KEY,ZF_INTEGER_FOR_USER,ZF_NAME_OF_USER
HAVING COUNT(DISTINCT ZF_NODE_FROM)>1


--Step 16.3.2 Add the SOD decs scription
EXEC SP_REMOVE_TABLES 'PM_17_RT_SOD_TABLE'
SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,A.ZF_NAME_OF_USER, A.ZF_INTEGER_FOR_USER,'User who enters '+SUBSTRING(
        (
            SELECT ' and ' + SUBSTRING(REPLACE(ZF_NODE_FROM,' ','_'),CHARINDEX('_',ZF_NODE_FROM)+1,LEN(ZF_NODE_FROM)-CHARINDEX('_',ZF_NODE_FROM))
			AS [text()]
            FROM (SELECT DISTINCT ZF_DOCUMENT_FLOW_KEY,ZF_NODE_FROM,ZF_INTEGER_FOR_USER FROM TT_TEMP3 ) AS B
            WHERE A.ZF_DOCUMENT_FLOW_KEY = B.ZF_DOCUMENT_FLOW_KEY AND A.ZF_INTEGER_FOR_USER=B.ZF_INTEGER_FOR_USER
			AND B.ZF_NODE_FROM <>'0_START'
			ORDER BY B.ZF_DOCUMENT_FLOW_KEY,B.ZF_NODE_FROM
            FOR XML PATH ('')
        ),6,1000) + +' 'ZF_SOD_DESC
		INTO PM_17_RT_SOD_TABLE
FROM TEMP1 AS A

--Update the value 
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC,'PURCHASE_REQUEST' , 'Purchase request')
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC,'PURCHASE_ORDER' , 'Purchase order')
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC,'GOOD_RECEIPT' , 'Good receipt')
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC,'INVOICE_RECEIPT' , 'Invoice receipt')
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC,'MM_INVOICE' , 'MM invoice receipt')
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC,'PAYMENT' , 'Payment' )
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC, 'PO_APPROVALS' , 'PO approval')
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC, 'PO_PRICE_CHANGE' , 'PO price change')
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC, 'CHANGE_TO_PO_AMOUNT' , 'PO amount change')
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC, 'CHANGE_TO_INVOICE_VALUE' , 'invoice value change')
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC, 'CHANGE_TO_FI_INVOICE_VALUE' , 'FI invoice value change')
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC, 'RELEASE_OF_INVOICE_REQUIRED' , 'relase of invoice required')
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC, 'SUPPLIER_IS_BLOCKED' , 'supplier is block')
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC, 'SUPPLIER_PAYMENT_TERMS' , 'supplier payment term')
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC, 'CHANGE_TO_PAYMENT_METHOD', 'supplier payment method')
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC, 'CHANGE_TO_PAYMENT_BLOCK' , 'supplier payment block change')
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC, 'CHANGE_TO_RELEASE_GROUP' , 'supplier release group change')
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC, 'CHANGE_TO_RELEASE_STRATEGY' , 'supplier release strategy change')
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC, 'PAY_BANK_CHANGE' , 'payment bank change')
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC, 'SUPPLIER_PAY_BANK_CHANGE' , 'payment supplier bank change')
UPDATE PM_17_RT_SOD_TABLE SET ZF_SOD_DESC=REPLACE(ZF_SOD_DESC, 'CHANGE_TO_IBAN' , 'IBAN change')

--Step 17 Time update
--Get the list of PM where the flow has more than 2 step
EXEC SP_DROPTABLE PM_18_TT_FILTER_FLOW
SELECT distinct * 
INTO PM_18_TT_FILTER_FLOW
FROM PM_11_RT_PROCESS_MINING
WHERE ZF_PATH_DESC IN
(
SELECT DISTINCT ZF_PATH_DESC FROM PM_14_RT_NUMBER_OF_STEP
WHERE ZF_STEP_NUMBER>=2
) 
--Step 18 Get the flow that has Node from is Purchase request,PO,
EXEC SP_DROPTABLE PM_19_RT_LEAD_TIME

SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,
A.ZF_NODE_FROM AS ZF_FROM,
A.ZF_DATE_USED_IN_MODEL AS ZF_DATE_FROM,
B.ZF_NODE_FROM AS ZF_TO,
B.ZF_DATE_USED_IN_MODEL AS ZF_DATE_TO,
'PR TO PO' AS 'ZF_LEAD_TIME_TYPE',
CASE
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) <-365 THEN '< -356 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -1 AND -30 THEN '-30 to -1 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -31 AND -90 THEN '-90 to -31 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -91 AND -180 THEN '-180 to -91 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -181 AND -270 THEN '-270 to -181 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -270 AND -365 THEN '-365 to -270 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL)=0 THEN '0 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 1 AND 30 THEN '1 to 30 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 31 AND 90 THEN '31 to 90 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 91 AND 180 THEN '91 to 180 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 181 AND 270 THEN '181 to 270 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 270 AND 365 THEN '271 to 365 days'
	ELSE '>365 days' END AS 'ZF_LEAD_TIME_DESC',
CASE
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL)<-365 THEN 1
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -270 AND -365 THEN 2
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -181 AND -270 THEN 3
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -91 AND -180 THEN 4
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -31 AND -90 THEN 5
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -1 AND -30 THEN 6
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL)=0 THEN 7
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 1 AND 30 THEN 8
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 31 AND 90 THEN 9
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 91 AND 180 THEN 10
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 181 AND 270 THEN 11
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 270 AND 365 THEN 12
	ELSE 13 END AS 'ZF_LEAD_TIME_DESC_ORDER'
INTO PM_19_RT_LEAD_TIME
FROM 
(
	SELECT * FROM PM_18_TT_FILTER_FLOW WHERE ZF_NODE_FROM='1_PURCHASE_REQUEST' 
)AS A
 JOIN PM_18_TT_FILTER_FLOW AS B
	ON A.ZF_DOCUMENT_FLOW_KEY=B.ZF_DOCUMENT_FLOW_KEY 
	AND B.ZF_NODE_FROM='2_PURCHASE_ORDER'
UNION
SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,
A.ZF_NODE_FROM AS ZF_FROM,
A.ZF_DATE_USED_IN_MODEL AS ZF_DATE_FROM,
B.ZF_NODE_FROM AS ZF_TO,
B.ZF_DATE_USED_IN_MODEL AS ZF_DATE_TO,
'PO TO GR' AS 'ZF_LEAD_TIME_TYPE',
CASE
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) <-365 THEN '< -356 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -1 AND -30 THEN '-30 to -1 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -31 AND -90 THEN '-90 to -31 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -91 AND -180 THEN '-180 to -91 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -181 AND -270 THEN '-270 to -181 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -270 AND -365 THEN '-365 to -270 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL)=0 THEN '0 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 1 AND 30 THEN '1 to 30 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 31 AND 90 THEN '31 to 90 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 91 AND 180 THEN '91 to 180 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 181 AND 270 THEN '181 to 270 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 270 AND 365 THEN '271 to 365 days'
	ELSE '>365 days' END AS 'ZF_LEAD_TIME_DESC',
CASE
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL)<-365 THEN 1
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -270 AND -365 THEN 2
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -181 AND -270 THEN 3
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -91 AND -180 THEN 4
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -31 AND -90 THEN 5
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -1 AND -30 THEN 6
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL)=0 THEN 7
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 1 AND 30 THEN 8
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 31 AND 90 THEN 9
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 91 AND 180 THEN 10
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 181 AND 270 THEN 11
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 270 AND 365 THEN 12
	ELSE 13 END AS 'ZF_LEAD_TIME_DESC_ORDER'
FROM 
(
	SELECT * FROM PM_18_TT_FILTER_FLOW WHERE ZF_NODE_FROM='2_PURCHASE_ORDER' 
)AS A
 JOIN PM_18_TT_FILTER_FLOW AS B
	ON A.ZF_DOCUMENT_FLOW_KEY=B.ZF_DOCUMENT_FLOW_KEY 
	AND B.ZF_NODE_FROM='7_GOOD_RECEIPT'
		AND A.ZF_DATE_USED_IN_MODEL<=B.ZF_DATE_USED_IN_MODEL
UNION
SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,
A.ZF_NODE_FROM AS ZF_FROM,
A.ZF_DATE_USED_IN_MODEL AS ZF_DATE_FROM,
B.ZF_NODE_FROM AS ZF_TO,
B.ZF_DATE_USED_IN_MODEL AS ZF_DATE_TO,
'PO TO INV' AS 'ZF_LEAD_TIME_TYPE',
CASE
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) <-365 THEN '< -356 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -1 AND -30 THEN '-30 to -1 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -31 AND -90 THEN '-90 to -31 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -91 AND -180 THEN '-180 to -91 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -181 AND -270 THEN '-270 to -181 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -270 AND -365 THEN '-365 to -270 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL)=0 THEN '0 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 1 AND 30 THEN '1 to 30 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 31 AND 90 THEN '31 to 90 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 91 AND 180 THEN '91 to 180 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 181 AND 270 THEN '181 to 270 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 270 AND 365 THEN '271 to 365 days'
	ELSE '>365 days' END AS 'ZF_LEAD_TIME_DESC',
CASE
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL)<-365 THEN 1
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -270 AND -365 THEN 2
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -181 AND -270 THEN 3
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -91 AND -180 THEN 4
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -31 AND -90 THEN 5
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -1 AND -30 THEN 6
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL)=0 THEN 7
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 1 AND 30 THEN 8
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 31 AND 90 THEN 9
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 91 AND 180 THEN 10
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 181 AND 270 THEN 11
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 270 AND 365 THEN 12
	ELSE 13 END AS 'ZF_LEAD_TIME_DESC_ORDER'
FROM 
(
	SELECT * FROM PM_18_TT_FILTER_FLOW WHERE ZF_NODE_FROM='2_PURCHASE_ORDER' 
)AS A
 JOIN PM_18_TT_FILTER_FLOW AS B
	ON A.ZF_DOCUMENT_FLOW_KEY=B.ZF_DOCUMENT_FLOW_KEY 
	AND B.ZF_NODE_FROM='8.2_INVOICE_RECEIPT'
	AND A.ZF_DATE_USED_IN_MODEL<=B.ZF_DATE_USED_IN_MODEL
UNION
SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,
A.ZF_NODE_FROM AS ZF_FROM,
A.ZF_DATE_USED_IN_MODEL AS ZF_DATE_FROM,
B.ZF_NODE_FROM AS ZF_TO,
B.ZF_DATE_USED_IN_MODEL AS ZF_DATE_TO,
'PO TO PAY' AS 'ZF_LEAD_TIME_TYPE',
CASE
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) <-365 THEN '< -356 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -1 AND -30 THEN '-30 to -1 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -31 AND -90 THEN '-90 to -31 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -91 AND -180 THEN '-180 to -91 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -181 AND -270 THEN '-270 to -181 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -270 AND -365 THEN '-365 to -270 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL)=0 THEN '0 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 1 AND 30 THEN '1 to 30 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 31 AND 90 THEN '31 to 90 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 91 AND 180 THEN '91 to 180 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 181 AND 270 THEN '181 to 270 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 270 AND 365 THEN '271 to 365 days'
	ELSE '>365 days' END AS 'ZF_LEAD_TIME_DESC',
CASE
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL)<-365 THEN 1
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -270 AND -365 THEN 2
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -181 AND -270 THEN 3
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -91 AND -180 THEN 4
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -31 AND -90 THEN 5
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN -1 AND -30 THEN 6
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL)=0 THEN 7
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 1 AND 30 THEN 8
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 31 AND 90 THEN 9
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 91 AND 180 THEN 10
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 181 AND 270 THEN 11
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 270 AND 365 THEN 12
	ELSE 13 END AS 'ZF_LEAD_TIME_DESC_ORDER'
FROM 
(
	SELECT * FROM PM_18_TT_FILTER_FLOW WHERE ZF_NODE_FROM='2_PURCHASE_ORDER' 
)AS A
 JOIN PM_18_TT_FILTER_FLOW AS B
	ON A.ZF_DOCUMENT_FLOW_KEY=B.ZF_DOCUMENT_FLOW_KEY 
	AND B.ZF_NODE_FROM='17_PAYMENT'
	AND A.ZF_DATE_USED_IN_MODEL<=B.ZF_DATE_USED_IN_MODEL
--Step 19 Create a table that show user and their activity (SOD only)
--Step 19.1 Creata a list of SOD user, and flag their activity
EXEC SP_DROPTABLE 'TEMP1'

SELECT DISTINCT ZF_INTEGER_FOR_USER,ZF_NAME_OF_USER,
IIF(ZF_SOD_DESC LIKE '%Purchase request%','X','') AS ZF_PURCHASE_REQUEST_FLAG,
IIF(ZF_SOD_DESC LIKE '%Purchase order%','X','') AS ZF_PURCHASE_ORDER_FLAG,
IIF(ZF_SOD_DESC LIKE '%Good receipt%','X','') AS ZF_GOOD_RECEIPT_FLAG,
IIF(ZF_SOD_DESC LIKE '%Invoice receipt%','X','') AS ZF_INVOICE_RECEIPT_FLAG,
IIF(ZF_SOD_DESC LIKE 'MM invoice receipt%','X','') AS ZF_MM_INVOICE_FLAG,
IIF(ZF_SOD_DESC LIKE '% enters Payment%' OR ZF_SOD_DESC LIKE '% and Payment%','X','') AS ZF_PAYMENT_FLAG,
IIF(ZF_SOD_DESC LIKE '%PO approval%','X','') AS ZF_PO_APPROVALS_FLAG,
IIF(ZF_SOD_DESC LIKE '%PO price change%','X','') AS ZF_PO_PRICE_CHANGE_FLAG,
IIF(ZF_SOD_DESC LIKE '%invoice value change%','X','') AS ZF_CHANGE_TO_INVOICE_VALUE_FLAG,
IIF(ZF_SOD_DESC LIKE '%PO amount change%','X','') AS ZF_CHANGE_TO_PO_AMOUNT_FLAG,
IIF(ZF_SOD_DESC LIKE '%FI invoice value change%','X','') AS ZF_CHANGE_TO_FI_INVOICE_VALUE_FLAG,
IIF(ZF_SOD_DESC LIKE '%relase of invoice required%','X','') AS ZF_RELEASE_OF_INVOICE_REQUIRED_FLAG,
IIF(ZF_SOD_DESC LIKE '%supplier is block%','X','') AS ZF_SUPPLIER_IS_BLOCKED_FLAG,
IIF(ZF_SOD_DESC LIKE 'supplier payment term%','X','') AS ZF_SUPPLIER_PAYMENT_TERMS_FLAG,
IIF(ZF_SOD_DESC LIKE '%supplier payment method%','X','') AS ZF_CHANGE_TO_PAYMENT_METHOD_FLAG,
IIF(ZF_SOD_DESC LIKE '%supplier payment block change%','X','') AS ZF_CHANGE_TO_PAYMENT_BLOCK_FLAG,
IIF(ZF_SOD_DESC LIKE '%supplier release group change%','X','') AS ZF_CHANGE_TO_RELEASE_GROUP_FLAG,
IIF(ZF_SOD_DESC LIKE '%supplier release strategy change%','X','') AS ZF_CHANGE_TO_RELEASE_STRATEGY_FLAG,
IIF(ZF_SOD_DESC LIKE '%payment bank change%','X','') AS ZF_PAY_BANK_CHANGE_FLAG,
IIF(ZF_SOD_DESC LIKE '%payment supplier bank change%','X','') AS ZF_SUPPLIER_PAY_BANK_CHANGE_FLAG,
IIF(ZF_SOD_DESC LIKE '%IBAN change%','X','') AS ZF_CHANGE_TO_IBAN_FLAG
INTO TEMP1
FROM PM_17_RT_SOD_TABLE



--Step 19.2 Append the row together, in order to all activity for 1 user
EXEC SP_DROPTABLE PM_20_RT_USER_SOD_ACTIVITY
SELECT DISTINCT ZF_INTEGER_FOR_USER,ZF_NAME_OF_USER,
'' AS ZF_OTC_FLAG,
MAX(ZF_PURCHASE_REQUEST_FLAG) AS ZF_PURCHASE_REQUEST_FLAG,
MAX(ZF_PURCHASE_ORDER_FLAG) AS ZF_PURCHASE_ORDER_FLAG,
MAX(ZF_GOOD_RECEIPT_FLAG) AS ZF_GOOD_RECEIPT_FLAG,
MAX(ZF_INVOICE_RECEIPT_FLAG) AS ZF_INVOICE_RECEIPT_FLAG,
MAX(ZF_MM_INVOICE_FLAG) AS ZF_MM_INVOICE_FLAG,
MAX(ZF_PAYMENT_FLAG) AS ZF_PAYMENT_FLAG,
MAX(ZF_PO_APPROVALS_FLAG) AS ZF_PO_APPROVALS_FLAG,
MAX(ZF_PO_PRICE_CHANGE_FLAG) AS ZF_PO_PRICE_CHANGE_FLAG,
MAX(ZF_CHANGE_TO_INVOICE_VALUE_FLAG) AS ZF_CHANGE_TO_INVOICE_VALUE_FLAG,
MAX(ZF_CHANGE_TO_PO_AMOUNT_FLAG) AS ZF_CHANGE_TO_PO_AMOUNT_FLAG,
MAX(ZF_CHANGE_TO_FI_INVOICE_VALUE_FLAG) AS ZF_CHANGE_TO_FI_INVOICE_VALUE_FLAG,
MAX(ZF_RELEASE_OF_INVOICE_REQUIRED_FLAG) AS ZF_RELEASE_OF_INVOICE_REQUIRED_FLAG,
MAX(ZF_SUPPLIER_IS_BLOCKED_FLAG) AS ZF_SUPPLIER_IS_BLOCKED_FLAG,
MAX(ZF_SUPPLIER_PAYMENT_TERMS_FLAG) AS ZF_SUPPLIER_PAYMENT_TERMS_FLAG,
MAX(ZF_CHANGE_TO_PAYMENT_METHOD_FLAG) AS ZF_CHANGE_TO_PAYMENT_METHOD_FLAG,
MAX(ZF_CHANGE_TO_PAYMENT_BLOCK_FLAG) AS ZF_CHANGE_TO_PAYMENT_BLOCK_FLAG,
MAX(ZF_CHANGE_TO_RELEASE_GROUP_FLAG) AS ZF_CHANGE_TO_RELEASE_GROUP_FLAG,
MAX(ZF_CHANGE_TO_RELEASE_STRATEGY_FLAG) AS ZF_CHANGE_TO_RELEASE_STRATEGY_FLAG,
MAX(ZF_PAY_BANK_CHANGE_FLAG) AS ZF_PAY_BANK_CHANGE_FLAG,
MAX(ZF_SUPPLIER_PAY_BANK_CHANGE_FLAG) AS ZF_SUPPLIER_PAY_BANK_CHANGE_FLAG,
MAX(ZF_CHANGE_TO_IBAN_FLAG) AS ZF_CHANGE_TO_IBAN_FLAG
INTO PM_20_RT_USER_SOD_ACTIVITY
FROM TEMP1
GROUP BY ZF_INTEGER_FOR_USER,ZF_NAME_OF_USER

--Step 20 Remove all temporary table 
EXEC SP_REMOVE_TABLES 'TEMP%'
EXEC SP_REMOVE_TABLES '%_TT_%'
EXEC SP_REMOVE_TABLES 'TT_%'

GO
