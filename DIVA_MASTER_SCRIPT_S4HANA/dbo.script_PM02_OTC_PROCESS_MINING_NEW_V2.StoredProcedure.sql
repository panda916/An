USE [DIVA_MASTER_SCRIPT_S4HANA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[script_PM02_OTC_PROCESS_MINING_NEW_V2]
AS

--DYNAMIC_SCRIPT_START
	   DECLARE 	 
			 @currency nvarchar(max)			= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'currency')
			,@date1 nvarchar(max)				= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'date1')
			,@date2 nvarchar(max)				= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'date2')
			,@downloaddate nvarchar(max)		= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'downloaddate')
			,@exchangeratetype nvarchar(max)	= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'exchangeratetype')
			,@language1 nvarchar(max)			= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'language1')
			,@language2 nvarchar(max)			= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'language2')
			,@year nvarchar(max)				= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'year')
			,@id nvarchar(max)					= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'id')
			,@ZV_LIMIT nvarchar(max)		    = (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'ZV_LIMIT')
			,@errormsg NVARCHAR(MAX)
			
EXEC SP_REMOVE_TABLES 'PM_OTC_%'
--Step 1 Add the flags for the mainflow
EXEC SP_REMOVE_TABLES 'PM_OTC_01_TT_ADD_FLAG_GLOBAL'

SELECT B31_05_IT_CENTER_FACT_TABLE_ADD_INV_PAY.*,
CASE WHEN  
	ISNULL(B28_VBAK_VBELN,'')<>'' AND ISNULL(B14_01_ZF_CUSTOMER_INVOICE_KEY,'')<>'' THEN 'X'
	ELSE '' END  ZF_INVOICE_HAS_SO_FLAG,
CASE WHEN 
	ISNULL(B28_VBAK_VBELN,'')<>'' AND ISNULL(B14_03_ZF_CUSTOMER_PAYMENT_KEY,'') <>'' THEN 'X'
	ELSE '' END   ZF_PAYMENT_HAS_SO_FLAG
INTO PM_OTC_01_TT_ADD_FLAG_GLOBAL
FROM B31_05_IT_CENTER_FACT_TABLE_ADD_INV_PAY



--sTEP 2 Convert the horizontal table to vertical table ,
--Remove the null values (Because some paths don't have all the nodes)

EXEC SP_REMOVE_TABLES PM_OTC_02_TT_VERTICAL_TABLE

--Add Sale order cube keys
SELECT DISTINCT ZF_DOCUMENT_FLOW_KEY,
		B28_ZF_SALE_ORDER_KEY AS ZF_DOCUMENT_NUMBER,
		B28_VBAP_ERDAT AS  'ZF_DATE_USED_IN_MODEL',
		B28_VBAK_ERNAM AS 'ZF_USER',
		B28_ZF_VBAK_ERNAM_TEXT AS 'ZF_NAME_OF_USER',
		B28_ZF_VBAP_NETWR_S AS 'ZF_AMOUNT_COC',
		B28_ZF_VBAP_NETWR_S_CUC AS 'ZF_AMOUNT_CUC',
		B28_ZF_VBAP_NETWR_S_CUC AS 'ZF_AMOUNT_CUC2',
		B28_ZF_VBAP_NETWR_S_CUC AS 'ZF_AMOUNT_CUC3',
		B28_VBAK_KUNNR AS 'ZF_CUSTOMER',
		B28_TVKO_BUKRS AS 'ZF_COMPANY_CODE',
		CONCAT('2_',IIF(B28_ZF_DD07T_DDTEXT_VBTYP='Delivery','Delivery(SO)',B28_ZF_DD07T_DDTEXT_VBTYP)) AS ZF_CONCECPT_NAME_WITH_NUM,
		IIF(B28_ZF_DD07T_DDTEXT_VBTYP='Delivery','Delivery(SO)',B28_ZF_DD07T_DDTEXT_VBTYP) AS ZF_CONCECPT_NAME,
		B28_VBAK_AUART AS ZF_DOCUMENT_TYPE,
		ZF_INVOICE_HAS_SO_FLAG,
		ZF_PAYMENT_HAS_SO_FLAG,
		2 AS ZF_STAGE,
		'' AS ZF_BILLING_DOCUMENT,
		'X' AS ZF_SALE_DOC,
		B28_VBAK_WAERK AS ZF_DOCUMENT_CURRENCY
	INTO PM_OTC_02_TT_VERTICAL_TABLE
FROM PM_OTC_01_TT_ADD_FLAG_GLOBAL 
WHERE ISNULL(B28_VBAP_ERDAT,'')<>''
----Add delivery keys
UNION
SELECT DISTINCT ZF_DOCUMENT_FLOW_KEY,
		B29_ZF_SALE_DELIVERY_DOC_KEY AS ZF_DOCUMENT_NUMBER,
		B29_LIKP_ERDAT AS  'ZF_DATE_USED_IN_MODEL',
		B29_LIKP_ERNAM AS 'ZF_USER',
		B29_ZF_LIKP_ERNAM_TEXT,
		B29_ZF_LIPS_NETWR AS 'ZF_AMOUNT_COC',
		B29_ZF_LIPS_NETWR_CUC AS 'ZF_AMOUNT_CUC',
		B29_ZF_LIPS_NETWR_CUC AS 'ZF_AMOUNT_CUC2',
		B29_ZF_LIPS_NETWR_CUC AS 'ZF_AMOUNT_CUC3',
		B29_LIKP_KUNAG AS 'ZF_CUSTOMER',
		B29_TVKO_BUKRS AS 'ZF_COMPANY_CODE',
		'4_Delivery' AS 'ZF_CONCECPT_NAME_WITH_NUM',
		'Delivery' AS ZF_CONCECPT_NAME,
		B29_LIKP_LFART AS ZF_DOCUMENT_TYPE,
		ZF_INVOICE_HAS_SO_FLAG,
		ZF_PAYMENT_HAS_SO_FLAG,
		4 AS ZF_STAGE,
		'' AS ZF_BILLING_DOCUMENT,
		'',
		B29_LIKP_WAERK  AS ZF_DOCUMENT_CURRENCY
FROM PM_OTC_01_TT_ADD_FLAG_GLOBAL 
WHERE ISNULL(B29_LIKP_ERDAT,'')<>'' 

--Add Good issue key
UNION
SELECT  ZF_DOCUMENT_FLOW_KEY,
		B26_03_ZF_SALE_MATERIAL_DOC_KEY AS ZF_DOCUMENT_NUMBER,
		B26_03_MKPF_CPUDT AS  'ZF_DATE_USED_IN_MODEL',
		B26_03_MKPF_USNAM AS 'ZF_USER',
		B26_03_V_USERNAME_NAME_TEXT,
		B26_03_ZF_MSEG_DMBTR_SIGNED AS 'ZF_AMOUNT_COC',
		B26_03_ZF_MSEG_DMBTR_SIGNED_CUC AS 'ZF_AMOUNT_CUC',
		B26_03_ZF_MSEG_DMBTR_SIGNED_CUC,
		B26_03_ZF_MSEG_DMBTR_SIGNED_CUC,
		B26_03_MSEG_KUNNR AS 'ZF_CUSTOMER',
		B26_03_MSEG_BUKRS AS 'ZF_COMPANY_CODE',
		'6_Good_issue' AS ZF_CONCECPT_NAME_WITH_NUM,
		'Good issue' AS ZF_CONCECPT_NAME,
		B26_03_MKPF_BLART AS ZF_DOCUMENT_TYPE,
		ZF_INVOICE_HAS_SO_FLAG,
		ZF_PAYMENT_HAS_SO_FLAG,
		6 AS ZF_STAGE,
		'' AS ZF_BILLING_DOCUMENT,
		'',
		B26_03_MSEG_WAERS
FROM PM_OTC_01_TT_ADD_FLAG_GLOBAL
WHERE ISNULL(B26_03_MKPF_CPUDT,'')<>''
	--Add Billing document keys
UNION
SELECT  ZF_DOCUMENT_FLOW_KEY,
		B30_ZF_SALE_INVOICE_DOC_KEY AS ZF_DOCUMENT_NUMBER,
		B30_VBRP_ERDAT AS  'ZF_DATE_USED_IN_MODEL',
		B30_VBRK_ERNAM AS 'ZF_USER',
		B30_VBRK_ERNAM_NAME_TEXT,
		B30_ZF_VBRP_NETWR_S AS 'ZF_AMOUNT_COC',
		B30_ZF_VBRP_NETWR_S_CUC AS 'ZF_AMOUNT_CUC',
		B30_ZF_VBRP_NETWR_S_CUC ,
		B30_ZF_VBRP_NETWR_S_CUC ,
		B30_VBRK_KUNAG AS 'ZF_CUSTOMER',
		B30_TVKO_BUKRS AS 'ZF_COMPANY_CODE',
		CONCAT('8_',B30_ZF_DD07T_DDTEXT_FKTYP) AS ZF_CONCECPT_NAME_WITH_NUM,
		B30_ZF_DD07T_DDTEXT_FKTYP AS ZF_CONCECPT_NAME,
		B30_VBRK_FKART AS ZF_DOCUMENT_TYPE,
		ZF_INVOICE_HAS_SO_FLAG,
		ZF_PAYMENT_HAS_SO_FLAG,
		8 AS ZF_STAGE,
		'X' AS ZF_BILLING_DOCUMENT,
		'',
		B30_VBRK_WAERK AS ZF_DOCUMENT_CURRENCY
FROM PM_OTC_01_TT_ADD_FLAG_GLOBAL 
WHERE ISNULL(B30_VBRP_ERDAT,'')<>''
--Add FI invoice keys
UNION
SELECT DISTINCT ZF_DOCUMENT_FLOW_KEY,
		B14_01_ZF_CUSTOMER_INVOICE_KEY AS ZF_DOCUMENT_NUMBER,
		B14_01_ACDOCA_BLDAT AS  'ZF_DATE_USED_IN_MODEL',
		B14_01_ACDOCA_USNAM AS 'ZF_USER',
		B14_01_V_USERNAME_NAME_TEXT,
		B14_01_ZF_ACDOCA_HSL_S AS 'ZF_AMOUNT_COC',
		B14_01_ZF_ACDOCA_HSL_S_CUC AS 'ZF_AMOUNT_CUC',
		B14_01_ZF_ACDOCA_KSL_S,
		B14_01_ZF_ACDOCA_OSL_S,
		B14_01_ACDOCA_KUNNR AS 'ZF_CUSTOMER',
		B14_01_ACDOCA_RBUKRS AS 'ZF_COMPANY_CODE',
		'10_FI_invoice '
		AS ZF_CONCECPT_NAME_WITH_NUM,
		'FI invoice' AS ZF_CONCECPT_NAME,
		B14_01_ACDOCA_BLART AS ZF_DOCUMENT_TYPE,
		ZF_INVOICE_HAS_SO_FLAG,
		ZF_PAYMENT_HAS_SO_FLAG,
		10 AS ZF_STAGE,
		'' AS ZF_BILLING_DOCUMENT,
		'',
		B14_01_T001_WAERS
FROM PM_OTC_01_TT_ADD_FLAG_GLOBAL 
WHERE ISNULL(B14_01_ACDOCA_AUGDT,'')<>''
--Add Invoice cancellation keys
UNION
SELECT DISTINCT ZF_DOCUMENT_FLOW_KEY,
		B14_02_ZF_CUSTOMER_CREDIT_NOTE  AS ZF_DOCUMENT_NUMBER,
		B14_02_ACDOCA_AUGDT AS  'ZF_DATE_USED_IN_MODEL',
		B14_02_ACDOCA_USNAM AS 'ZF_USER',
		B14_02_V_USERNAME_NAME_TEXT,
		B14_02_ZF_ACDOCA_HSL_S AS 'ZF_AMOUNT_COC',
		B14_02_ZF_ACDOCA_HSL_S_CUC AS 'ZF_AMOUNT_CUC',
		B14_02_ZF_ACDOCA_KSL_S,
		B14_02_ZF_ACDOCA_OSL_S,
		B14_02_ACDOCA_KUNNR AS 'ZF_CUSTOMER',
		B14_02_ACDOCA_RBUKRS AS 'ZF_COMPANY_CODE',
		'11_Credit_note' AS ZF_CONCECPT_NAME_WITH_NUM,
		'Credit note' AS ZF_CONCECPT_NAME,
		B14_02_ACDOCA_BLART AS ZF_DOCUMENT_TYPE,
		ZF_INVOICE_HAS_SO_FLAG,
		ZF_PAYMENT_HAS_SO_FLAG,
		11 AS ZF_STAGE,
		'' AS ZF_BILLING_DOCUMENT,
		'',
		B14_02_T001_WAERS
FROM PM_OTC_01_TT_ADD_FLAG_GLOBAL 
WHERE ISNULL(B14_02_ACDOCA_AUGDT,'')<>''
--Add payment keys
UNION
SELECT DISTINCT ZF_DOCUMENT_FLOW_KEY,
		B14_03_ZF_CUSTOMER_PAYMENT_KEY  AS ZF_DOCUMENT_NUMBER,
		B14_03_ACDOCA_AUGDT AS  'ZF_DATE_USED_IN_MODEL',
		B14_03_ACDOCA_USNAM AS 'ZF_USER',
		B14_03_V_USERNAME_NAME_TEXT,
		B14_03_ZF_ACDOCA_HSL_S AS 'ZF_AMOUNT_COC',
		B14_03_ZF_ACDOCA_HSL_S_CUC AS 'ZF_AMOUNT_CUC',
		B14_03_ZF_ACDOCA_KSL_S,
		B14_03_ZF_ACDOCA_OSL_S,
		B14_03_ACDOCA_KUNNR AS 'ZF_CUSTOMER',
		B14_03_ACDOCA_RBUKRS AS 'ZF_COMPANY_CODE',
		'12_Payment' AS ZF_CONCECPT_NAME_WITH_NUM,
		'Payment' AS ZF_CONCECPT_NAME,
		B14_03_ACDOCA_BLART AS ZF_DOCUMENT_TYPE,
		ZF_INVOICE_HAS_SO_FLAG,
		ZF_PAYMENT_HAS_SO_FLAG,
		12 AS ZF_STAGE,
		'' AS ZF_BILLING_DOCUMENT,
		'',
		B14_03_T001_WAERS
FROM PM_OTC_01_TT_ADD_FLAG_GLOBAL 
WHERE ISNULL(B14_03_ACDOCA_AUGDT,'')<>''
--Add payment cancellatioN keys
UNION
SELECT DISTINCT ZF_DOCUMENT_FLOW_KEY,
		B14_04_ZF_CUSTOMER_PAYMENT_CANCELLATION AS ZF_DOCUMENT_NUMBER,
		B14_04_ACDOCA_AUGDT AS  'ZF_DATE_USED_IN_MODEL',
		B14_04_ACDOCA_USNAM AS 'ZF_USER',
		B14_04_V_USERNAME_NAME_TEXT,
		B14_04_ZF_ACDOCA_HSL_S AS 'ZF_AMOUNT_COC',
		B14_04_ZF_ACDOCA_HSL_S_CUC AS 'ZF_AMOUNT_CUC',
		B14_04_ZF_ACDOCA_KSL_S,
		B14_04_ZF_ACDOCA_OSL_S,
		B14_04_ACDOCA_KUNNR AS 'ZF_CUSTOMER',
		B14_04_ACDOCA_RBUKRS AS 'ZF_COMPANY_CODE',
		'13_Payment_cancellation' AS ZF_CONCECPT_NAME_WITH_NUM,
		'Payment cancellation' AS ZF_CONCECPT_NAME,
		B14_04_ACDOCA_BLART AS ZF_DOCUMENT_TYPE,
		ZF_INVOICE_HAS_SO_FLAG,
		ZF_PAYMENT_HAS_SO_FLAG,
		13 AS ZF_STAGE,
		'' AS ZF_BILLING_DOCUMENT,
		'',
		B14_04_T001_WAERS
FROM PM_OTC_01_TT_ADD_FLAG_GLOBAL 
WHERE ISNULL(B14_04_ACDOCA_AUGDT,'')<>''
--Add other
UNION
SELECT DISTINCT ZF_DOCUMENT_FLOW_KEY,
		B14_05_ZF_OTHERS  AS ZF_DOCUMENT_NUMBER,
		B14_05_ACDOCA_AUGDT AS  'ZF_DATE_USED_IN_MODEL',
		B14_05_ACDOCA_USNAM AS 'ZF_USER',
		B14_05_V_USERNAME_NAME_TEXT,
		B14_05_ZF_ACDOCA_HSL_S AS 'ZF_AMOUNT_COC',
		B14_05_ZF_ACDOCA_HSL_S_CUC AS 'ZF_AMOUNT_CUC',
		B14_05_ZF_ACDOCA_KSL_S,
		B14_05_ZF_ACDOCA_OSL_S,
		B14_05_ACDOCA_KUNNR AS 'ZF_CUSTOMER',
		B14_05_ACDOCA_RBUKRS AS 'ZF_COMPANY_CODE',
		'14_Other' AS ZF_CONCECPT_NAME_WITH_NUM,
		'Others' AS ZF_CONCECPT_NAME,
		B14_05_ACDOCA_BLART AS ZF_DOCUMENT_TYPE,
		ZF_INVOICE_HAS_SO_FLAG,
		ZF_PAYMENT_HAS_SO_FLAG,
		14 AS ZF_STAGE,
		'' AS ZF_BILLING_DOCUMENT,
		'',
		B14_05_T001_WAERS
FROM PM_OTC_01_TT_ADD_FLAG_GLOBAL 
WHERE ISNULL(B14_05_ACDOCA_AUGDT,'')<>''


--Step 3 Sort the vertical table base on flow key, date and stage
	EXEC SP_DROPTABLE PM_OTC_03_TT_GLOBAL_VERTICAL_SORT
	SELECT  ROW_NUMBER() OVER (ORDER BY ZF_DOCUMENT_FLOW_KEY, ZF_DATE_USED_IN_MODEL, ZF_STAGE) AS ZF_ROW_ID,
	* INTO PM_OTC_03_TT_GLOBAL_VERTICAL_SORT FROM PM_OTC_02_TT_VERTICAL_TABLE
	ORDER BY ZF_DOCUMENT_FLOW_KEY, ZF_DATE_USED_IN_MODEL, ZF_STAGE


 --STep 4 Get tha start day and end date for each flow
 EXEC SP_DROPTABLE PM_OTC_04_TT_START_END_LIST

 SELECT DISTINCT ZF_DOCUMENT_FLOW_KEY,
				MIN(ZF_DATE_USED_IN_MODEL) AS ZF_START_DATE ,
				MAX(ZF_DATE_USED_IN_MODEL) AS ZF_END_DATE
 INTO PM_OTC_04_TT_START_END_LIST
 FROM PM_OTC_03_TT_GLOBAL_VERTICAL_SORT
 GROUP BY ZF_DOCUMENT_FLOW_KEY

 
 --Step 5 Add the list of start date end date to the vertical table
  EXEC SP_DROPTABLE PM_OTC_05_IT_ADD_START_END

   SELECT DISTINCT A.*,
				B.ZF_START_DATE ,
				 B.ZF_END_DATE,
			DATEDIFF(DAY,ZF_START_DATE,ZF_END_DATE) AS ZF_LEAD_FLOW_DAY,
			DATEDIFF(WEEK,ZF_START_DATE,ZF_END_DATE) AS ZF_LEAD_FLOW_WEEK,
			DATEDIFF(MONTH,ZF_START_DATE,ZF_END_DATE) AS ZF_LEAD_FLOW_MONTH
 INTO PM_OTC_05_IT_ADD_START_END
 FROM PM_OTC_01_TT_ADD_FLAG_GLOBAL AS A
 LEFT JOIN PM_OTC_04_TT_START_END_LIST AS B
 ON A.ZF_DOCUMENT_FLOW_KEY=B.ZF_DOCUMENT_FLOW_KEY

 --Step 6
 --For the change ,
 -- Add the the flow  number to each change
 -- Join base on related key,
 -- Get only the change between start and end date
--Then append the change to the main flow

--_VERBELEG
EXEC SP_DROPTABLE PM_OTC_05A_TT_VERBELEG

SELECT DISTINCT
		A.ZF_DOCUMENT_FLOW_KEY,
	CONCAT(
		DBO.TRIM(B24_21_CDHDR_OBJECTCLAS),'-',
		DBO.TRIM(B24_21_CDHDR_OBJECTID),'-',
		DBO.TRIM(B24_21_CDHDR_CHANGENR)) AS ZF_DOCUMENT_NUMBER,
		B24_21_CDHDR_UDATE AS  'ZF_DATE_USED_IN_MODEL',
		B24_21_CDHDR_USERNAME AS ZF_USER,
		B24_21_V_USERNAME_NAME_TEXT AS ZF_NAME_OF_USER,
		0 AS ZF_AMOUNT_COC,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_CUC2,
		0 AS ZF_AMOUNT_CUC3,
		B28_VBAK_KUNNR AS 'ZF_CUSTOMER',
		B28_TVKO_BUKRS AS 'ZF_COMPANY_CODE',
		CONCAT(B24_21_ZF_STAGE,'_',B24_21_ZF_CHANGE_DESC) AS ZF_CONCECPT_NAME_WITH_NUM,
		B24_21_ZF_CHANGE_DESC,
		'' AS ZF_DOCUMENT_TYPE,
		ZF_INVOICE_HAS_SO_FLAG,
		ZF_PAYMENT_HAS_SO_FLAG,
		B24_21_ZF_STAGE AS ZF_STAGE,
		'' AS ZF_BILLING_DOCUMENT,'' AS ZF_SALE_DOC,
		B28_VBAK_WAERK AS ZF_DOCUMENT_CURRENCY
	INTO PM_OTC_05A_TT_VERBELEG
		FROM  B24_21_IT_CHANGE_VERBELEG
	JOIN  PM_OTC_05_IT_ADD_START_END AS A
	ON   B24_21_CDHDR_OBJECTID=B28_VBAK_VBELN
	WHERE 
	 B24_21_CDHDR_UDATE BETWEEN A.ZF_START_DATE AND A.ZF_END_DATE

--LIEFERUNG
EXEC SP_DROPTABLE PM_OTC_05B_TT_LIEFERUNG

SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,
	CONCAT(
		DBO.TRIM(B24_23_CDHDR_OBJECTCLAS),'-',
		DBO.TRIM(B24_23_CDHDR_OBJECTID),'-',
		DBO.TRIM(B24_23_CDHDR_CHANGENR)) AS ZF_DOCUMENT_NUMBER,
		B24_23_CDHDR_UDATE AS  'ZF_DATE_USED_IN_MODEL',
		B24_23_CDHDR_USERNAME AS ZF_USER,
		B24_23_V_USERNAME_NAME_TEXT AS ZF_NAME_OF_USER,
		0 AS ZF_AMOUNT_COC,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_CUC2,
		0 AS ZF_AMOUNT_CUC3,
		B29_LIKP_KUNAG AS 'ZF_CUSTOMER',
		B29_TVKO_BUKRS AS 'ZF_COMPANY_CODE',
		CONCAT(B24_23_ZF_STAGE,'_',B24_23_ZF_CHANGE_DESC) AS ZF_CONCECPT_NAME_WITH_NUM,
		B24_23_ZF_CHANGE_DESC,
		'' AS ZF_DOCUMENT_TYPE,
		ZF_INVOICE_HAS_SO_FLAG,
		ZF_PAYMENT_HAS_SO_FLAG,
		B24_23_ZF_STAGE AS ZF_STAGE,
		'' AS ZF_BILLING_DOCUMENT,'' AS ZF_SALE_DOC,
		B29_LIKP_WAERK  AS ZF_DOCUMENT_CURRENCY
	INTO PM_OTC_05B_TT_LIEFERUNG
		FROM  B24_23_IT_CHANGE_LIEFERUNG
	JOIN  PM_OTC_05_IT_ADD_START_END AS A
	ON   B24_23_CDHDR_OBJECTID=B29_LIKP_VBELN
	WHERE 
	 B24_23_CDHDR_UDATE BETWEEN A.ZF_START_DATE AND A.ZF_END_DATE

--FAKTBELEG
EXEC SP_DROPTABLE PM_OTC_05C_TT_FAKTBELEG
SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,
	CONCAT(
		DBO.TRIM(B24_25_CDHDR_OBJECTCLAS),'-',
		DBO.TRIM(B24_25_CDHDR_OBJECTID),'-',
		DBO.TRIM(B24_25_CDHDR_CHANGENR)) AS ZF_DOCUMENT_NUMBER,
		B24_25_CDHDR_UDATE AS  'ZF_DATE_USED_IN_MODEL',
		B24_25_CDHDR_USERNAME AS ZF_USER,
		B24_25_V_USERNAME_NAME_TEXT AS ZF_NAME_OF_USER,
		0 AS ZF_AMOUNT_COC,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_CUC2,
		0 AS ZF_AMOUNT_CUC3,
		B30_VBRK_KUNAG AS 'ZF_CUSTOMER',
		B30_TVKO_BUKRS AS 'ZF_COMPANY_CODE',
		CONCAT(B24_25_ZF_STAGE,'_',B24_25_ZF_CHANGE_DESC) AS ZF_CONCECPT_NAME_WITH_NUM,
		B24_25_ZF_CHANGE_DESC,
		'' AS ZF_DOCUMENT_TYPE,
		ZF_INVOICE_HAS_SO_FLAG,
		ZF_PAYMENT_HAS_SO_FLAG,
		B24_25_ZF_STAGE AS ZF_STAGE,
		'' AS ZF_BILLING_DOCUMENT,'' AS ZF_SALE_DOC,
		B30_VBRK_WAERK AS ZF_DOCUMENT_CURRENCY
	INTO PM_OTC_05C_TT_FAKTBELEG
		FROM  B24_25_IT_CHANGE_FAKT
	JOIN  PM_OTC_05_IT_ADD_START_END AS A
	ON   B24_25_CDHDR_OBJECTID=B30_VBRK_VBELN
	WHERE 
	 B24_25_CDHDR_UDATE BETWEEN A.ZF_START_DATE AND A.ZF_END_DATE

--DEBI
EXEC SP_DROPTABLE PM_OTC_05D_TT_DEBI

SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,
	CONCAT(
		DBO.TRIM(B24_19_CDHDR_OBJECTCLAS),'-',
		DBO.TRIM(B24_19_CDHDR_OBJECTID),'-',
		DBO.TRIM(B24_19_CDHDR_CHANGENR)) AS ZF_DOCUMENT_NUMBER,
		B24_19_CDHDR_UDATE AS  'ZF_DATE_USED_IN_MODEL',
		B24_19_CDHDR_USERNAME AS ZF_USER,
		B24_19_V_USERNAME_NAME_TEXT AS ZF_NAME_OF_USER,
		0 AS ZF_AMOUNT_COC,
		0 AS ZF_AMOUNT_CUC,
		0 AS ZF_AMOUNT_CUC2,
		0 AS ZF_AMOUNT_CUC3,
		ZF_CUSTOMER,
		ZF_COMPANY_CODE,
		CONCAT(B24_19_ZF_STAGE,'_',B24_19_ZF_CHANGE_DESC) AS ZF_CONCECPT_NAME_WITH_NUM,
		B24_19_ZF_CHANGE_DESC,
		'' AS ZF_DOCUMENT_TYPE,
		A.ZF_INVOICE_HAS_SO_FLAG,
		A.ZF_PAYMENT_HAS_SO_FLAG,
		B24_19_ZF_STAGE AS ZF_STAGE,
		'' AS ZF_BILLING_DOCUMENT,'' AS ZF_SALE_DOC,
		ZF_DOCUMENT_CURRENCY
	INTO PM_OTC_05D_TT_DEBI
		FROM  B24_19_IT_CDHDR_CDPOS_DEBI
	JOIN  PM_OTC_02_TT_VERTICAL_TABLE AS A
	ON   B24_19_CDHDR_OBJECTID=ZF_CUSTOMER
	JOIN PM_OTC_05_IT_ADD_START_END 
	ON PM_OTC_05_IT_ADD_START_END.ZF_DOCUMENT_FLOW_KEY=A.ZF_DOCUMENT_FLOW_KEY
		AND B24_19_CDHDR_UDATE BETWEEN ZF_START_DATE AND ZF_END_DATE
	
--- Append all the change to the main vertical table
EXEC SP_DROPTABLE PM_OTC_05_TT_VERTICAL_ADD_CHANGE

SELECT *
INTO PM_OTC_05_TT_VERTICAL_ADD_CHANGE
FROM PM_OTC_02_TT_VERTICAL_TABLE
UNION
SELECT * FROM PM_OTC_05A_TT_VERBELEG
UNION
SELECT * FROM PM_OTC_05B_TT_LIEFERUNG
UNION
SELECT * FROM PM_OTC_05C_TT_FAKTBELEG
UNION
SELECT * FROM PM_OTC_05D_TT_DEBI

--Step 6 Sorting the the table base on the document_flow_key, dates, and stage

EXEC SP_DROPTABLE PM_OTC_06_TT_GLOBAL_VERTICAL_SORT
	SELECT  ROW_NUMBER() OVER (ORDER BY ZF_DOCUMENT_FLOW_KEY, ZF_DATE_USED_IN_MODEL, ZF_STAGE) AS ZF_ROW_ID,
	*,'' AS ZF_SO_HAS_PRICE_CHANGE INTO PM_OTC_06_TT_GLOBAL_VERTICAL_SORT FROM PM_OTC_05_TT_VERTICAL_ADD_CHANGE
	ORDER BY ZF_DOCUMENT_FLOW_KEY, ZF_DATE_USED_IN_MODEL, ZF_STAGE

	CREATE CLUSTERED INDEX PM_OTC_06_TT_GLOBAL_VERTICAL_INDEX 
	ON PM_OTC_06_TT_GLOBAL_VERTICAL_SORT(ZF_DOCUMENT_FLOW_KEY, ZF_DATE_USED_IN_MODEL, ZF_STAGE)

--Step 7 Add a flag for Po that has price change

	UPDATE PM_OTC_06_TT_GLOBAL_VERTICAL_SORT 
	SET ZF_SO_HAS_PRICE_CHANGE='X' WHERE 
	ZF_DOCUMENT_FLOW_KEY IN
	(
	SELECT ZF_DOCUMENT_FLOW_KEY
	FROM PM_OTC_05_TT_VERTICAL_ADD_CHANGE
	WHERE  ZF_CONCECPT_NAME_WITH_NUM LIKE '2_%'  OR ZF_CONCECPT_NAME_WITH_NUM='3_SO change price' 
	GROUP BY ZF_DOCUMENT_FLOW_KEY
	HAVING COUNT(ZF_DOCUMENT_FLOW_KEY)>2
	)


--Step 8 Create the data model table, base on the script from Hung
--Get the document_flow_key, Node_from, Node_to, path description, product_flag, po_flag
--The path description is created base on the DOCUMENT_FLOW_KEY
--Join PM_02_TT_GLOBAL_VERTICAL to itself, base on the DOCUMENT_FLOW_KEY, then create a string by using XML

--To get the NODE_TO, Join PM_02_TT_GLOBAL_VERTICAL to itself,base on the DOCUMENT_FLOW_KEY
--Then Get the first line, where A.ROW_ID < C.ROW_ID and A.CONCECPT_NAME <> C.CONCECPT_NAME

--Create ID for each user, which will be user for network chart (network on used interger only)

	EXEC SP_DROPTABLE TEMP1
	SELECT DISTINCT 
	IDENTITY(INT,1,1) AS ZF_USER_ID,
	ZF_USER,ZF_NAME_OF_USER
	INTO TEMP1
	FROM PM_OTC_06_TT_GLOBAL_VERTICAL_SORT

	--Add the ID back to the main cube
	EXEC SP_DROPTABLE TEMP2

	SELECT A.*, B.ZF_USER_ID
	INTO TEMP2
	FROM
	PM_OTC_06_TT_GLOBAL_VERTICAL_SORT AS A
	LEFT JOIN 
	TEMP1 AS B
	ON A.ZF_USER=B.ZF_USER


--Create the data model table
EXEC SP_DROPTABLE PM_OTC_07_TT_NODE_FROM_TO

SELECT  A.ZF_DOCUMENT_FLOW_KEY,
		A.ZF_DATE_USED_IN_MODEL,
		B.ZF_DATE_USED_IN_MODEL AS ZF_DATE_USED_IN_MODEL_TO,
		A.ZF_DOCUMENT_NUMBER, 
		A.ZF_CONCECPT_NAME_WITH_NUM as ZF_NODE_FROM,
		B.ZF_CONCECPT_NAME_WITH_NUM AS ZF_NODE_TO,
		STUFF((SELECT '->' + E.ZF_CONCECPT_NAME_WITH_NUM
							 FROM TEMP2 AS E
							 WHERE E.ZF_DOCUMENT_FLOW_KEY = A.ZF_DOCUMENT_FLOW_KEY
							 ORDER BY E.ZF_DOCUMENT_FLOW_KEY, E.ZF_DATE_USED_IN_MODEL,E.ZF_STAGE
							 FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')
							 ,1,2,'') AS ZF_PATH_DESC,
		A.ZF_PAYMENT_HAS_SO_FLAG,
		A.ZF_INVOICE_HAS_SO_FLAG,
		A.ZF_SO_HAS_PRICE_CHANGE,
		A.ZF_USER_ID,
		A.ZF_USER AS ZF_INTEGER_FOR_USER ,
		A.ZF_NAME_OF_USER,
		CONCAT(A.ZF_STAGE,'_',A.ZF_NAME_OF_USER) AS ZF_USER_WITH_STAGE,
		B.ZF_USER_ID AS ZF_USER_ID_TO,
		B.ZF_USER AS ZF_INTEGER_FOR_USER_TO ,
		B.ZF_NAME_OF_USER as ZF_NAME_OF_USER_TO,
		CONCAT(B.ZF_STAGE,'_',B.ZF_NAME_OF_USER) AS ZF_USER_TO_WITH_STAGE,
		A.ZF_AMOUNT_COC,
		A.ZF_AMOUNT_CUC,
		A.ZF_AMOUNT_CUC2,
		A.ZF_AMOUNT_CUC3,
		A.ZF_COMPANY_CODE,
		A.ZF_DOCUMENT_TYPE,
		ROW_NUMBER() OVER (PARTITION BY A.ZF_DOCUMENT_FLOW_KEY ORDER BY A.ZF_DOCUMENT_FLOW_KEY,A.ZF_DATE_USED_IN_MODEL,A.ZF_STAGE) AS ZF_STAGE,
		A.ZF_BILLING_DOCUMENT,
		A.ZF_SALE_DOC,A.ZF_DOCUMENT_CURRENCY
INTO PM_OTC_07_TT_NODE_FROM_TO 
FROM TEMP2 AS A 
OUTER APPLY (
		SELECT TOP 1 * 
		FROM TEMP2 AS C 
		WHERE A.ZF_DOCUMENT_FLOW_KEY = C.ZF_DOCUMENT_FLOW_KEY AND
			  A.ZF_ROW_ID < C.ZF_ROW_ID ) AS B
--Step 9 Replace the NULL value in NODE_TO with 'END'

	UPDATE PM_OTC_07_TT_NODE_FROM_TO
	SET ZF_NODE_TO='18_END'
	WHERE ZF_NODE_TO IS NULL

	UPDATE PM_OTC_07_TT_NODE_FROM_TO
	SET ZF_INTEGER_FOR_USER_TO='END'
	WHERE ZF_INTEGER_FOR_USER_TO IS NULL

	UPDATE PM_OTC_07_TT_NODE_FROM_TO
	SET ZF_NAME_OF_USER_TO='END'
	WHERE ZF_NAME_OF_USER_TO IS NULL

	UPDATE PM_OTC_07_TT_NODE_FROM_TO
	SET ZF_USER_TO_WITH_STAGE='18_END'
	WHERE ZF_USER_TO_WITH_STAGE='_'

	UPDATE PM_OTC_07_TT_NODE_FROM_TO
	SET ZF_DATE_USED_IN_MODEL_TO=ZF_DATE_USED_IN_MODEL
	WHERE ZF_DATE_USED_IN_MODEL_TO IS NULL

	UPDATE PM_OTC_07_TT_NODE_FROM_TO
	SET ZF_USER_ID_TO=(SELECT MAX(ZF_USER_ID)+1 FROM TEMP1)
	WHERE ZF_USER_ID_TO IS NULL

	EXEC SP_DROPTABLE TEMP1
	EXEC SP_DROPTABLE TEMP2

--Step 10 Create the Start Node, by getting the first date of each flow, then add them back to the data model
--Sorting the table base on document flow key, and date


	EXEC SP_DROPTABLE PM_OTC_08_TT_NODE_FROM_TO_SORT
	SELECT * INTO PM_OTC_08_TT_NODE_FROM_TO_SORT FROM PM_OTC_07_TT_NODE_FROM_TO
	ORDER BY ZF_DOCUMENT_FLOW_KEY, ZF_DATE_USED_IN_MODEL,ZF_STAGE

	CREATE CLUSTERED INDEX PM_OTC_05_TT_PROCESS_MINING ON PM_OTC_08_TT_NODE_FROM_TO_SORT(ZF_DOCUMENT_FLOW_KEY, ZF_DATE_USED_IN_MODEL,ZF_STAGE)


--Step 11 Create Start node for each flow

	EXEC SP_DROPTABLE PM_OTC_09_TT_ADD_START_NODE


SELECT * 
INTO PM_OTC_09_TT_ADD_START_NODE
FROM PM_OTC_08_TT_NODE_FROM_TO_SORT
UNION ALL 
SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,
	    C.ZF_INV_HAS_PAY,
	    C.ZF_INV_HAS_CREDIT_NOTE ,
	    C.ZF_INV_HAS_OTHER,
				C.ZF_DATE_USED_IN_MODEL,
				C.ZF_DATE_USED_IN_MODEL AS ZF_DATE_USED_IN_MODEL_TO,
				C.ZF_DOCUMENT_NUMBER,
				'0_START' AS 'ZF_NODE_FROM' ,
				C.ZF_NODE_FROM AS 'ZF_NODE_TO',
				C.ZF_PATH_DESC,
				C.ZF_PAYMENT_HAS_SO_FLAG,
				C.ZF_INVOICE_HAS_SO_FLAG,
				C.ZF_SO_HAS_PRICE_CHANGE,
				0 AS ZF_USER_ID,
				'START' AS 'ZF_INTEGER_FOR_USER',
				'START' AS ZF_NAME_OF_USER,
				'0_START' AS ZF_USER_WITH_STAGE,
				C.ZF_USER_ID AS ZF_USER_ID_TO,
				C.ZF_INTEGER_FOR_USER AS  ZF_INTEGER_FOR_USER_TO,
				C.ZF_NAME_OF_USER AS ZF_NAME_OF_USER_TO,
				C.ZF_USER_WITH_STAGE AS ZF_USER_TO_WITH_STAGE,
				C.ZF_AMOUNT_COC,
				C.ZF_AMOUNT_CUC,
				C.ZF_AMOUNT_CUC2,
				C.ZF_AMOUNT_CUC3,
				C.ZF_COMPANY_CODE,
				C.ZF_DOCUMENT_TYPE,
				C.ZF_STAGE,
				C.ZF_BILLING_DOCUMENT,
				C.ZF_SALE_DOC,C.ZF_DOCUMENT_CURRENCY
FROM PM_OTC_08_TT_NODE_FROM_TO_SORT AS A
OUTER APPLY(
			SELECT TOP 1 * FROM PM_OTC_08_TT_NODE_FROM_TO_SORT AS B 
			WHERE A.ZF_DOCUMENT_FLOW_KEY= B.ZF_DOCUMENT_FLOW_KEY
			ORDER BY B.ZF_DOCUMENT_FLOW_KEY,B.ZF_DATE_USED_IN_MODEL) AS C
-- Step 12 Add list of node into QLIK, This list will be used for the Node filter.

	EXEC SP_DROPTABLE 'PM_OTC_10_RT_NODE_LIST'
	SELECT *  
	INTO PM_OTC_10_RT_NODE_LIST FROM(

	SELECT DISTINCT ZF_PATH_DESC, ZF_NODE_FROM as 'ZF_NODE' FROM PM_OTC_09_TT_ADD_START_NODE
	UNION 
	SELECT DISTINCT ZF_PATH_DESC, ZF_NODE_TO as 'ZF_NODE' FROM PM_OTC_09_TT_ADD_START_NODE 
	) AS A
	WHERE A.ZF_NODE <> '0_START' AND A.ZF_NODE <> '18_END'


-- Step 13. Create a flag for paths which only have 1 Node.(Example: 0_START --> 2_PURCHASE_ORDER --> 18_END)
--Step 13.1
--Create a temporary table to get list of paths and number of rows for each path. For each Path_Description, if it has only 2 rows, it means the path only has 1 nodes
-- Example
--		PATH_DESC				NODE_FROM				NODE_TO
--		2_PURCHASE_ORDER		0_START					2_PURCHASE_ORDER
--		2_PURCHASE_ORDER		2_PURCHASE_ORDER		18_END
EXEC SP_DROPTABLE 'TEMP1'
SELECT ZF_PATH_DESC ,
IIF(COUNT(DISTINCT CONCAT(ZF_NODE_FROM, ZF_NODE_TO)) = 2 ,'X', '') AS ZF_ONE_NODE_FLAG
INTO TEMP1
FROM PM_OTC_09_TT_ADD_START_NODE
GROUP BY ZF_PATH_DESC

--Step 13.2 Create a list of contains the start node each ath
EXEC SP_DROPTABLE 'TEMP2'
SELECT DISTINCT ZF_PATH_DESC,ZF_NODE_TO AS ZF_START_NODE INTO TEMP2
FROM PM_OTC_09_TT_ADD_START_NODE
WHERE ZF_NODE_FROM='0_START'
----Step 13.3 Create the list of path description
--Add the id for it, sort by number of flow per path desc

EXEC SP_DROPTABLE TEMP3

SELECT
IDENTITY(INT,1,1) AS ZF_PATH_NUMBER ,
ZF_PATH_DESC INTO TEMP3
FROM PM_OTC_09_TT_ADD_START_NODE
GROUP BY ZF_PATH_DESC
ORDER BY COUNT(DISTINCT ZF_DOCUMENT_FLOW_KEY) DESC

--Step 13.4 Add the path id number, start node, flag for path that has only one node
--	DECLARE	 @currency nvarchar(max)			= (SELECT [GLOBALS_VALUE] FROM [AM_GLOBALS] WHERE [GLOBALS_PARAMETER] = 'currency')

EXEC SP_DROPTABLE PM_OTC_11_RT_PROCESS_MINING
SELECT DISTINCT A.*,ZF_ONE_NODE_FLAG,ZF_START_NODE,@currency AS ZF_GLOBAL_CURRENCY,
CONCAT('#',ZF_PATH_NUMBER) AS ZF_PATH_NUMBER
INTO PM_OTC_11_RT_PROCESS_MINING FROM PM_OTC_09_TT_ADD_START_NODE AS A
LEFT JOIN TEMP1 ON A.ZF_PATH_DESC=TEMP1.ZF_PATH_DESC
LEFT JOIN TEMP2 ON A.ZF_PATH_DESC=TEMP2.ZF_PATH_DESC
LEFT JOIN TEMP3 ON A.ZF_PATH_DESC=TEMP3.ZF_PATH_DESC

--Step 13.5 Remove temporary table
EXEC SP_DROPTABLE 'TEMP1'
EXEC SP_DROPTABLE 'TEMP2'
EXEC SP_DROPTABLE 'TEMP3'

--Step 14 Create the list of document type description for Invoice and payment
--Step 14.1 DOcument type table for invoice
EXEC SP_DROPTABLE PM_OTC_12_RT_INV_DOCUMENT_TYPE
SELECT DISTINCT ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY ,
B14_01_T003T_LTEXT AS ZF_DOCUMENT_TYPE
INTO PM_OTC_12_RT_INV_DOCUMENT_TYPE
FROM B31_05_IT_CENTER_FACT_TABLE_ADD_INV_PAY
 WHERE B14_01_ACDOCA_BLDAT IS NOT NULL
 --Step 14.2 DOcument type table for Payemnt
 EXEC SP_DROPTABLE PM_OTC_13_RT_PAY_DOCUMENT_TYPE
SELECT DISTINCT ZF_DOCUMENT_FLOW_KEY AS ZF_DOCUMENT_FLOW_KEY ,
B14_03_T003T_LTEXT AS ZF_DOCUMENT_TYPE
INTO PM_OTC_13_RT_PAY_DOCUMENT_TYPE
FROM B31_05_IT_CENTER_FACT_TABLE_ADD_INV_PAY
 WHERE B14_03_T003T_LTEXT IS NOT NULL

  --Step 15 Number of Step table
 --Create a list of step for each path desc, which will be use for filter
 EXEC SP_REMOVE_TABLES PM_OTC_14_RT_NUMBER_OF_STEP
SELECT DISTINCT ZF_STEP_NUMBER,ZF_PATH_DESC
INTO PM_OTC_14_RT_NUMBER_OF_STEP
FROM
(
SELECT COUNT(ZF_DOCUMENT_FLOW_KEY)-1 AS ZF_STEP_NUMBER,ZF_PATH_DESC,ZF_DOCUMENT_FLOW_KEY
FROM PM_OTC_11_RT_PROCESS_MINING
GROUP BY ZF_PATH_DESC,ZF_DOCUMENT_FLOW_KEY
) AS A
--
--Step 16 SOD
--Step 16.1 Remove case has "delete" and "Block" 
--PMSOD_01_TT_REM_BLOCK_DEL
EXEC SP_REMOVE_TABLES PM_OTC_15_TT_REM_BLOCK_DEL

SELECT DISTINCT * 
INTO PM_OTC_15_TT_REM_BLOCK_DEL
FROM PM_OTC_11_RT_PROCESS_MINING
WHERE ZF_DOCUMENT_FLOW_KEY NOT IN
(
SELECT DISTINCT ZF_DOCUMENT_FLOW_KEY FROM PM_OTC_11_RT_PROCESS_MINING
WHERE (ZF_PATH_DESC LIKE '%DELETE%' OR ZF_PATH_DESC LIKE '%BLOCK%' )
)

--Step 16.2 Get the case that has been "Approval", and the number of user per flow
--Remove the flow that has more than 2 user doing approval
EXEC SP_REMOVE_TABLES PM_OTC_16_TT_REMOVE_MULTI_USER

SELECT *
INTO PM_OTC_16_TT_REMOVE_MULTI_USER
FROM PM_OTC_15_TT_REM_BLOCK_DEL
WHERE ZF_DOCUMENT_FLOW_KEY NOT IN
(
	SELECT ZF_DOCUMENT_FLOW_KEY
	FROM PM_OTC_11_RT_PROCESS_MINING
	WHERE ZF_PATH_DESC LIKE '%APPROVAL%'
	GROUP BY ZF_DOCUMENT_FLOW_KEY
	HAVING COUNT(DISTINCT ZF_INTEGER_FOR_USER)>=2
)

--Step 16.3 Remove billing documents if there are FI invoices for the flow
EXEC SP_DROPTABLE TT_TEMP1

--Get the flow that has FI and MM invoices
SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY 
INTO TT_TEMP1
FROM
(SELECT * FROM PM_OTC_16_TT_REMOVE_MULTI_USER
WHERE ZF_BILLING_DOCUMENT='X') AS A
JOIN
(SELECT * FROM PM_OTC_16_TT_REMOVE_MULTI_USER
WHERE ZF_NODE_FROM='10_FI_invoice') AS  B
ON A.ZF_DOCUMENT_FLOW_KEY=B.ZF_DOCUMENT_FLOW_KEY

--Add the flag for the flow that has FI and MM invoices
EXEC SP_DROPTABLE TT_TEMP2
SELECT PM_OTC_16_TT_REMOVE_MULTI_USER.*,
TT_TEMP1.ZF_DOCUMENT_FLOW_KEY AS ZF_FLAG
INTO TT_TEMP2
FROM 
PM_OTC_16_TT_REMOVE_MULTI_USER
LEFT JOIN TT_TEMP1
ON TT_TEMP1.ZF_DOCUMENT_FLOW_KEY=PM_OTC_16_TT_REMOVE_MULTI_USER.ZF_DOCUMENT_FLOW_KEY
--Remove the billing document base on the flag
EXEC SP_DROPTABLE TT_TEMP3

SELECT *
INTO TT_TEMP3
FROM TT_TEMP2
WHERE NOT(ZF_FLAG IS NOT NULL AND ZF_BILLING_DOCUMENT='X')

-- Step 16.3 Create the SOD table which has the flow ID, user, and SOD description
--Step 16.3.1 Get the list of Flow which has more than 1 activithy
EXEC SP_DROPTABLE TEMP1
SELECT ZF_DOCUMENT_FLOW_KEY,ZF_INTEGER_FOR_USER,COUNT(DISTINCT ZF_NODE_FROM) AS A,
ZF_NAME_OF_USER
INTO TEMP1
FROM TT_TEMP3
WHERE ZF_NODE_FROM <>'0_START'
GROUP BY ZF_DOCUMENT_FLOW_KEY,ZF_INTEGER_FOR_USER,ZF_NAME_OF_USER
HAVING COUNT(DISTINCT ZF_NODE_FROM)>1


--Step 16.3.2 Add the SOD decs scription
EXEC SP_REMOVE_TABLES 'PM_OTC_17_RT_SOD_TABLE'
SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,A.ZF_NAME_OF_USER, A.ZF_INTEGER_FOR_USER,'User who enters '+SUBSTRING(
        (
            SELECT ' and ' + SUBSTRING(REPLACE(ZF_NODE_FROM,' ','_'),CHARINDEX('_',ZF_NODE_FROM)+1,LEN(ZF_NODE_FROM)-CHARINDEX('_',ZF_NODE_FROM))
			AS [text()]
            FROM (SELECT DISTINCT ZF_DOCUMENT_FLOW_KEY,ZF_NODE_FROM,ZF_INTEGER_FOR_USER FROM TT_TEMP3 ) AS B
            WHERE A.ZF_DOCUMENT_FLOW_KEY = B.ZF_DOCUMENT_FLOW_KEY AND A.ZF_INTEGER_FOR_USER=B.ZF_INTEGER_FOR_USER
			AND B.ZF_NODE_FROM <>'0_START'
			ORDER BY B.ZF_DOCUMENT_FLOW_KEY,B.ZF_NODE_FROM
            FOR XML PATH ('')
        ),6,1000) + +' 'ZF_SOD_DESC
		INTO PM_OTC_17_RT_SOD_TABLE
FROM TEMP1 AS A

--Step 17 Time update
--Get the list of PM where the flow has more than 2 step

EXEC SP_DROPTABLE PM_OTC_18_TT_FILTER_FLOW
SELECT distinct * 
INTO PM_OTC_18_TT_FILTER_FLOW
FROM PM_OTC_11_RT_PROCESS_MINING
WHERE ZF_PATH_DESC IN
(
SELECT DISTINCT ZF_PATH_DESC FROM PM_OTC_14_RT_NUMBER_OF_STEP
WHERE ZF_STEP_NUMBER>=2
) 
--Step 18 Get the flow that has Node from is Purchase request,PO,
EXEC SP_DROPTABLE PM_OTC_19_RT_LEAD_TIME

SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,
A.ZF_NODE_FROM AS ZF_FROM,
A.ZF_DATE_USED_IN_MODEL AS ZF_DATE_FROM,
B.ZF_NODE_FROM AS ZF_TO,
B.ZF_DATE_USED_IN_MODEL AS ZF_DATE_TO,
'SO TO GI' AS 'ZF_LEAD_TIME_TYPE',
CASE
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL)=0 THEN '<=0 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 1 AND 30 THEN '0-30 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 31 AND 90 THEN '31-90 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 91 AND 180 THEN '91-180 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 181 AND 270 THEN '181-270 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 270 AND 365 THEN '271-365 days'
	ELSE '>365 days' END AS 'ZF_LEAD_TIME_DESC'
INTO PM_OTC_19_RT_LEAD_TIME
FROM 
(
	SELECT * FROM PM_OTC_18_TT_FILTER_FLOW WHERE ZF_NODE_FROM='2_Order' 
)AS A
 JOIN PM_OTC_18_TT_FILTER_FLOW AS B
	ON A.ZF_DOCUMENT_FLOW_KEY=B.ZF_DOCUMENT_FLOW_KEY 
	AND B.ZF_NODE_FROM='6_Good_issue'
		AND A.ZF_DATE_USED_IN_MODEL<=B.ZF_DATE_USED_IN_MODEL
UNION
SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,
A.ZF_NODE_FROM AS ZF_FROM,
A.ZF_DATE_USED_IN_MODEL AS ZF_DATE_FROM,
B.ZF_NODE_FROM AS ZF_TO,
B.ZF_DATE_USED_IN_MODEL AS ZF_DATE_TO,
'SO TO INV' AS 'ZF_LEAD_TIME_TYPE',
CASE
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL)=0 THEN '<=0 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 1 AND 30 THEN '0-30 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 31 AND 90 THEN '31-90 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 91 AND 180 THEN '91-180 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 181 AND 270 THEN '181-270 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 270 AND 365 THEN '271-365 days'
	ELSE '>365 days' END AS 'ZF_LEAD_TIME_DESC'
FROM 
(
	SELECT * FROM PM_OTC_18_TT_FILTER_FLOW WHERE ZF_NODE_FROM='2_Order' 
)AS A
 JOIN PM_OTC_18_TT_FILTER_FLOW AS B
	ON A.ZF_DOCUMENT_FLOW_KEY=B.ZF_DOCUMENT_FLOW_KEY 
	AND B.ZF_NODE_FROM='10_FI_invoice'
	AND A.ZF_DATE_USED_IN_MODEL<=B.ZF_DATE_USED_IN_MODEL
UNION
SELECT DISTINCT A.ZF_DOCUMENT_FLOW_KEY,
A.ZF_NODE_FROM AS ZF_FROM,
A.ZF_DATE_USED_IN_MODEL AS ZF_DATE_FROM,
B.ZF_NODE_FROM AS ZF_TO,
B.ZF_DATE_USED_IN_MODEL AS ZF_DATE_TO,
'SO TO PAY' AS 'ZF_LEAD_TIME_TYPE',
CASE
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL)=0 THEN '<=0 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 1 AND 30 THEN '0-30 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 31 AND 90 THEN '31-90 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 91 AND 180 THEN '91-180 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 181 AND 270 THEN '181-270 days'
	WHEN DATEDIFF(DAY,A.ZF_DATE_USED_IN_MODEL,B.ZF_DATE_USED_IN_MODEL) BETWEEN 270 AND 365 THEN '271-365 days'
	ELSE '>365 days' END AS 'ZF_LEAD_TIME_DESC'
FROM 
(
	SELECT * FROM PM_OTC_18_TT_FILTER_FLOW WHERE ZF_NODE_FROM='2_Order' 
)AS A
 JOIN PM_OTC_18_TT_FILTER_FLOW AS B
	ON A.ZF_DOCUMENT_FLOW_KEY=B.ZF_DOCUMENT_FLOW_KEY 
	AND B.ZF_NODE_FROM='12_Payment'
	AND A.ZF_DATE_USED_IN_MODEL<=B.ZF_DATE_USED_IN_MODEL

--Step 19 Create a table that show user and their activity (SOD only)
--Step 19.1 Creata a list of SOD user, and flag their activity

	EXEC SP_DROPTABLE TEMP1
SELECT DISTINCT ZF_INTEGER_FOR_USER,ZF_SOD_DESC,ZF_NAME_OF_USER,
IIF(
	ZF_SOD_DESC LIKE '% Inquiry%' OR
	ZF_SOD_DESC LIKE '% Quotation%' OR
	ZF_SOD_DESC LIKE '% Order %' OR
	ZF_SOD_DESC LIKE '% Item_proposa l%' OR
	ZF_SOD_DESC LIKE '%Scheduling_agreement%' OR
	ZF_SOD_DESC LIKE '%Scheduling_agreement_with_external_service_agent%' OR
	ZF_SOD_DESC LIKE '% Contract %' OR
	ZF_SOD_DESC LIKE '% Returns %' OR
	ZF_SOD_DESC LIKE '%Order_w/o_charge%' OR
	ZF_SOD_DESC LIKE '%Delivery(SO)%' OR
	ZF_SOD_DESC LIKE '%Credit_memo_request%' OR
	ZF_SOD_DESC LIKE '%Debit_memo_request%' 
	,'X','') AS ZF_SALE_DOCUMENT_FLAG,
IIF(ZF_SOD_DESC LIKE '% Delivery %','X','') AS ZF_DELIVERY_FLAG,
IIF(ZF_SOD_DESC LIKE '% Good_issue %','X','') AS ZF_GOOD_ISSUE_FLAG,
IIF(
	ZF_SOD_DESC LIKE '%Order_related_billing_document%' OR
	ZF_SOD_DESC LIKE '%Order_related_billing_document_for_rebate_settlement%' OR
	ZF_SOD_DESC LIKE '%Order_related_billing_documnent_for_partial_settlement%' OR
	ZF_SOD_DESC LIKE '%Periodic_billing_document%' OR
	ZF_SOD_DESC LIKE '%Periodic_biling_with_active_invoice_accrual%' OR
	ZF_SOD_DESC LIKE '% Accrual %' OR
	ZF_SOD_DESC LIKE '%Delivery-related_billing_document_for_inter-company_billing%' OR
	ZF_SOD_DESC LIKE '%Order_related_billing_document_for_rebate_correction%' OR
	ZF_SOD_DESC LIKE '%Delivery_related_billing_document%' OR
	ZF_SOD_DESC LIKE '%Down_payment_request%' OR
	ZF_SOD_DESC LIKE '%Invoice_list%' OR
	ZF_SOD_DESC LIKE '%Billing_request%' OR
	ZF_SOD_DESC LIKE '%POS_billing_document%' OR
	ZF_SOD_DESC LIKE '%Billing_using_general_interface%' OR
	ZF_SOD_DESC LIKE '%CRM_biling_document%' OR
	ZF_SOD_DESC LIKE '%Provisional_or_differential_billing_document%' OR
	ZF_SOD_DESC LIKE '%Final_billing_document%' 
,'X','') AS ZF_BILLING_FLAG,
IIF(ZF_SOD_DESC LIKE '% FI_invoice %','X','') AS ZF_INVOICE_FLAG,
--IIF(ZF_SOD_DESC LIKE '% Invoice_cancellation %','X','') AS ZF_INVOICE_CANC_FLAG,
IIF(ZF_SOD_DESC LIKE '% Payment %','X','') AS ZF_PAYMENT_FLAG,
IIF(ZF_SOD_DESC LIKE '% Payment_cancellation %','X','') AS ZF_PAYMENT_CANC_FLAG,
IIF(
	ZF_SOD_DESC LIKE '%Create customer  %' OR
	ZF_SOD_DESC LIKE '%Central customer block %' OR
	ZF_SOD_DESC LIKE '%Central customer unblock %' OR
	ZF_SOD_DESC LIKE '%Central customer sales block%' OR
	ZF_SOD_DESC LIKE '%Central customer sales unblock%' OR
	ZF_SOD_DESC LIKE '%Central customer billing block%' OR
	ZF_SOD_DESC LIKE '%Central customer billing unblock%' OR
	ZF_SOD_DESC LIKE '%Central customer delivery block%' OR
	ZF_SOD_DESC LIKE '%Central customer delivery unblock%' OR
	ZF_SOD_DESC LIKE '%Central customer delete flag%' OR
	ZF_SOD_DESC LIKE '%Central customer undelete flag%' OR
	ZF_SOD_DESC LIKE '%Central customer posting block%' OR
	ZF_SOD_DESC LIKE '%Central customer posting unblock%' OR
	ZF_SOD_DESC LIKE '%Central customer deletion block%' OR
	ZF_SOD_DESC LIKE '%Central customer deletion unblock%' 
,'X','') AS ZF_CUSTOMER_CHANGE_FLAG,
IIF(
	ZF_SOD_DESC LIKE '%Change SO usage indicator%' OR
	ZF_SOD_DESC LIKE '%SO release credit value%' OR
	ZF_SOD_DESC LIKE '%SO release date %' OR
	ZF_SOD_DESC LIKE '%SO block deliveries %' OR
	ZF_SOD_DESC LIKE '%SO unblock deliveries %' OR
	ZF_SOD_DESC LIKE '%SO block billing %' OR
	ZF_SOD_DESC LIKE '%SO unblock billing %' OR
	ZF_SOD_DESC LIKE '%SO item block billing%' OR
	ZF_SOD_DESC LIKE '%SO item unblock billing%' OR
	ZF_SOD_DESC LIKE '%SO change price %' 
,'X','') AS ZF_SO_CHANGE_FLAG,
IIF(
ZF_SOD_DESC LIKE '%Delivery_release_credit_val%' OR
ZF_SOD_DESC LIKE '%Delivery_block_deliveries__discount%' OR
ZF_SOD_DESC LIKE '%Delivery_unblock_deliveries%' OR
ZF_SOD_DESC LIKE '%Delivery_block_billing%' OR
ZF_SOD_DESC LIKE '%Delivery_unblock_billing%' 
,'X','') AS ZF_DELIVERY_CHANGE_FLAG,
IIF(
ZF_SOD_DESC LIKE '%Manual_price_change%' OR
ZF_SOD_DESC LIKE '%Amount_eligible_for_cash_discount%' OR
ZF_SOD_DESC LIKE '%Item_credit_price%' OR
ZF_SOD_DESC LIKE '%Usage_indicator%' 
,'X','') AS ZF_BILLING_CHANGE_FLAG 
INTO TEMP1
FROM PM_OTC_17_RT_SOD_TABLE
--Step 19.2 Append the row together, in order to all activity for 1 user
EXEC SP_DROPTABLE PM_OTC_20_RT_USER_SOD_ACTIVITY

SELECT DISTINCT ZF_INTEGER_FOR_USER,ZF_NAME_OF_USER,'' AS ZF_PTP_FLAG,
MAX(ZF_SALE_DOCUMENT_FLAG) AS ZF_SALE_DOCUMENT_FLAG,
MAX(ZF_DELIVERY_FLAG) AS ZF_DELIVERY_FLAG,
MAX(ZF_GOOD_ISSUE_FLAG) AS ZF_GOOD_ISSUE_FLAG,
MAX(ZF_BILLING_FLAG) AS ZF_BILLING_FLAG,
MAX(ZF_INVOICE_FLAG) AS ZF_INVOICE_FLAG,
MAX(ZF_INVOICE_CANC_FLAG) AS ZF_INVOICE_CANC_FLAG,
MAX(ZF_PAYMENT_FLAG) AS ZF_PAYMENT_FLAG,
MAX(ZF_PAYMENT_CANC_FLAG) AS ZF_PAYMENT_CANC_FLAG,
MAX(ZF_SO_CHANGE_FLAG) AS ZF_SO_CHANGE_FLAG,
MAX(ZF_DELIVERY_CHANGE_FLAG) AS ZF_DELIVERY_CHANGE_FLAG,
MAX(ZF_BILLING_CHANGE_FLAG) AS ZF_BILLING_CHANGE_FLAG,
MAX(ZF_CUSTOMER_CHANGE_FLAG) AS ZF_CUSTOMER_CHANGE_FLAG
INTO PM_OTC_20_RT_USER_SOD_ACTIVITY
FROM TEMP1
GROUP BY ZF_INTEGER_FOR_USER,ZF_NAME_OF_USER


EXEC SP_REMOVE_TABLES 'TEMP%'
EXEC SP_REMOVE_TABLES '%_TT_%'
EXEC SP_REMOVE_TABLES 'TT_%'

GO
