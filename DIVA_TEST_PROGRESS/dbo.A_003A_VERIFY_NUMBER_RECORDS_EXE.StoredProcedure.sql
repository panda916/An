USE [DIVA_TEST_PROGRESS]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--ALTER PROCEDURE [dbo].[A_003A_VERIFY_NUMBER_RECORDS]
CREATE PROCEDURE [dbo].[A_003A_VERIFY_NUMBER_RECORDS_EXE]
  WITH EXECUTE AS CALLER
  AS
  BEGIN

  /* Initialize parameters from globals table */

     DECLARE 	 
			 @CURRENCY NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'currency')
			,@DATE1 NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'date1')
			,@DATE2 NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'date2')
			,@DOWNLOADDATE NVARCHAR(MAX)		= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'downloaddate')
			,@DATEFORMAT VARCHAR(3)             = (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'dateformat')
			,@EXCHANGERATETYPE NVARCHAR(MAX)	= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'exchangeratetype')
			,@LANGUAGE1 NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'language1')
			,@LANGUAGE2 NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'language2')
			,@YEAR NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'year')
			,@ID NVARCHAR(MAX)					= (SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'id')
			,@LIMIT_RECORDS INT		            = CAST((SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'LIMIT_RECORDS') AS INT)


/*Test mode*/

SET ROWCOUNT @LIMIT_RECORDS

/*
  Title		    :	Verify completeness of tables 
  Description	:   This query will return a listing of nr of records for all tables in current database.

  --------------------------------------------------------------
  Update history
  --------------------------------------------------------------
  Date		    | Who |	Description
  06-06-2016      MW    First version for Sony
  12-09-2017      CW    Update naming convention
*/



/* Initiate the log */  
--Create database log table if it does not exist
IF OBJECT_ID('LOG_SP_EXECUTION', 'U') IS NULL BEGIN CREATE TABLE [DBO].[LOG_SP_EXECUTION] ([DATABASE] NVARCHAR(MAX) NULL,[OBJECT] NVARCHAR(MAX) NULL,[OBJECT_TYPE] NVARCHAR(MAX) NULL,[USER] NVARCHAR(MAX) NULL,[DATE] DATE NULL,[TIME] TIME NULL,[DESCRIPTION] NVARCHAR(MAX) NULL,[TABLE] NVARCHAR(MAX),[ROWS] INT) END

--Log start of procedure
INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Procedure started',NULL,NULL

	

-- Step 1/ Create a table that will hold the results concerning the number of records

EXEC SP_DROPTABLE 'A003A_01_RT_NUMBER_RECS'

	
	CREATE TABLE A003A_01_RT_NUMBER_RECS (
		TABLE_NAME SYSNAME,
		ROW_COUNT INT,
		RESERVED_SIZE VARCHAR(50),
		DATA_SIZE VARCHAR(50),
		INDEX_SIZE VARCHAR(50),
		UNUSED_SIZE VARCHAR(50))

		SET NOCOUNT ON


-- Step 2/ Determine the number of records
	  
INSERT A003A_01_RT_NUMBER_RECS
			EXEC SP_MSFOREACHTABLE 'SP_SPACEUSED ''?'''
    
		  	SELECT A002A_IMPORTED_TABLE,
			A003A_COUNTED_TABLE,
			SUM(A002A_IMPORTED_RECORDS) A002A_IMPORTED_RECORDS,
			A003A_COUNTED_RECORDS,
			A002A_DUPLICATE_RECORDS,
			(SUM(A002A_IMPORTED_RECORDS) -  A003A_COUNTED_RECORDS - A002A_DUPLICATE_RECORDS) AS NR_RECORDS_MISSING,
			A003A_TABLE_SIZE
			FROM (
					SELECT 
						CASE WHEN PATINDEX('%_[0][0][0-9][0-9]_ARCHIVE%.txt',LOG_A002A_IMPORT_LOG.TABLENAME) > 0 THEN left(LOG_A002A_IMPORT_LOG.TABLENAME,PATINDEX('%_[0][0][0-9][0-9]_ARCHIVE%.txt',LOG_A002A_IMPORT_LOG.TABLENAME)-1)
							WHEN PATINDEX('%_RSEG_[0][0][0-9][0-9]%.txt',LOG_A002A_IMPORT_LOG.TABLENAME) > 0 THEN left(LOG_A002A_IMPORT_LOG.TABLENAME,PATINDEX('%_RSEG_[0][0][0-9][0-9]%.txt',LOG_A002A_IMPORT_LOG.TABLENAME)-1)
							WHEN PATINDEX('%_VBRP_[0][0][0-9][0-9]%.txt',LOG_A002A_IMPORT_LOG.TABLENAME) > 0 THEN left(LOG_A002A_IMPORT_LOG.TABLENAME,PATINDEX('%_VBRP_[0][0][0-9][0-9]%.txt',LOG_A002A_IMPORT_LOG.TABLENAME)-1)
							WHEN PATINDEX('%_[0][0][0-9][0-9]%.txt',LOG_A002A_IMPORT_LOG.TABLENAME)>0 THEN left(LOG_A002A_IMPORT_LOG.TABLENAME,PATINDEX('%_[0][0][0-9][0-9]%.txt',LOG_A002A_IMPORT_LOG.TABLENAME)-1)
						ELSE LOG_A002A_IMPORT_LOG.TABLENAME
						END AS A002A_IMPORTED_TABLE, 
						A003A_01_RT_NUMBER_RECS.TABLE_NAME as A003A_COUNTED_TABLE, 
						LOG_A002A_IMPORT_LOG.NRRECORDS as A002A_IMPORTED_RECORDS, 
						A003A_01_RT_NUMBER_RECS.ROW_COUNT as A003A_COUNTED_RECORDS,
						LOG_A002A_DUP_LOG.DUPLICATEROWS AS A002A_DUPLICATE_RECORDS,
						A003A_01_RT_NUMBER_RECS.DATA_SIZE AS A003A_TABLE_SIZE
					FROM LOG_A002A_IMPORT_LOG 
					LEFT JOIN A003A_01_RT_NUMBER_RECS
					ON A003A_01_RT_NUMBER_RECS.TABLE_NAME COLLATE DATABASE_DEFAULT = LOG_A002A_IMPORT_LOG.TABLENAME COLLATE DATABASE_DEFAULT
					LEFT JOIN LOG_A002A_DUP_LOG
					ON LOG_A002A_DUP_LOG.TBL COLLATE DATABASE_DEFAULT = LOG_A002A_IMPORT_LOG.TABLENAME COLLATE DATABASE_DEFAULT
			)A
			GROUP BY A002A_IMPORTED_TABLE,
				A003A_COUNTED_TABLE,
				A003A_COUNTED_RECORDS,
				A002A_DUPLICATE_RECORDS,
				A003A_TABLE_SIZE
			ORDER BY 
			(SUM(A002A_IMPORTED_RECORDS) - A003A_COUNTED_RECORDS- A002A_DUPLICATE_RECORDS) DESC, A003A_COUNTED_TABLE 
    

--	DROP TABLE A003A_01_RT_NUMBER_RECS



/* log cube creation*/

INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(DATE,GETDATE()),CONVERT(TIME,GETDATE()),'Cube completed','A003A_01_RT_NUMBER_RECS',(SELECT COUNT(*) FROM A003A_01_RT_NUMBER_RECS) 


/* log end of procedure*/


INSERT INTO [DBO].[LOG_SP_EXECUTION] ([DATABASE],[OBJECT],[OBJECT_TYPE],[USER],[DATE],[TIME],[DESCRIPTION],[TABLE],[ROWS])
SELECT DB_NAME(),OBJECT_NAME(@@PROCID),'P',SYSTEM_USER,CONVERT(date,GETDATE()),CONVERT(time,GETDATE()),'Procedure finished',NULL,NULL




 END






GO
