USE [DIVA_GPW_SOX]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE       PROCEDURE [dbo].[B02_ITGC_SOD]
AS

BEGIN

/*Change history comments*/
 
/*
       Title                : [B02_ITGC_SOD]
       Description   : 
    
       --------------------------------------------------------------
       Update history
       --------------------------------------------------------------
       Date               |		Who    |      Description
       21-04-2022				Thuan           SOD tables
      
*/
-- Declare limit records base on AM_GLOBALS table.
	DECLARE  
        @LIMIT_RECORDS INT = CAST((SELECT GLOBALS_VALUE FROM [AM_GLOBALS] WHERE GLOBALS_PARAMETER = 'LIMIT_RECORDS') AS INT)
					
SET ROWCOUNT @LIMIT_RECORDS


EXEC SP_REMOVE_TABLES 'B02[_]%[_]TT%'
EXEC SP_REMOVE_TABLES 'B02A[_]%[_]TT%'

	--IF EXISTS(SELECT * FROM SYS.all_columns
	--WHERE name = 'USOBT_C_NAME')
	--BEGIN
	--	EXEC SP_UNNAME_FIELD 'USOBT_C_', 'A_USOBT_C'
	--	EXEC SP_RENAME_FIELD'USOBT_', 'A_USOBT_C'

	--	EXEC SP_UNNAME_FIELD 'USOBX_C_', 'A_USOBX_C'
	--	EXEC SP_RENAME_FIELD 'USOBX_', 'A_USOBX_C'
	--END




--CREATE AUTO MAPPING USER IDs from current database
--Script will scan through SAP raw tables. Only user ID appears on target database tables are inlucded.

    --EXEC SP_DROPTABLE 'AM_CURRENT_USER_FROM_DATABASE'

    --CREATE TABLE AM_CURRENT_USER_FROM_DATABASE(
    --    ZF_SOURCE_USNAM nvarchar(50),
    --    ZF_SOURCE_TABLE nvarchar(50)
    --)

    --DECLARE @SQLCMD NVARCHAR(1000) = 'INSERT INTO AM_CURRENT_USER_FROM_DATABASE
    --'

    --SELECT @SQLCMD = @SQLCMD + 'SELECT DISTINCT ' + A.name + ', ''' + B.name + ''' FROM ' + B.name  + ' union
    --' FROM SYS.columns A
    --LEFT JOIN SYS.tables B ON A.object_id = B.object_id
    --WHERE A.NAME LIKE '%[_]USNAM%'
    --AND LEN(A.NAME) = 10
    --AND B.name LIKE 'A[_]%'


    --SET @SQLCMD = LEFT(@SQLCMD, LEN(@SQLCMD) - 8)
    --PRINT @SQLCMD

    --EXEC SP_EXECUTESQL @SQLCMD

------------------------------------------------------------PART1-------------------------------------------------------------------------------
RAISERROR('Part 1: prepare reference table', 10, 1)
--build up nescessary reference table for users, role, authorization value, rule, object and TCODE (step 1 - 9)
--normalize values in range for TCODE, Authorization value and activities (Step 14)

-- Step 1: Check if the user is active/ valid, etc. (Only select users who have been active since 2018 upwards)
	-- https://answers.sap.com/questions/7573093/values-of-field-uflag-in-table-usr02.html
	-- USR02_USTYP should start with A, as requested by Jesper
	SELECT DISTINCT  USR02_BNAME 
	INTO B02_00_TT_USR02_BNAME_ACTIVE 
	FROM A_USR02
	--INNER JOIN AM_BNAME_SCOPE ON USR02_BNAME LIKE BNAME
	WHERE (USR02_USTYP LIKE 'A%' OR USR02_USTYP LIKE '%S%') -- AND USR02_UFLAG = 0) AND USR02_TRDAT >= '2018-01-01'  --AND USR02_BNAME = 'SCAJJE00'
   AND (YEAR(USR02_TRDAT) = 2021 OR YEAR(USR02_TRDAT) = 2022)
   	AND USR02_BNAME IN 
		(
			SELECT USR02_BNAME FROM B02_00_TEMP
			WHERE ROW_NUM BETWEEN 4501 AND 4691
		)

   --AND EXISTS(SELECT * FROM AM_CURRENT_USER_FROM_DATABASE WHERE USR02_BNAME = ZF_SOURCE_USNAM)
    --AND (NOT USR02_BNAME LIKE 'CUT[_]%' AND NOT USR02_BNAME LIKE 'SAP%' AND NOT USR02_BNAME LIKE 'OSS%')

	ALTER TABLE B02_00_TT_USR02_BNAME_ACTIVE ALTER COLUMN USR02_BNAME VARCHAR(70)

-- Step 2: Obtain the profiles that the user has access to
	SELECT DISTINCT
		   B02_00_TT_USR02_BNAME_ACTIVE.USR02_BNAME,
		   A_UST04.UST04_PROFILE
	INTO B02_01_TT_UST04_BNAME_PROFN
	FROM B02_00_TT_USR02_BNAME_ACTIVE  -- Get profile from UST04 table
	LEFT JOIN A_UST04 ON B02_00_TT_USR02_BNAME_ACTIVE.USR02_BNAME = A_UST04.UST04_BNAME



-- Step 3: Create TSTC table with valid program TSTC_PGMNA should not be blank
	SELECT DISTINCT TSTC_TCODE INTO B02_04_TT_TSTC_VALID_PGM FROM A_TSTC 
	--INNER JOIN AM_TSTC_CINFO_MAPPING 
	--		ON dbo.REMOVE_LEADING_ZEROES(A_TSTC.TSTC_CINFO) = dbo.REMOVE_LEADING_ZEROES(AM_TSTC_CINFO_MAPPING.TSTC_CINFO) 
			
	WHERE ISNULL(TSTC_PGMNA, '') <> '' -- AND TSTC_CINFO_LOCK = 'N'
	CREATE INDEX TSTC_TCODE ON B02_04_TT_TSTC_VALID_PGM(TSTC_TCODE)

-- Step 3B: Create UST10S and UST10C table with valid Auth Objct

	SELECT * INTO B02_04B_TT_UST10S_VALID_AUTH FROM A_UST10S
	WHERE UST10S_AKTPS LIKE 'A%'
	--AND	(NOT EXISTS (SELECT 1 FROM A_USR12 WHERE UST10S_AUTH = USR12_AUTH 
	--											AND UST10S_OBJCT = USR12_OBJCT 
	--											AND USR12_AKTPS NOT LIKE 'A%')
	--	OR NOT EXISTS (SELECT 1 FROM A_USR13 WHERE UST10S_AUTH = USR13_AUTH 
	--												AND UST10S_OBJCT = USR13_OBJCT 
	--												AND USR13_AKTPS  NOT LIKE 'A%'))
	
-- Step 4A: If there are composite profiles, denormalize into the full list (only for those that are active)
	SELECT DISTINCT A.UST10C_PROFN, A.UST10C_SUBPROF 
	INTO B02_05_TT_UST10_PROFN_NORMALIZED
	FROM A_UST10C A
	UNION
	SELECT DISTINCT A.UST10C_PROFN, A.UST10C_PROFN
	FROM A_UST10C A

	WHILE EXISTS(SELECT A.UST10C_PROFN
					FROM B02_05_TT_UST10_PROFN_NORMALIZED A
					INNER JOIN A_UST10C B ON A.UST10C_SUBPROF = B.UST10C_PROFN AND UST10C_AKTPS LIKE 'A%'
					WHERE NOT EXISTS(SELECT * FROM B02_05_TT_UST10_PROFN_NORMALIZED C 
												WHERE A.UST10C_PROFN = C.UST10C_PROFN 
												AND C.UST10C_SUBPROF = B.UST10C_SUBPROF))
	BEGIN
		INSERT INTO B02_05_TT_UST10_PROFN_NORMALIZED
		SELECT DISTINCT A.UST10C_PROFN, B.UST10C_SUBPROF 
		FROM B02_05_TT_UST10_PROFN_NORMALIZED A
		INNER JOIN A_UST10C B ON A.UST10C_SUBPROF = B.UST10C_PROFN AND UST10C_AKTPS LIKE 'A%'
		WHERE NOT EXISTS(SELECT * FROM B02_05_TT_UST10_PROFN_NORMALIZED C 
									WHERE A.UST10C_PROFN = C.UST10C_PROFN 
									AND C.UST10C_SUBPROF = B.UST10C_SUBPROF)
	END
	
	-- Union both normalized profile list with existing single profile list in UST10S
	SELECT * 
	INTO B02_06A_TT_UST10_PROFN_FULL_LIST
	FROM B02_05_TT_UST10_PROFN_NORMALIZED
	--WHERE EXISTS (SELECT 1 FROM A_USR10 WHERE A_USR10.USR10_PROFN = UST10C_SUBPROF
	--												AND USR10_AKTPS LIKE 'A%')
	--		OR EXISTS (SELECT 1 FROM A_USR11 WHERE USR11_PROFN = UST10C_SUBPROF
	--													AND USR11_AKTPS LIKE 'A%')
	UNION
	SELECT DISTINCT UST10S_PROFN, UST10S_PROFN 
	FROM B02_04B_TT_UST10S_VALID_AUTH
	--WHERE NOT EXISTS(SELECT * FROM B02_05_TT_UST10_PROFN_NORMALIZED 
	--							WHERE UST10C_PROFN = UST10S_PROFN)
	--	AND ( NOT EXISTS (SELECT 1 FROM A_USR10 WHERE A_USR10.USR10_PROFN = UST10S_PROFN
	--												AND USR10_AKTPS NOT LIKE 'A%')
	--		OR NOT EXISTS (SELECT 1 FROM A_USR11 WHERE USR11_PROFN = UST10S_PROFN
	--													AND USR11_AKTPS NOT LIKE 'A%'))
	
-- Step 4B: denormalize/flatten structure of composite role into full list
	SELECT AGR_AGRS_AGR_NAME, AGR_AGRS_CHILD_AGR INTO B02_06B_TT_AGR_ROLE_NORMALIZED FROM A_AGR_AGRS
	UNION
	SELECT AGR_AGRS_AGR_NAME, AGR_AGRS_AGR_NAME FROM A_AGR_AGRS
	DECLARE @c INT = 1

	WHILE @c <> 0
	BEGIN
		INSERT INTO B02_06B_TT_AGR_ROLE_NORMALIZED
		SELECT DISTINCT 
			A.AGR_AGRS_AGR_NAME, 
			B.AGR_AGRS_CHILD_AGR 
		FROM B02_06B_TT_AGR_ROLE_NORMALIZED A
		INNER JOIN B02_06B_TT_AGR_ROLE_NORMALIZED B ON A.AGR_AGRS_CHILD_AGR = B.AGR_AGRS_AGR_NAME
		WHERE NOT EXISTS(SELECT * FROM B02_06B_TT_AGR_ROLE_NORMALIZED C 
							WHERE A.AGR_AGRS_AGR_NAME = C.AGR_AGRS_AGR_NAME 
							AND B.AGR_AGRS_CHILD_AGR = C.AGR_AGRS_CHILD_AGR)
		
		SET @c = (SELECT COUNT(*) FROM B02_06B_TT_AGR_ROLE_NORMALIZED A
						INNER JOIN B02_06B_TT_AGR_ROLE_NORMALIZED B ON A.AGR_AGRS_CHILD_AGR = B.AGR_AGRS_AGR_NAME
						WHERE NOT EXISTS(SELECT * FROM B02_06B_TT_AGR_ROLE_NORMALIZED C 
												WHERE A.AGR_AGRS_AGR_NAME = C.AGR_AGRS_AGR_NAME 
												AND B.AGR_AGRS_CHILD_AGR = C.AGR_AGRS_CHILD_AGR))
		
	END

-- Step 4C: Update missing roles from AGR_USERS to AGR_AGRS normalized table
	INSERT INTO B02_06B_TT_AGR_ROLE_NORMALIZED
	SELECT DISTINCT AGR_USERS_AGR_NAME, AGR_USERS_AGR_NAME FROM A_AGR_USERS
	WHERE 
	-- only update the mising role
	NOT EXISTS(SELECT * FROM B02_06B_TT_AGR_ROLE_NORMALIZED WHERE AGR_AGRS_AGR_NAME = AGR_USERS_AGR_NAME)


-- Step 7: Combine Authorization objects from Profile and Role
	--Get profile, objct, auth 
	--Get VON and BIS from UST12
	EXEC SP_DROPTABLE 'B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE'
	SELECT DISTINCT 
		A.USR02_BNAME,
		UST12_AUTH AS ZF_AGR_UST12_AUTH,
		UST12_OBJCT AS ZF_AGR_UST12_OBJCT,
		UST12_FIELD AS ZF_AGR_UST12_FIELD,
		UST12_VON AS ZF_AGR_UST12_VON, 
		UST12_BIS AS ZF_AGR_UST12_BIS
	INTO B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
	FROM B02_01_TT_UST04_BNAME_PROFN AS A
	-- get the sub profiles for the user, keeping also all the parent profiles
	INNER JOIN B02_06A_TT_UST10_PROFN_FULL_LIST B 
			ON A.UST04_PROFILE = B.UST10C_PROFN
	-- get AUTH and OBJCT
	INNER JOIN B02_04B_TT_UST10S_VALID_AUTH ON B.UST10C_SUBPROF = UST10S_PROFN
	-- get the FIELD, VON and BIS
	INNER JOIN A_UST12 ON UST12_AUTH = UST10S_AUTH AND UST12_OBJCT = UST10S_OBJCT AND UST12_AKTPS LIKE 'A%'
	
	
	UNION

	--Get profile, objct, auth from ROLE table AGR_1251
	SELECT DISTINCT AGR_USERS_UNAME, AGR_1251_AUTH, AGR_1251_OBJECT, AGR_1251_FIELD, AGR_1251_LOW, AGR_1251_HIGH 
	FROM A_AGR_USERS
	-- Limit on active users
	INNER JOIN B02_00_TT_USR02_BNAME_ACTIVE 
					ON AGR_USERS_UNAME = USR02_BNAME
	-- Get the child role (left because maybe some parents without child or users without child roles)
	LEFT JOIN B02_06B_TT_AGR_ROLE_NORMALIZED 
					ON AGR_AGRS_AGR_NAME = AGR_USERS_AGR_NAME
	-- Using child or parent role, get the auth, object, field, low, high
	INNER JOIN A_AGR_1251 
					ON ISNULL(AGR_AGRS_CHILD_AGR ,AGR_USERS_AGR_NAME) = AGR_1251_AGR_NAME
	WHERE AGR_1251_DELETED <> 'X' 
	
	UNION
	
	--Get profile, objct, auth from Role table AGR_1016
	SELECT DISTINCT AGR_USERS_UNAME, UST12_AUTH, UST12_OBJCT, UST12_FIELD, UST12_VON, UST12_BIS
	FROM A_AGR_USERS
	-- Limit on active users
	INNER JOIN B02_00_TT_USR02_BNAME_ACTIVE 
					ON AGR_USERS_UNAME = USR02_BNAME
    -- Get the child role (left because maybe some parents without child or users without child roles)
	LEFT JOIN B02_06B_TT_AGR_ROLE_NORMALIZED 
					ON AGR_AGRS_AGR_NAME = AGR_USERS_AGR_NAME
	
	INNER JOIN A_AGR_1016 AA 
					ON AGR_1016_PSTATE like 'A%' 
					AND ISNULL(AGR_AGRS_CHILD_AGR ,AGR_USERS_AGR_NAME) = AA.AGR_1016_AGR_NAME
	INNER JOIN B02_06A_TT_UST10_PROFN_FULL_LIST 
					ON AA.AGR_1016_PROFILE = UST10C_PROFN
	INNER JOIN B02_04B_TT_UST10S_VALID_AUTH 
					ON UST10S_PROFN = UST10C_SUBPROF
	INNER JOIN A_UST12  
					ON UST12_AUTH = UST10S_AUTH AND UST12_OBJCT = UST10S_OBJCT AND UST12_AKTPS LIKE 'A%'

	
	UNION
	
	--Get profile, objct, auth from Role table AGR_PROF
	SELECT DISTINCT AGR_USERS_UNAME, UST12_AUTH, AU.UST12_OBJCT, AU.UST12_FIELD, AU.UST12_VON, AU.UST12_BIS
	FROM A_AGR_USERS
	INNER JOIN B02_00_TT_USR02_BNAME_ACTIVE 
					ON AGR_USERS_UNAME = USR02_BNAME
	LEFT JOIN B02_06B_TT_AGR_ROLE_NORMALIZED 
					ON AGR_AGRS_AGR_NAME = AGR_USERS_AGR_NAME
	INNER JOIN A_AGR_PROF AA 
					ON ISNULL(AGR_AGRS_CHILD_AGR ,AGR_USERS_AGR_NAME) = AA.AGR_PROF_AGR_NAME
	INNER JOIN B02_06A_TT_UST10_PROFN_FULL_LIST 
					ON AA.AGR_PROF_PROFILE = UST10C_PROFN
	INNER JOIN B02_04B_TT_UST10S_VALID_AUTH 
					ON UST10S_PROFN = UST10C_SUBPROF
	INNER JOIN A_UST12 AU 
					ON AU.UST12_AUTH = UST10S_AUTH AND AU.UST12_OBJCT = UST10S_OBJCT

	-- Export the user authorization rule table out for review purpose
	SELECT * INTO B02_09B_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE FROM B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE

	--Update the combined user auhorization object list, to convert the * symbol to % (SQL uses % as regular expression to re-present many characters instead of *)
	UPDATE B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
	SET ZF_AGR_UST12_VON = REPLACE(ZF_AGR_UST12_VON, '%', '[#]')

	UPDATE B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
	SET ZF_AGR_UST12_VON = REPLACE(ZF_AGR_UST12_VON, '*', '%'),
	ZF_AGR_UST12_BIS = REPLACE(ZF_AGR_UST12_BIS, '*', '%')

	--Update the combined user auhorization object list, we will ingore $ values because SAP also skips them in the initial authorization check.
	UPDATE B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
	SET ZF_AGR_UST12_VON = '',
	ZF_AGR_UST12_BIS = ''
	WHERE ZF_AGR_UST12_VON LIKE '$%'

	--Update the combined user auhorization object list, we will ingore ', '' values because SAP also skips them in the initial authorization check.
	UPDATE B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
	SET ZF_AGR_UST12_VON = '%',
	ZF_AGR_UST12_BIS = ''
	WHERE ZF_AGR_UST12_VON = '''' OR ZF_AGR_UST12_VON = ''''''

	--Remove the authorization object field with blank value to speed up the script.
	DELETE B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
	WHERE ZF_AGR_UST12_VON = ''

	ALTER TABLE B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE ALTER COLUMN USR02_BNAME VARCHAR(70)
	ALTER TABLE B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE ALTER COLUMN ZF_AGR_UST12_AUTH VARCHAR(70)
	ALTER TABLE B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE ALTER COLUMN ZF_AGR_UST12_OBJCT VARCHAR(70)
	ALTER TABLE B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE ALTER COLUMN ZF_AGR_UST12_FIELD VARCHAR(70)
	ALTER TABLE B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE ALTER COLUMN ZF_AGR_UST12_VON VARCHAR(70)
	ALTER TABLE B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE ALTER COLUMN ZF_AGR_UST12_BIS VARCHAR(70)

	CREATE CLUSTERED INDEX IDX ON B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE(USR02_BNAME, ZF_AGR_UST12_AUTH, ZF_AGR_UST12_OBJCT, ZF_AGR_UST12_FIELD)
	CREATE INDEX ZF_AGR_UST12_VON ON B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE(ZF_AGR_UST12_VON)
	
-- Step 8: obtain a list of user, object and values for TCODES, only for lines that have a wildcard or a range
	EXEC SP_DROPTABLE 'B02_10_TT_AGR_UST12_TCODE_RANGE_LIST'
	SELECT DISTINCT USR02_BNAME, ZF_AGR_UST12_OBJCT, ZF_AGR_UST12_VON, ZF_AGR_UST12_BIS 
	INTO B02_10_TT_AGR_UST12_TCODE_RANGE_LIST
	FROM B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
	WHERE (ZF_AGR_UST12_VON LIKE '%[%]%' OR ZF_AGR_UST12_BIS <> '') AND ZF_AGR_UST12_FIELD = 'TCD' AND ZF_AGR_UST12_OBJCT = 'S_TCODE'

-- Step 9: normalize the Authorization value TCODE High - Low range
	EXEC SP_DROPTABLE 'B02_11_TT_UST12_AGR_AUTH_OBJCT_FIELD_VALUE'
	SELECT DISTINCT USR02_BNAME, 
	ZF_AGR_UST12_AUTH,
	ZF_AGR_UST12_OBJCT, 
	ZF_AGR_UST12_FIELD, 
	ZF_AGR_UST12_VON, 
	ZF_AGR_UST12_BIS
	INTO B02_11_TT_UST12_AGR_AUTH_OBJCT_FIELD_VALUE
	FROM B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
	

	INSERT INTO B02_11_TT_UST12_AGR_AUTH_OBJCT_FIELD_VALUE
	SELECT DISTINCT 
	USR02_BNAME,
	'',
	ZF_AGR_UST12_OBJCT, 
	'TCD' ZF_AGR_UST12_FIELD, 
	REPLACE(TSTC_TCODE, '%', '[#]') ZF_AGR_UST12_VON,
	'' ZF_AGR_UST12_BIS
	FROM B02_10_TT_AGR_UST12_TCODE_RANGE_LIST A
	INNER JOIN B02_04_TT_TSTC_VALID_PGM AT 
						ON (ZF_AGR_UST12_VON = '%')
						OR (ZF_AGR_UST12_BIS = '' 
						AND AT.TSTC_TCODE LIKE A.ZF_AGR_UST12_VON)
						OR (ZF_AGR_UST12_BIS <> '' 
						AND AT.TSTC_TCODE BETWEEN REPLACE(ZF_AGR_UST12_VON, '%', '') AND REPLACE(ZF_AGR_UST12_BIS, '%', ''))
	WHERE NOT EXISTS(SELECT * FROM B02_11_TT_UST12_AGR_AUTH_OBJCT_FIELD_VALUE B 
								WHERE B.USR02_BNAME = A.USR02_BNAME
									AND B.ZF_AGR_UST12_OBJCT = A.ZF_AGR_UST12_OBJCT
									AND B.ZF_AGR_UST12_FIELD = 'TCD'
									AND B.ZF_AGR_UST12_VON = TSTC_TCODE)

------------------------------------------------------------PART2--------------------------------------------------------------------------------
-- Both TSTCA check and USOBT check will be done seperately. Results from two stages will be merged at the end.

--Step 10: Make a list of S_TCODE object lines from the user cube 

	EXEC SP_DROPTABLE 'B02_12_TT_USER_S_TCODE_LINES'
	SELECT * 
	INTO B02_12_TT_USER_S_TCODE_LINES
	FROM B02_11_TT_UST12_AGR_AUTH_OBJCT_FIELD_VALUE A
	WHERE ZF_AGR_UST12_OBJCT = 'S_TCODE'

-- Step 11: Perform a normal check and eliminate TCODE usage with insufficient Authorization object

	-- Step 11a: create user, TCODE list
		EXEC SP_DROPTABLE 'B02_12B_TT_BNAME_TCODE'
		SELECT DISTINCT USR02_BNAME, ZF_AGR_UST12_VON
		INTO B02_12B_TT_BNAME_TCODE
		FROM B02_12_TT_USER_S_TCODE_LINES
		WHERE ZF_AGR_UST12_FIELD = 'TCD'

	-- Step 11b: compare with check table, and remove the TCODEs that have insufficient requirements. (ignore Authorization ID for optimization)
		EXEC SP_DROPTABLE 'B02_13_TT_BNAME_TSTCA_TCODE_EXCL_LIST'
		SELECT DISTINCT B.USR02_BNAME, A.TSTCA_TCODE
		INTO B02_13_TT_BNAME_TSTCA_TCODE_EXCL_LIST
		FROM A_TSTCA A
			LEFT JOIN B02_12B_TT_BNAME_TCODE B ON A.TSTCA_TCODE = B.ZF_AGR_UST12_VON -- Only do check on users that have the TCODE
			LEFT JOIN B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE C ON B.USR02_BNAME = C.USR02_BNAME -- check the user has the required object, field, VON and BIS
																				AND A.TSTCA_OBJCT = C.ZF_AGR_UST12_OBJCT
																				AND A.TSTCA_FIELD = C.ZF_AGR_UST12_FIELD
																				AND ((C.ZF_AGR_UST12_VON = '%')
																					OR (ZF_AGR_UST12_BIS = '' AND A.TSTCA_VALUE LIKE C.ZF_AGR_UST12_VON)
																					OR (ZF_AGR_UST12_BIS <> '' AND A.TSTCA_VALUE BETWEEN REPLACE(C.ZF_AGR_UST12_VON, '%', '') AND REPLACE(ZF_AGR_UST12_BIS, '%', '')))
		WHERE TSTCA_VALUE <> '' AND C.ZF_AGR_UST12_FIELD IS NULL -- filter on those that don't have the required object, field, VON and BIS

	-- Step 11c: eliminate TCODE with insufficient object

		EXEC SP_DROPTABLE 'B02_13B_TT_BNAME_TCODE_TSTCA'
		SELECT A.* 
		INTO B02_13B_TT_BNAME_TCODE_TSTCA
		FROM B02_12B_TT_BNAME_TCODE A
		WHERE 
				NOT EXISTS(SELECT * FROM B02_13_TT_BNAME_TSTCA_TCODE_EXCL_LIST B 
											WHERE A.USR02_BNAME = B.USR02_BNAME 
											AND A.ZF_AGR_UST12_VON = B.TSTCA_TCODE)
				AND EXISTS(SELECT * FROM A_TSTCA WHERE TSTCA_TCODE = A.ZF_AGR_UST12_VON)
		CREATE INDEX USR02_BNAME ON B02_12B_TT_BNAME_TCODE(USR02_BNAME)

-- Step 12: Perform another check with Authorization ID and eliminate TCODE usage with insufficient Authorization object
	-- Step 12a: create a username, auth, object list
		EXEC SP_DROPTABLE 'B02_15_TT_BNAME_AUTH_OBJCT'
		SELECT DISTINCT USR02_BNAME, ZF_AGR_UST12_AUTH, ZF_AGR_UST12_OBJCT 
		INTO B02_15_TT_BNAME_AUTH_OBJCT
		FROM B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE

	-- Step 12b: Flag user+authorization+object combinations that are missing something from TSTCA
		EXEC SP_DROPTABLE 'B02_16_TT_BNAME_TCODE_AUTH_FULL_MAPPING'
		SELECT DISTINCT B.USR02_BNAME, A.TSTCA_TCODE, B1.ZF_AGR_UST12_AUTH, B1.ZF_AGR_UST12_OBJCT, C.ZF_AGR_UST12_FIELD, C.ZF_AGR_UST12_VON, C.ZF_AGR_UST12_BIS, A.TSTCA_VALUE
		INTO B02_16_TT_BNAME_TCODE_AUTH_FULL_MAPPING
		FROM A_TSTCA A
			INNER JOIN B02_13B_TT_BNAME_TCODE_TSTCA B ON A.TSTCA_TCODE = B.ZF_AGR_UST12_VON  -- Only do the check if user has the TCODE 
			INNER JOIN B02_15_TT_BNAME_AUTH_OBJCT B1 ON B1.USR02_BNAME = B.USR02_BNAME
													AND B1.ZF_AGR_UST12_OBJCT = A.TSTCA_OBJCT -- Get the authorizations that the user has for the object
			LEFT JOIN B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE C ON B1.USR02_BNAME = C.USR02_BNAME -- check that the user, authorization, object...
																				AND B1.ZF_AGR_UST12_AUTH = C.ZF_AGR_UST12_AUTH
																				AND B1.ZF_AGR_UST12_OBJCT = C.ZF_AGR_UST12_OBJCT -- has the required field, VON and BIS
																				AND A.TSTCA_FIELD = C.ZF_AGR_UST12_FIELD -- flag: 
																				-- if there are not all the required field, VON, BIS then C.ZF_AGR_UST12_FIELD will be NULL for that 
																				-- line
																				AND ((C.ZF_AGR_UST12_VON = '%')
																					OR (C.ZF_AGR_UST12_VON = TSTCA_VALUE)
																					OR (C.ZF_AGR_UST12_BIS = '' AND A.TSTCA_VALUE LIKE C.ZF_AGR_UST12_VON)
																					OR (C.ZF_AGR_UST12_BIS <> '' AND A.TSTCA_VALUE BETWEEN REPLACE(C.ZF_AGR_UST12_VON, '%', '') AND REPLACE(ZF_AGR_UST12_BIS, '%', '')))
		WHERE TSTCA_VALUE <> '' -- If TSTCA_VALUE is NULL then no check necessary - so no need to do the JOIN with TSTCA - so SQL will skip these lines in TSTCA for the join

	-- Step 12c: Eliminate the authorization + object combinations for hte user and TCODE, for which teh object was not found
	--           to be complete within the authorization in step 12b
		EXEC SP_DROPTABLE 'B02_17_TT_BNAME_TCODE_AUTH_FULL_MAPPING_VALID'
		SELECT DISTINCT USR02_BNAME, TSTCA_TCODE, ZF_AGR_UST12_OBJCT
		INTO B02_17_TT_BNAME_TCODE_AUTH_FULL_MAPPING_VALID
		FROM B02_16_TT_BNAME_TCODE_AUTH_FULL_MAPPING A
		---Exclude the auth ID with unmatched results, keep the users' BNAME, TCODE, AUTH & OBJCT combination that has the matched results only.
		WHERE NOT EXISTS(SELECT * FROM B02_16_TT_BNAME_TCODE_AUTH_FULL_MAPPING B WHERE B.USR02_BNAME = A.USR02_BNAME
																	AND B.TSTCA_TCODE = A.TSTCA_TCODE
																	AND B.ZF_AGR_UST12_AUTH = A.ZF_AGR_UST12_AUTH
																	AND B.ZF_AGR_UST12_OBJCT = A.ZF_AGR_UST12_OBJCT
																	AND B.ZF_AGR_UST12_FIELD IS NULL) -- eliminate those USER, AUTH, OBJ combinations from 12b for which a
																	                                  -- at least one line was missing from TSTCA
		

	-- After having eliminated some objects in step 12c, the TCODE might now be missing some objects (that it wasn't missing before)

	-- Step 12d (mirrors step 11a): make a list of User, TCODE, authorization, object
		--EXEC SP_DROPTABLE 'B02_17B_TT_BNAME_AUTH_OBJCT_LIST'
		--SELECT DISTINCT USR02_BNAME, TSTCA_TCODE, ZF_AGR_UST12_AUTH, ZF_AGR_UST12_OBJCT INTO B02_17B_TT_BNAME_AUTH_OBJCT_LIST FROM B02_17_TT_BNAME_TCODE_AUTH_FULL_MAPPING_VALID
		--CREATE CLUSTERED INDEX IDX ON B02_17B_TT_BNAME_AUTH_OBJCT_LIST(USR02_BNAME, TSTCA_TCODE, ZF_AGR_UST12_AUTH, ZF_AGR_UST12_OBJCT)
		--CREATE CLUSTERED INDEX IDX ON B02_17_TT_BNAME_TCODE_AUTH_FULL_MAPPING_VALID(USR02_BNAME, TSTCA_TCODE, ZF_AGR_UST12_OBJCT)

    -- Step 12e create a list of user, TCODEs for which the object, field and value (within an authorization) is no longer complete for the TCODE

		EXEC SP_DROPTABLE 'B02_19_TT_BNAME_TCODE_EXCL_LIST_BY_AUTH'
		SELECT DISTINCT B.USR02_BNAME, A.TSTCA_TCODE
		INTO B02_19_TT_BNAME_TCODE_EXCL_LIST_BY_AUTH
		FROM A_TSTCA A
			CROSS JOIN B02_00_TT_USR02_BNAME_ACTIVE B -- for each user make all combinations from TSTCA
			--LEFT JOIN B02_17B_TT_BNAME_AUTH_OBJCT_LIST B1 ON B1.USR02_BNAME = B.USR02_BNAME   -- for each user, tcode, object make all combinations from TSTCA
			--												AND B1.TSTCA_TCODE = A.TSTCA_TCODE
			--												AND A.TSTCA_OBJCT = B1.ZF_AGR_UST12_OBJCT
			LEFT JOIN B02_17_TT_BNAME_TCODE_AUTH_FULL_MAPPING_VALID C ON B.USR02_BNAME = C.USR02_BNAME -- Check for the user, tcode, authoriations, those that are missing an object
																		AND A.TSTCA_TCODE = C.TSTCA_TCODE
																		--AND C.ZF_AGR_UST12_AUTH = B1.ZF_AGR_UST12_AUTH
																		AND A.TSTCA_OBJCT = C.ZF_AGR_UST12_OBJCT

		WHERE A.TSTCA_VALUE <> '' AND C.ZF_AGR_UST12_OBJCT IS NULL -- taking those that were missing somehting so NULL in C


    -- Step 12f Remove Users+ TCODES for which the object was not complete within the authorization, or for which there
	--          there are not sufficient objects (due to the fact the object was not complete in the authorization)
	
	
	EXEC SP_DROPTABLE 'B02_20_TT_TSTCA_BNAME_TCODE_EXCL_AUTH'
		SELECT A.* 
		INTO B02_20_TT_TSTCA_BNAME_TCODE_EXCL_AUTH
		FROM B02_13B_TT_BNAME_TCODE_TSTCA A
		WHERE NOT EXISTS(SELECT * FROM B02_19_TT_BNAME_TCODE_EXCL_LIST_BY_AUTH B 
									WHERE A.USR02_BNAME = B.USR02_BNAME 
									AND A.ZF_AGR_UST12_VON = B.TSTCA_TCODE)
				AND A.ZF_AGR_UST12_VON <> ''




------------------------------------------------------------PART3--------------------------------------------------------------------------------
--Step 13-17: Eliminate user tocde with no relevant S_TCODE objects for USOBT

--Step 13: Create USOBX-USOBT requirement table
    -- For comparisons on individual values convert * to %
	-- For comparisons on range, remove the *
	-- Ignore lines where LOW is a * on its own or LOW is blank, as SAP will skip the check on this object
	EXEC SP_DROPTABLE 'B02_21_TT_USOBX_USOBT_CHECK_LIST'
	SELECT DISTINCT REPLACE(USOBT_NAME, '%', '[#]') USOBT_NAME, B.USOBT_OBJECT, B.USOBT_FIELD, REPLACE(USOBT_LOW, '*', '%') USOBT_LOW, REPLACE(USOBT_HIGH, '*', '%') USOBT_HIGH, REPLACE(USOBT_LOW, '*', '') ZF_USOBT_LOW_NWC,  REPLACE(USOBT_HIGH, '*', '') ZF_USOBT_HIGH_NWC
	INTO B02_21_TT_USOBX_USOBT_CHECK_LIST
	FROM A_USOBX_C A
	INNER JOIN A_USOBT_C B ON A.USOBX_NAME = B.USOBT_NAME
							AND A.USOBX_OBJECT = B.USOBT_OBJECT
	WHERE USOBX_OKFLAG IN ('X', 'Y') AND USOBT_TYPE = 'TR' AND USOBT_LOW <> '' AND USOBT_LOW <> '*'

	-- Remove required auth, objects that are always skipped the check
	DELETE B02_21_TT_USOBX_USOBT_CHECK_LIST
	WHERE (USOBT_LOW LIKE '$%' AND USOBT_FIELD <> 'TCD') OR USOBT_LOW = '''''' OR USOBT_LOW = '''' OR USOBT_LOW = ''' '''

-- Step 14: 
	-- Step 14a: Create objct authorization list
		EXEC SP_DROPTABLE 'B02_22_TT_BNAME_AUTH_OBJCT_LIST'
		SELECT DISTINCT USR02_BNAME, ZF_AGR_UST12_OBJCT, ZF_AGR_UST12_AUTH 
		INTO B02_22_TT_BNAME_AUTH_OBJCT_LIST
		FROM B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE

        ALTER TABLE B02_22_TT_BNAME_AUTH_OBJCT_LIST ALTER COLUMN USR02_BNAME NVARCHAR(50)
		CREATE INDEX IDX ON B02_22_TT_BNAME_AUTH_OBJCT_LIST(USR02_BNAME, ZF_AGR_UST12_OBJCT)
		CREATE INDEX ZF_AGR_UST12_AUTH ON B02_22_TT_BNAME_AUTH_OBJCT_LIST(ZF_AGR_UST12_AUTH)

	-- Step 14b:
		-- Create user, auth, objct, field, von & bis
		-- Von and bis field with no wildcard (*) because it will affect to SQL range and calculation performance
		EXEC SP_DROPTABLE 'B02_23_TT_UST10S_AGR_AUTH_OBJCT_AUTH_FIELD_VALUE'
		SELECT DISTINCT *, REPLACE(ZF_AGR_UST12_VON, '%', '') ZF_AGR_UST12_VON_NWC, REPLACE(ZF_AGR_UST12_BIS, '%', '') ZF_AGR_UST12_BIS_NWC
		INTO B02_23_TT_UST10S_AGR_AUTH_OBJCT_AUTH_FIELD_VALUE
		FROM B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
		CREATE CLUSTERED INDEX IDX ON B02_23_TT_UST10S_AGR_AUTH_OBJCT_AUTH_FIELD_VALUE(USR02_BNAME, ZF_AGR_UST12_AUTH, ZF_AGR_UST12_OBJCT, ZF_AGR_UST12_FIELD)
		CREATE INDEX ZF_AGR_UST12_VON ON B02_23_TT_UST10S_AGR_AUTH_OBJCT_AUTH_FIELD_VALUE(ZF_AGR_UST12_VON)
		-- Create user, objct, field, von & bis
		-- Von and bis field with no wildcard (*) because it will affect to SQL range and calculation performance
		EXEC SP_DROPTABLE 'B02_24_TT_UST10S_AGR_BNAME_OBJCT_FIELD_VALUE'
		SELECT DISTINCT USR02_BNAME, ZF_AGR_UST12_OBJCT, ZF_AGR_UST12_FIELD, ZF_AGR_UST12_VON, ZF_AGR_UST12_BIS ,REPLACE(ZF_AGR_UST12_VON, '%', '') ZF_AGR_UST12_VON_NWC, REPLACE(ZF_AGR_UST12_BIS, '%', '') ZF_AGR_UST12_BIS_NWC
		INTO B02_24_TT_UST10S_AGR_BNAME_OBJCT_FIELD_VALUE
		FROM B02_09_TT_UST10S_AGR_PROFILE_OBJCT_AUTH_FIELD_VALUE
		CREATE CLUSTERED INDEX IDX ON B02_24_TT_UST10S_AGR_BNAME_OBJCT_FIELD_VALUE(USR02_BNAME, ZF_AGR_UST12_OBJCT, ZF_AGR_UST12_FIELD)

	-- Step 14c: Create an exclusion TCODE list for TCODE with insufficient auth object from users
		EXEC SP_DROPTABLE 'B02_24B_TT_BNAME_TCODE_USOBT_EXCL_LIST'
		SELECT DISTINCT B.USR02_BNAME, A.USOBT_NAME
		INTO B02_24B_TT_BNAME_TCODE_USOBT_EXCL_LIST
		FROM B02_21_TT_USOBX_USOBT_CHECK_LIST A
		CROSS JOIN B02_00_TT_USR02_BNAME_ACTIVE B
		LEFT JOIN B02_12B_TT_BNAME_TCODE C ON C.USR02_BNAME = B.USR02_BNAME
															AND C.ZF_AGR_UST12_VON = A.USOBT_NAME
		LEFT JOIN B02_24_TT_UST10S_AGR_BNAME_OBJCT_FIELD_VALUE D ON D.USR02_BNAME = C.USR02_BNAME
															AND D.ZF_AGR_UST12_OBJCT = A.USOBT_OBJECT
															AND D.ZF_AGR_UST12_FIELD = A.USOBT_FIELD
															AND (
																-- pass if LOW field equal to VON (direct match
																D.ZF_AGR_UST12_VON = USOBT_LOW
																-- pass if LOW field from USOBT like user VON value pattern (F* or *F will be resolved here)
																OR ( USOBT_LOW LIKE D.ZF_AGR_UST12_VON)
																-- pass if user VON field like LOW field from USOBT pattern
																OR ( D.ZF_AGR_UST12_VON LIKE USOBT_LOW)
																-- pass if USOBT_LOW between VON and Bis value (user range covers USOBT LOW value)
																OR (D.ZF_AGR_UST12_BIS <> '' AND ZF_USOBT_LOW_NWC BETWEEN D.ZF_AGR_UST12_VON_NWC AND D.ZF_AGR_UST12_BIS_NWC)
																-- pass if user VON value is between USOBT LOW & HIGH value
																OR (USOBT_HIGH <> '' AND D.ZF_AGR_UST12_VON_NWC BETWEEN ZF_USOBT_LOW_NWC AND ZF_USOBT_HIGH_NWC)
																-- pass if both user & USOBT table have BIS & HIGH value and their range lie accross each other
																OR (USOBT_HIGH <> '' AND D.ZF_AGR_UST12_BIS <> '' AND ZF_AGR_UST12_VON_NWC <= ZF_USOBT_HIGH_NWC AND ZF_AGR_UST12_BIS_NWC >= ZF_USOBT_LOW_NWC))
		WHERE B.USR02_BNAME <> '' AND D.ZF_AGR_UST12_VON IS NULL


	-- Step 14d: Exclude the TCODE with insufficient auth object from users
		
		SELECT DISTINCT USOBT_NAME INTO B02_24C_TT_USOBT_TCODE_LIST FROM A_USOBT_C
		CREATE INDEX USOBT_NAME_IDX ON  B02_24C_TT_USOBT_TCODE_LIST(USOBT_NAME)

		EXEC SP_DROPTABLE 'B02_25_TT_BNAME_TCODE_STCODE_OBJCT_USOBT_CHECKED'
	
		SELECT DISTINCT A.* 
		INTO B02_25_TT_BNAME_TCODE_STCODE_OBJCT_USOBT_CHECKED
		FROM B02_12B_TT_BNAME_TCODE A --User TCODE list in step 2
		WHERE	-- check if the user + TCODE combination is not in the exclusion list
				(NOT EXISTS(SELECT * FROM B02_24B_TT_BNAME_TCODE_USOBT_EXCL_LIST B 
									WHERE A.USR02_BNAME = B.USR02_BNAME AND A.ZF_AGR_UST12_VON = B.USOBT_NAME))
				-- check if the TCODE is in USOBT scope
				AND EXISTS(SELECT * FROM B02_24C_TT_USOBT_TCODE_LIST WHERE USOBT_NAME = A.ZF_AGR_UST12_VON)

		EXEC SP_DROPTABLE 'B02_21B_TT_USOBX_USOBT_TCODE_LIST'
		SELECT DISTINCT USOBT_NAME INTO B02_21B_TT_USOBX_USOBT_TCODE_LIST FROM B02_21_TT_USOBX_USOBT_CHECK_LIST
		CREATE CLUSTERED INDEX IDX ON B02_25_TT_BNAME_TCODE_STCODE_OBJCT_USOBT_CHECKED(USR02_BNAME, ZF_AGR_UST12_VON)


-- Step 15: prepare reference tables for Loop
	-- Create an empty output table to store results
	CREATE TABLE [dbo].B02_30_TT_USOBT_BNAME_TCODE_EXCL_LIST_BY_AUTH(
		[USR02_BNAME] [varchar](70) NULL,
		[USOBT_NAME] [nvarchar](30) NULL
	) ON [PRIMARY]
	DECLARE @SQLMSG NVARCHAR(MAX) = ''
	-- Copy the scope user ID active table to another temp table

	SELECT * INTO B02_00B_TT_USR02_BNAME_ACTIVE FROM B02_00_TT_USR02_BNAME_ACTIVE

-- Step 16a-f: Start a loop to process 10 users each cycle to prevent SQL tempdb to overgrowth
	SET NOCOUNT ON
	WHILE EXISTS(SELECT * FROM B02_00B_TT_USR02_BNAME_ACTIVE)
	BEGIN
		--Step 16a: select 10 users from the user list
		EXEC SP_DROPTABLE 'B02_00C_TT_USR02_BNAME_ACTIVE'
		--SELECT TOP 50 * INTO B02_00C_TT_USR02_BNAME_ACTIVE FROM B02_00B_TT_USR02_BNAME_ACTIVE
		SELECT TOP 100 * INTO B02_00C_TT_USR02_BNAME_ACTIVE FROM B02_00B_TT_USR02_BNAME_ACTIVE
		--Step 16b: exclude the selected users from previous step
		DELETE B02_00B_TT_USR02_BNAME_ACTIVE
		FROM B02_00B_TT_USR02_BNAME_ACTIVE A
		INNER JOIN B02_00C_TT_USR02_BNAME_ACTIVE B ON A.USR02_BNAME = B.USR02_BNAME

		--Step 16c: from USOBT-USOBX table, check each TCODE's objects with the user auth object list
		EXEC SP_DROPTABLE 'B02_27_TT_BNAME_AUTH_FULL_MAPPING_USOBT'
		SELECT B.USR02_BNAME, A.USOBT_NAME, D.ZF_AGR_UST12_AUTH, D.ZF_AGR_UST12_OBJCT, E.ZF_AGR_UST12_FIELD, E.ZF_AGR_UST12_VON, E.ZF_AGR_UST12_BIS, USOBT_LOW
		INTO B02_27_TT_BNAME_AUTH_FULL_MAPPING_USOBT
		FROM B02_21_TT_USOBX_USOBT_CHECK_LIST A
		CROSS JOIN B02_00C_TT_USR02_BNAME_ACTIVE B
		INNER JOIN B02_25_TT_BNAME_TCODE_STCODE_OBJCT_USOBT_CHECKED C ON C.USR02_BNAME = B.USR02_BNAME
															AND C.ZF_AGR_UST12_VON = A.USOBT_NAME  -- limit to those that have access to the TCODE
		INNER JOIN B02_22_TT_BNAME_AUTH_OBJCT_LIST D ON D.USR02_BNAME = C.USR02_BNAME 
													AND D.ZF_AGR_UST12_OBJCT = A.USOBT_OBJECT  -- get the authorization per user, object
		LEFT JOIN B02_23_TT_UST10S_AGR_AUTH_OBJCT_AUTH_FIELD_VALUE E ON E.USR02_BNAME = C.USR02_BNAME
																	AND E.ZF_AGR_UST12_AUTH = D.ZF_AGR_UST12_AUTH
																	AND E.ZF_AGR_UST12_OBJCT = A.USOBT_OBJECT
																	AND E.ZF_AGR_UST12_FIELD = A.USOBT_FIELD
																	AND (-- pass if LOW field equal to VON (direct match)
																		E.ZF_AGR_UST12_VON = USOBT_LOW
																	-- pass if LOW field from USOBT like user VON value pattern (F* or *F will be resolved here)
																	OR ( USOBT_LOW LIKE E.ZF_AGR_UST12_VON)
																	-- pass if user VON field like LOW field from USOBT pattern
																	OR (E.ZF_AGR_UST12_VON LIKE USOBT_LOW)
																	-- pass if USOBT_LOW between VON and Bis value (user range covers USOBT LOW value)
																	OR (E.ZF_AGR_UST12_BIS <> '' AND ZF_USOBT_LOW_NWC BETWEEN E.ZF_AGR_UST12_VON_NWC AND E.ZF_AGR_UST12_BIS_NWC)
																	-- pass if user VON value is between USOBT LOW & HIGH value
																	OR (USOBT_HIGH <> '' AND E.ZF_AGR_UST12_VON_NWC BETWEEN ZF_USOBT_LOW_NWC AND ZF_USOBT_HIGH_NWC)
																	-- pass if both user & USOBT table have BIS & HIGH value and their range lie accross each other
																	OR (USOBT_HIGH <> '' AND E.ZF_AGR_UST12_BIS <> '' AND ZF_AGR_UST12_VON_NWC <= ZF_USOBT_HIGH_NWC AND ZF_AGR_UST12_BIS_NWC >= ZF_USOBT_LOW_NWC))

		--Step 16d: Exclude the auth ID with unmatched results, keep the users' BNAME, TCODE, AUTH & OBJCT combination that has the matched results only.
		EXEC SP_DROPTABLE 'B02_28_TT_BNAME_AUTH_FULL_MAPPING_USOBT_VALID'
		SELECT DISTINCT USR02_BNAME, USOBT_NAME, ZF_AGR_UST12_OBJCT
		INTO B02_28_TT_BNAME_AUTH_FULL_MAPPING_USOBT_VALID
		FROM B02_27_TT_BNAME_AUTH_FULL_MAPPING_USOBT A
		WHERE NOT EXISTS(SELECT * FROM B02_27_TT_BNAME_AUTH_FULL_MAPPING_USOBT B WHERE B.USR02_BNAME = A.USR02_BNAME
																	AND B.USOBT_NAME = A.USOBT_NAME
																	AND B.ZF_AGR_UST12_AUTH = A.ZF_AGR_UST12_AUTH
																	AND B.ZF_AGR_UST12_OBJCT = A.ZF_AGR_UST12_OBJCT
																	AND B.ZF_AGR_UST12_FIELD IS NULL)

		ALTER TABLE B02_28_TT_BNAME_AUTH_FULL_MAPPING_USOBT_VALID ALTER COLUMN USOBT_NAME VARCHAR(70)
		CREATE CLUSTERED INDEX IDX ON B02_28_TT_BNAME_AUTH_FULL_MAPPING_USOBT_VALID(USR02_BNAME, USOBT_NAME, ZF_AGR_UST12_OBJCT)

		--Step 16e: Create new valid user, TCODE, Auth, object list
		--EXEC SP_DROPTABLE 'B02_29_TT_BNAME_AUTH_OBJCT_LIST'
		--SELECT DISTINCT USR02_BNAME, USOBT_NAME, ZF_AGR_UST12_AUTH, ZF_AGR_UST12_OBJCT INTO B02_29_TT_BNAME_AUTH_OBJCT_LIST FROM B02_28_TT_BNAME_AUTH_FULL_MAPPING_USOBT_VALID
		--CREATE CLUSTERED INDEX IDX ON B02_29_TT_BNAME_AUTH_OBJCT_LIST(USR02_BNAME, USOBT_NAME, ZF_AGR_UST12_OBJCT)
		--CREATE INDEX ZF_AGR_UST12_AUTH ON B02_29_TT_BNAME_AUTH_OBJCT_LIST(ZF_AGR_UST12_AUTH)

		--Step 16f: Exclude the TCODE with insufficient Auth object from users' auth tables
		EXEC SP_DROPTABLE 'B02_21B_TT_USOBX_USOBT_TCODE_OBJ_CHECK_LIST'
		SELECT DISTINCT USOBT_NAME, USOBT_OBJECT
		INTO B02_21B_TT_USOBX_USOBT_TCODE_OBJ_CHECK_LIST
		FROM B02_21_TT_USOBX_USOBT_CHECK_LIST
		ALTER TABLE B02_21B_TT_USOBX_USOBT_TCODE_OBJ_CHECK_LIST ALTER COLUMN USOBT_NAME VARCHAR(70)
		ALTER TABLE B02_21B_TT_USOBX_USOBT_TCODE_OBJ_CHECK_LIST ALTER COLUMN USOBT_OBJECT VARCHAR(70)
		CREATE INDEX USOBT ON B02_21B_TT_USOBX_USOBT_TCODE_OBJ_CHECK_LIST(USOBT_NAME)
		CREATE INDEX OBJCT ON B02_21B_TT_USOBX_USOBT_TCODE_OBJ_CHECK_LIST(USOBT_OBJECT)

		INSERT INTO B02_30_TT_USOBT_BNAME_TCODE_EXCL_LIST_BY_AUTH
		SELECT DISTINCT B.USR02_BNAME, A.USOBT_NAME
		FROM B02_21B_TT_USOBX_USOBT_TCODE_LIST A
		CROSS JOIN B02_00C_TT_USR02_BNAME_ACTIVE B
		WHERE EXISTS(SELECT * FROM B02_21B_TT_USOBX_USOBT_TCODE_OBJ_CHECK_LIST B1
								LEFT JOIN B02_28_TT_BNAME_AUTH_FULL_MAPPING_USOBT_VALID E ON E.USR02_BNAME = B.USR02_BNAME
																					AND E.USOBT_NAME = B1.USOBT_NAME
																					AND E.ZF_AGR_UST12_OBJCT = B1.USOBT_OBJECT
						WHERE B1.USOBT_NAME = A.USOBT_NAME AND E.ZF_AGR_UST12_OBJCT IS NULL)


		SET @SQLMSG = CAST((SELECT COUNT(*) FROM B02_00B_TT_USR02_BNAME_ACTIVE) AS NVARCHAR(50)) + ' record(s) left'
		SET NOCOUNT ON
		RAISERROR (@SQLMSG, 10, 1)
		SET NOCOUNT OFF
	END
	SET NOCOUNT OFF

-- Step 17: from above results, exclude the user TCODE with insufficient authorization objects.
	EXEC SP_DROPTABLE 'B02_31_TT_USOBT_BNAME_TCODE_EXCL_AUTH'
	SELECT A.*
	INTO B02_31_TT_USOBT_BNAME_TCODE_EXCL_AUTH
	FROM B02_25_TT_BNAME_TCODE_STCODE_OBJCT_USOBT_CHECKED A
	WHERE NOT EXISTS(SELECT * FROM B02_30_TT_USOBT_BNAME_TCODE_EXCL_LIST_BY_AUTH B WHERE B.USR02_BNAME = A.USR02_BNAME AND B.USOBT_NAME = A.ZF_AGR_UST12_VON)

-- Step 18: combine results from TSTCA & USOBT parts
	EXEC SP_DROPTABLE 'B02A_32_TT_BNAME_TCODE_ACCESS'
	SELECT DISTINCT A.USR02_BNAME USR02_BNAME, A.ZF_AGR_UST12_VON ZF_AGR_UST12_VON, IIF(B1.ZF_AGR_UST12_VON IS NOT NULL, 'X', '') DISPLAY, IIF(C1.ZF_AGR_UST12_VON IS NOT NULL, 'X', '') FULL_ACCESS
	INTO B02A_32_TT_BNAME_TCODE_ACCESS
	FROM B02_12B_TT_BNAME_TCODE A
	-- joining with TSTCA TCODE valid list
	LEFT JOIN B02_20_TT_TSTCA_BNAME_TCODE_EXCL_AUTH B1 ON 
											A.USR02_BNAME = B1.USR02_BNAME 
											AND A.ZF_AGR_UST12_VON = B1.ZF_AGR_UST12_VON
	-- joining with USOBT TCODE valid list
	LEFT JOIN B02_31_TT_USOBT_BNAME_TCODE_EXCL_AUTH C1 ON 
											A.USR02_BNAME = C1.USR02_BNAME 
											AND A.ZF_AGR_UST12_VON = C1.ZF_AGR_UST12_VON
	WHERE
	-- get the TCODE that are not from exclusion list
	B1.ZF_AGR_UST12_VON IS NOT NULL 
	OR C1.ZF_AGR_UST12_VON IS NOT NULL
	-- or not exists in both TSTCA & USOBT scope
	OR (NOT EXISTS(SELECT * FROM A_USOBT_C WHERE USOBT_NAME = A.ZF_AGR_UST12_VON)
			AND NOT EXISTS(SELECT * FROM A_TSTCA WHERE TSTCA_TCODE = A.ZF_AGR_UST12_VON))

-- Step 19: update roles to the current output cube
	-- get role information from AGR_USERS, AGR_AGRS normalized and AGR_1251 tables
	EXEC SP_RENAME_FIELD 'B02A_', 'B02A_32_TT_BNAME_TCODE_ACCESS'
	EXEC SP_DROPTABLE 'B02_33_TT_AGR_ROLE_MAPPING'
		SELECT DISTINCT AGR_USERS_UNAME, AGR_AGRS_CHILD_AGR, AGR_1251_OBJECT, AGR_1251_LOW, AGR_1251_HIGH
		INTO B02_33_TT_AGR_ROLE_MAPPING
		FROM A_AGR_USERS
		INNER JOIN B02_00_TT_USR02_BNAME_ACTIVE ON USR02_BNAME = AGR_USERS_UNAME
		LEFT JOIN B02_06B_TT_AGR_ROLE_NORMALIZED ON AGR_AGRS_AGR_NAME = AGR_USERS_AGR_NAME
		INNER JOIN A_AGR_1251 ON AGR_1251_DELETED <> 'X' AND AGR_1251_OBJECT = 'S_TCODE' AND AGR_AGRS_CHILD_AGR = AGR_1251_AGR_NAME

		
		ALTER TABLE B02_33_TT_AGR_ROLE_MAPPING ALTER COLUMN AGR_USERS_UNAME NVARCHAR(70)
		ALTER TABLE B02_33_TT_AGR_ROLE_MAPPING ALTER COLUMN AGR_1251_OBJECT VARCHAR(70)
		ALTER TABLE B02_33_TT_AGR_ROLE_MAPPING ALTER COLUMN AGR_1251_LOW VARCHAR(70)
		CREATE CLUSTERED INDEX IDX ON B02_33_TT_AGR_ROLE_MAPPING(AGR_USERS_UNAME, AGR_1251_LOW)
		EXEC SP_DROPTABLE 'B02_25_TT_AGR_TCODE_RANGE_LIST_ROLE'
		-- Step 17B: obtain the Role - TCODE range list
		SELECT DISTINCT AGR_USERS_UNAME, REPLACE(AGR_1251_LOW, '*', '%') AGR_1251_LOW, AGR_1251_HIGH, AGR_AGRS_CHILD_AGR
		INTO B02_25_TT_AGR_TCODE_RANGE_LIST_ROLE
		FROM B02_33_TT_AGR_ROLE_MAPPING
		WHERE (AGR_1251_LOW LIKE '%*%' OR AGR_1251_HIGH <> '')

	-- normalize TCODE with roles information
		INSERT INTO B02_33_TT_AGR_ROLE_MAPPING
		SELECT DISTINCT AGR_USERS_UNAME, AGR_AGRS_CHILD_AGR, '' AGR_1251_OBJECT, TSTC_TCODE AGR_1251_LOW, '' AGR_1251_HIGH
		FROM B02_25_TT_AGR_TCODE_RANGE_LIST_ROLE A
		INNER JOIN A_TSTC AT ON (AGR_1251_LOW = '%') 
													OR (AGR_1251_HIGH = '' AND AT.TSTC_TCODE LIKE AGR_1251_LOW)
													OR (AGR_1251_HIGH <> '' AND AT.TSTC_TCODE BETWEEN REPLACE(AGR_1251_LOW, '%', '') AND AGR_1251_HIGH)
		WHERE NOT EXISTS(SELECT * FROM B02_33_TT_AGR_ROLE_MAPPING B WHERE B.AGR_USERS_UNAME = A.AGR_USERS_UNAME AND TSTC_TCODE = B.AGR_1251_LOW)


		CREATE INDEX AGR_USERS_UNAME ON B02_33_TT_AGR_ROLE_MAPPING(AGR_USERS_UNAME)
		CREATE INDEX AGR_1251_OBJECT ON B02_33_TT_AGR_ROLE_MAPPING(AGR_1251_OBJECT)
		CREATE INDEX AGR_1251_LOW ON B02_33_TT_AGR_ROLE_MAPPING(AGR_1251_LOW)

-- Step 20: combine outputs from step 18 & step 19 to final table

	EXEC SP_DROPTABLE 'B02A_34_IT_BNAME_TCODE_ACCESS'
	SELECT DISTINCT
	A.B02A_USR02_BNAME,
	B.AGR_AGRS_CHILD_AGR B02A_AGR_USERS_AGR_NAME,
	REPLACE(B02A_ZF_AGR_UST12_VON, '[#]', '%') B02A_ZF_AGR_UST12_VON,
	TSTCT_TTEXT B02A_TSTCT_TTEXT,
	B02A_DISPLAY,
	B02A_FULL_ACCESS
	INTO B02A_34_IT_BNAME_TCODE_ACCESS
	FROM B02A_32_TT_BNAME_TCODE_ACCESS A
	LEFT JOIN B02_33_TT_AGR_ROLE_MAPPING B ON A.B02A_USR02_BNAME = B.AGR_USERS_UNAME 
													AND A.B02A_ZF_AGR_UST12_VON = B.AGR_1251_LOW
	LEFT JOIN A_TSTCT ON TSTCT_SPRSL in ('E', 'EN') AND dbo.REMOVE_LEADING_ZEROES(TSTCT_TCODE) = dbo.REMOVE_LEADING_ZEROES(A.B02A_ZF_AGR_UST12_VON)
	WHERE NOT A.B02A_ZF_AGR_UST12_VON LIKE '%[%]%'






END

GO
