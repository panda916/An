USE [DIVA_ASAP_TEST_DATA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<thuan>
-- Create date: <June 20, 2022>
-- Description:	Check create/insert AM mapping table.
-- =============================================
CREATE        PROCEDURE [dbo].[A_009_CREATE/UPDATE_AM_COPA_MAPPING_TABLE]
AS
BEGIN
/* Initialize parameters from globals table */

     DECLARE 	 
			 @CURRENCY NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'currency')
			,@DATE1 NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'date1')
			,@DATE2 NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'date2')
			,@DOWNLOADDATE NVARCHAR(MAX)		= (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'downloaddate')
			,@DATEFORMAT VARCHAR(3)             = (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'dateformat')
			,@EXCHANGERATETYPE NVARCHAR(MAX)	= (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'exchangeratetype')
			,@LANGUAGE1 NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'language1')
			,@LANGUAGE2 NVARCHAR(MAX)			= (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'language2')
			,@YEAR NVARCHAR(MAX)				= (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'year')
			,@ID NVARCHAR(MAX)					= (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'id')
			,@LIMIT_RECORDS INT		            = CAST((SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'LIMIT_RECORDS') AS INT)
			,@COPA_TABLE NVARCHAR(1000)         = (SELECT GLOBALS_VALUE FROM AM_GLOBALS WHERE GLOBALS_PARAMETER = 'COPA_TABLE_NAME')



/*
		Step 1: Create AM_COPA_MAPPING_BK table if it do not exist.
*/

PRINT 'Creating AM_COPA_MAPPING table.'
	IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'AM_COPA_MAPPING')
		BEGIN
			CREATE TABLE [dbo].AM_COPA_MAPPING(
				[COMA_Controlling_area] [nvarchar](255) NULL,
				[COMA_SAP_field] [nvarchar](255) NULL,
				[COMA_M_COPA_field_label] [nvarchar](255) NULL,
				[COMA_M_Hierarchy_L1] [nvarchar](255) NULL,
				[COMA_M_Hierarchy_L2] [nvarchar](255) NULL,
				[COMA_M_Hierarchy_L3] [nvarchar](255) NULL,
				[COMA_M_Contractual_condition] [nvarchar](255) NULL,
				[COMA_M_Settlement_method] [nvarchar](255) NULL,
				[COMA_M_Rebate_basis] [nvarchar](255) NULL,
				[COMA_M_CI_or_non_CI] [nvarchar](255) NULL,
				[COMA_MANDANT] [float] NULL,
				[COMA_Value] [float] NULL,
				[COMA_BUKRS] [nvarchar](255) NULL,
				[_COPA_MAPPING_MA] [nvarchar](255) NULL
			)
		END

/*
		Step 2: Defind table COPA for each entity in AM_GLOBALS, then get field name from COPA table has value ( <> 0).
		Get field name from COPA table with data type is currency (money) and has value ( <>0)
		Note : @COPA_TABLE : is variable store COPA table for each entity from AM_GLOBALS table.
		In A_009_01_TT_FIELD_COPA_HAS_VALUE :Store value like below.
			1. COPA table.
			2. Field name
			3. COPA table + Field name
			4. Number of value for each field ( <> 0)
*/
EXEC SP_REMOVE_TABLES 'A_009_01_TT_FIELD_COPA_HAS_VALUE'
SELECT 
		'SELECT ' +''''+ @COPA_TABLE +''' , ' +''''+ RIGHT(COLUMN_NAME, LEN(@COPA_TABLE) - (CHARINDEX('_',@COPA_TABLE)) -2)+ ''' , ' +
		+''''+ COLUMN_NAME + ''' , ' +  'COUNT( DISTINCT '+COLUMN_NAME
		+' ) FROM '+ @COPA_TABLE + ' WHERE '+COLUMN_NAME+ ' <> 0' AS ZF_COUNT_DISTINCT_VALUE
INTO A_009_01_TT_FIELD_COPA_HAS_VALUE
FROM  INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME= @COPA_TABLE
AND DATA_TYPE = 'Money'

/*
	Step 3 : Run SQL to get field name has value from COPA table. EXEC SQL.
*/

-- Step 3.1 Store A_009_01_TT_FIELD_COPA_HAS_VALUE to A_009_02_TT_FIELD_COPA_HAS_VALUE_COPY
EXEC SP_REMOVE_TABLES 'A_009_02_TT_FIELD_COPA_HAS_VALUE_COPY'

SELECT 
	DISTINCT * 
INTO A_009_02_TT_FIELD_COPA_HAS_VALUE_COPY
FROM A_009_01_TT_FIELD_COPA_HAS_VALUE

-- Step 3.2 Create table to store field name has value from COPA table.

EXEC SP_REMOVE_TABLES 'A_009_03_TT_FIELD_COPA_RUN_SQL'

CREATE TABLE A_009_03_TT_FIELD_COPA_RUN_SQL
(
	ZF_TABLE_NAME NVARCHAR(100),
	ZF_FILED_NAME NVARCHAR(100),
	ZF_TABLE_FILED_NAME NVARCHAR(100),
	ZF_NUMBER_FIELD INT
)
-- Step 3.3 Run exec SQL

-- @ZF_COUNT_DISTINCT_VALUE : Variable to store value from A_009_02_TT_FIELD_COPA_HAS_VALUE_COPY table.
DECLARE @ZF_COUNT_DISTINCT_VALUE NVARCHAR(1000) ='';

WHILE EXISTS ( SELECT * FROM A_009_02_TT_FIELD_COPA_HAS_VALUE_COPY)
BEGIN
	SET @ZF_COUNT_DISTINCT_VALUE = 
		( 
			SELECT TOP 1 ZF_COUNT_DISTINCT_VALUE FROM A_009_02_TT_FIELD_COPA_HAS_VALUE_COPY )

	INSERT INTO A_009_03_TT_FIELD_COPA_RUN_SQL 
	EXEC (@ZF_COUNT_DISTINCT_VALUE)
	DELETE FROM A_009_02_TT_FIELD_COPA_HAS_VALUE_COPY WHERE ZF_COUNT_DISTINCT_VALUE = @ZF_COUNT_DISTINCT_VALUE
END

/*
	Step 4 : Get field name has value from result step 3.
	Get field name text from DD03L and DD04T tables.
	
*/

EXEC SP_REMOVE_TABLES 'A_009_04_TT_FIELD_NAME_TEXT'

SELECT A.*, C.DD04T_DDTEXT
INTO A_009_04_TT_FIELD_NAME_TEXT
FROM A_009_03_TT_FIELD_COPA_RUN_SQL AS A
	INNER JOIN A_DD03L AS B -- Get roll name from DD03L
ON A.ZF_TABLE_NAME LIKE '%'+B.TABNAME+'%' AND A.ZF_FILED_NAME = B.FIELDNAME  -- Link with DD03L based on table name and field name
INNER JOIN A_DD04T AS C  -- Get field name text from DD04T table. Link with DD03L based on rollname
ON B.ROLLNAME  = C.DD04T_ROLLNAME
WHERE ZF_NUMBER_FIELD > 0 -- Where field name has value. ( <> 0)

/*
	Insert filed name has value into AM_COPA_MAPPING table.

*/

INSERT INTO dbo.[AM_COPA_MAPPING] (COMA_SAP_field, COMA_M_COPA_field_label)
SELECT DISTINCT ZF_FILED_NAME, DD04T_DDTEXT FROM A_009_04_TT_FIELD_NAME_TEXT 
WHERE NOT EXISTS
(
	SELECT TOP 1 1 
	FROM [AM_COPA_MAPPING]
	WHERE A_009_04_TT_FIELD_NAME_TEXT.ZF_FILED_NAME = [AM_COPA_MAPPING].COMA_SAP_field

)

/*
	Step 5 / Remove TT table.
*/
EXEC SP_REMOVE_TABLES 'A_009_01_TT_FIELD_COPA_HAS_VALUE'
EXEC SP_REMOVE_TABLES 'A_009_02_TT_FIELD_COPA_HAS_VALUE_COPY'
EXEC SP_REMOVE_TABLES 'A_009_03_TT_FIELD_COPA_RUN_SQL'
EXEC SP_REMOVE_TABLES 'A_009_04_TT_FIELD_NAME_TEXT'

END

GO
